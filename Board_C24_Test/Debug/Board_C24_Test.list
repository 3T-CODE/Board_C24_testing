
Board_C24_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002168  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002274  08002274  00003274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002298  08002298  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002298  08002298  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002298  08002298  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002298  08002298  00003298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800229c  0800229c  0000329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022a0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  080022ac  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  080022ac  000040dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005484  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161d  00000000  00000000  000094b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  0000aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d8  00000000  00000000  0000b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001644f  00000000  00000000  0000b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075a3  00000000  00000000  00021a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e349  00000000  00000000  0002903a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7383  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a0c  00000000  00000000  000a73c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a8dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800225c 	.word	0x0800225c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800225c 	.word	0x0800225c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	2364      	movs	r3, #100	@ 0x64
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <spi_write+0x20>)
 80005e6:	f001 fc23 	bl	8001e30 <HAL_SPI_Transmit>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000028 	.word	0x20000028

080005f8 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000608:	480a      	ldr	r0, [pc, #40]	@ (8000634 <lcd_write_data+0x3c>)
 800060a:	f000 ff7d 	bl	8001508 <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2102      	movs	r1, #2
 8000612:	4809      	ldr	r0, [pc, #36]	@ (8000638 <lcd_write_data+0x40>)
 8000614:	f000 ff78 	bl	8001508 <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffda 	bl	80005d4 <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000626:	4803      	ldr	r0, [pc, #12]	@ (8000634 <lcd_write_data+0x3c>)
 8000628:	f000 ff6e 	bl	8001508 <HAL_GPIO_WritePin>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40011000 	.word	0x40011000
 8000638:	40010800 	.word	0x40010800

0800063c <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2102      	movs	r1, #2
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <lcd_write_command+0x3c>)
 800064c:	f000 ff5c 	bl	8001508 <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000656:	4809      	ldr	r0, [pc, #36]	@ (800067c <lcd_write_command+0x40>)
 8000658:	f000 ff56 	bl	8001508 <HAL_GPIO_WritePin>
    spi_write(data);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ffb8 	bl	80005d4 <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800066a:	4804      	ldr	r0, [pc, #16]	@ (800067c <lcd_write_command+0x40>)
 800066c:	f000 ff4c 	bl	8001508 <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40010800 	.word	0x40010800
 800067c:	40011000 	.word	0x40011000

08000680 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffd3 	bl	800063c <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ffce 	bl	800063c <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffa6 	bl	80005f8 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa1 	bl	80005f8 <lcd_write_data>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
	...

080006e8 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	e9c7 0100 	strd	r0, r1, [r7]
    int multiplier = 4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	617b      	str	r3, [r7, #20]
    double counter = millis;
 80006f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 80006fe:	e01c      	b.n	800073a <delay_ms+0x52>
        while(counter--);
 8000700:	bf00      	nop
 8000702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000706:	f04f 0200 	mov.w	r2, #0
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <delay_ms+0x68>)
 800070c:	4620      	mov	r0, r4
 800070e:	4629      	mov	r1, r5
 8000710:	f7ff fd20 	bl	8000154 <__aeabi_dsub>
 8000714:	4602      	mov	r2, r0
 8000716:	460b      	mov	r3, r1
 8000718:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800071c:	f04f 0200 	mov.w	r2, #0
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	4620      	mov	r0, r4
 8000726:	4629      	mov	r1, r5
 8000728:	f7ff ff22 	bl	8000570 <__aeabi_dcmpeq>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0e7      	beq.n	8000702 <delay_ms+0x1a>
        counter = millis;
 8000732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000736:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	1e5a      	subs	r2, r3, #1
 800073e:	617a      	str	r2, [r7, #20]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1dd      	bne.n	8000700 <delay_ms+0x18>
    }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bdb0      	pop	{r4, r5, r7, pc}
 800074e:	bf00      	nop
 8000750:	3ff00000 	.word	0x3ff00000

08000754 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800075e:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <lcd_init+0x54>)
 8000760:	f000 fed2 	bl	8001508 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	4810      	ldr	r0, [pc, #64]	@ (80007ac <lcd_init+0x58>)
 800076a:	f000 fecd 	bl	8001508 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 800076e:	2201      	movs	r2, #1
 8000770:	2101      	movs	r1, #1
 8000772:	480e      	ldr	r0, [pc, #56]	@ (80007ac <lcd_init+0x58>)
 8000774:	f000 fec8 	bl	8001508 <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	480b      	ldr	r0, [pc, #44]	@ (80007ac <lcd_init+0x58>)
 800077e:	f000 fec3 	bl	8001508 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	490a      	ldr	r1, [pc, #40]	@ (80007b0 <lcd_init+0x5c>)
 8000788:	f7ff ffae 	bl	80006e8 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	4806      	ldr	r0, [pc, #24]	@ (80007ac <lcd_init+0x58>)
 8000792:	f000 feb9 	bl	8001508 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000796:	f04f 0000 	mov.w	r0, #0
 800079a:	4905      	ldr	r1, [pc, #20]	@ (80007b0 <lcd_init+0x5c>)
 800079c:	f7ff ffa4 	bl	80006e8 <delay_ms>
    
    lcd_init_command_list();
 80007a0:	f000 f808 	bl	80007b4 <lcd_init_command_list>
    
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40011000 	.word	0x40011000
 80007ac:	40010800 	.word	0x40010800
 80007b0:	407f4000 	.word	0x407f4000

080007b4 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 80007b8:	2100      	movs	r1, #0
 80007ba:	2010      	movs	r0, #16
 80007bc:	f7ff ff60 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 80007c0:	2100      	movs	r1, #0
 80007c2:	2011      	movs	r0, #17
 80007c4:	f7ff ff5c 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 80007c8:	2100      	movs	r1, #0
 80007ca:	2012      	movs	r0, #18
 80007cc:	f7ff ff58 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 80007d0:	2100      	movs	r1, #0
 80007d2:	2013      	movs	r0, #19
 80007d4:	f7ff ff54 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 80007d8:	2100      	movs	r1, #0
 80007da:	2014      	movs	r0, #20
 80007dc:	f7ff ff50 	bl	8000680 <lcd_write_register>
    
    delay_ms(10);
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	4960      	ldr	r1, [pc, #384]	@ (8000968 <lcd_init_command_list+0x1b4>)
 80007e6:	f7ff ff7f 	bl	80006e8 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 80007ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007ee:	2011      	movs	r0, #17
 80007f0:	f7ff ff46 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 80007f4:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80007f8:	2012      	movs	r0, #18
 80007fa:	f7ff ff41 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 80007fe:	216f      	movs	r1, #111	@ 0x6f
 8000800:	2013      	movs	r0, #19
 8000802:	f7ff ff3d 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8000806:	f644 115f 	movw	r1, #18783	@ 0x495f
 800080a:	2014      	movs	r0, #20
 800080c:	f7ff ff38 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 8000810:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000814:	2010      	movs	r0, #16
 8000816:	f7ff ff33 	bl	8000680 <lcd_write_register>
    
    delay_ms(10);
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	4952      	ldr	r1, [pc, #328]	@ (8000968 <lcd_init_command_list+0x1b4>)
 8000820:	f7ff ff62 	bl	80006e8 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 8000824:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff ff29 	bl	8000680 <lcd_write_register>

    delay_ms(50);
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	494e      	ldr	r1, [pc, #312]	@ (800096c <lcd_init_command_list+0x1b8>)
 8000834:	f7ff ff58 	bl	80006e8 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8000838:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff ff1f 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8000842:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff ff1a 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 800084c:	f241 0130 	movw	r1, #4144	@ 0x1030
 8000850:	2003      	movs	r0, #3
 8000852:	f7ff ff15 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8000856:	2100      	movs	r1, #0
 8000858:	2007      	movs	r0, #7
 800085a:	f7ff ff11 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 800085e:	f240 2102 	movw	r1, #514	@ 0x202
 8000862:	2008      	movs	r0, #8
 8000864:	f7ff ff0c 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8000868:	2100      	movs	r1, #0
 800086a:	200b      	movs	r0, #11
 800086c:	f7ff ff08 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8000870:	2100      	movs	r1, #0
 8000872:	200c      	movs	r0, #12
 8000874:	f7ff ff04 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8000878:	f640 7101 	movw	r1, #3841	@ 0xf01
 800087c:	200f      	movs	r0, #15
 800087e:	f7ff feff 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8000882:	2100      	movs	r1, #0
 8000884:	2015      	movs	r0, #21
 8000886:	f7ff fefb 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 800088a:	2100      	movs	r1, #0
 800088c:	2020      	movs	r0, #32
 800088e:	f7ff fef7 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8000892:	2100      	movs	r1, #0
 8000894:	2021      	movs	r0, #33	@ 0x21
 8000896:	f7ff fef3 	bl	8000680 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 800089a:	2100      	movs	r1, #0
 800089c:	2030      	movs	r0, #48	@ 0x30
 800089e:	f7ff feef 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 80008a2:	21db      	movs	r1, #219	@ 0xdb
 80008a4:	2031      	movs	r0, #49	@ 0x31
 80008a6:	f7ff feeb 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 80008aa:	2100      	movs	r1, #0
 80008ac:	2032      	movs	r0, #50	@ 0x32
 80008ae:	f7ff fee7 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 80008b2:	2100      	movs	r1, #0
 80008b4:	2033      	movs	r0, #51	@ 0x33
 80008b6:	f7ff fee3 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 80008ba:	21db      	movs	r1, #219	@ 0xdb
 80008bc:	2034      	movs	r0, #52	@ 0x34
 80008be:	f7ff fedf 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 80008c2:	2100      	movs	r1, #0
 80008c4:	2035      	movs	r0, #53	@ 0x35
 80008c6:	f7ff fedb 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 80008ca:	21af      	movs	r1, #175	@ 0xaf
 80008cc:	2036      	movs	r0, #54	@ 0x36
 80008ce:	f7ff fed7 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 80008d2:	2100      	movs	r1, #0
 80008d4:	2037      	movs	r0, #55	@ 0x37
 80008d6:	f7ff fed3 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 80008da:	21db      	movs	r1, #219	@ 0xdb
 80008dc:	2038      	movs	r0, #56	@ 0x38
 80008de:	f7ff fecf 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 80008e2:	2100      	movs	r1, #0
 80008e4:	2039      	movs	r0, #57	@ 0x39
 80008e6:	f7ff fecb 	bl	8000680 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 80008ea:	2100      	movs	r1, #0
 80008ec:	2050      	movs	r0, #80	@ 0x50
 80008ee:	f7ff fec7 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 80008f2:	f640 0108 	movw	r1, #2056	@ 0x808
 80008f6:	2051      	movs	r0, #81	@ 0x51
 80008f8:	f7ff fec2 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 80008fc:	f640 010a 	movw	r1, #2058	@ 0x80a
 8000900:	2052      	movs	r0, #82	@ 0x52
 8000902:	f7ff febd 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8000906:	210a      	movs	r1, #10
 8000908:	2053      	movs	r0, #83	@ 0x53
 800090a:	f7ff feb9 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 800090e:	f640 2108 	movw	r1, #2568	@ 0xa08
 8000912:	2054      	movs	r0, #84	@ 0x54
 8000914:	f7ff feb4 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 8000918:	f640 0108 	movw	r1, #2056	@ 0x808
 800091c:	2055      	movs	r0, #85	@ 0x55
 800091e:	f7ff feaf 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8000922:	2100      	movs	r1, #0
 8000924:	2056      	movs	r0, #86	@ 0x56
 8000926:	f7ff feab 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 800092a:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 800092e:	2057      	movs	r0, #87	@ 0x57
 8000930:	f7ff fea6 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8000934:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000938:	2058      	movs	r0, #88	@ 0x58
 800093a:	f7ff fea1 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 800093e:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000942:	2059      	movs	r0, #89	@ 0x59
 8000944:	f7ff fe9c 	bl	8000680 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8000948:	2112      	movs	r1, #18
 800094a:	2007      	movs	r0, #7
 800094c:	f7ff fe98 	bl	8000680 <lcd_write_register>

    delay_ms(50); 
 8000950:	f04f 0000 	mov.w	r0, #0
 8000954:	4905      	ldr	r1, [pc, #20]	@ (800096c <lcd_init_command_list+0x1b8>)
 8000956:	f7ff fec7 	bl	80006e8 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 800095a:	f241 0117 	movw	r1, #4119	@ 0x1017
 800095e:	2007      	movs	r0, #7
 8000960:	f7ff fe8e 	bl	8000680 <lcd_write_register>

    
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40240000 	.word	0x40240000
 800096c:	40490000 	.word	0x40490000

08000970 <fill_rectangle>:
}

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	4604      	mov	r4, r0
 8000978:	4608      	mov	r0, r1
 800097a:	4611      	mov	r1, r2
 800097c:	461a      	mov	r2, r3
 800097e:	4623      	mov	r3, r4
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	4603      	mov	r3, r0
 8000984:	71bb      	strb	r3, [r7, #6]
 8000986:	460b      	mov	r3, r1
 8000988:	717b      	strb	r3, [r7, #5]
 800098a:	4613      	mov	r3, r2
 800098c:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 800098e:	1dba      	adds	r2, r7, #6
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe92 	bl	80006be <swap_char>
        swap_char(&x2, &y2);
 800099a:	1d3a      	adds	r2, r7, #4
 800099c:	1d7b      	adds	r3, r7, #5
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe8c 	bl	80006be <swap_char>
        y1 = WIDTH - y1;
 80009a6:	79ba      	ldrb	r2, [r7, #6]
 80009a8:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80009ac:	1a9b      	subs	r3, r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 80009b2:	793a      	ldrb	r2, [r7, #4]
 80009b4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 80009be:	1dba      	adds	r2, r7, #6
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe7a 	bl	80006be <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 80009ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 80009d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d2:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 80009d4:	79f8      	ldrb	r0, [r7, #7]
 80009d6:	79b9      	ldrb	r1, [r7, #6]
 80009d8:	797a      	ldrb	r2, [r7, #5]
 80009da:	793b      	ldrb	r3, [r7, #4]
 80009dc:	f000 f834 	bl	8000a48 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009e6:	4817      	ldr	r0, [pc, #92]	@ (8000a44 <fill_rectangle+0xd4>)
 80009e8:	f000 fd8e 	bl	8001508 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e017      	b.n	8000a22 <fill_rectangle+0xb2>
        for(int x = 0; x < x2-x1+1; x++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	e00a      	b.n	8000a0e <fill_rectangle+0x9e>
            lcd_write_data(colour_high);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fdfc 	bl	80005f8 <lcd_write_data>
            lcd_write_data(colour_low);
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fdf8 	bl	80005f8 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	797b      	ldrb	r3, [r7, #5]
 8000a10:	461a      	mov	r2, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dded      	ble.n	80009f8 <fill_rectangle+0x88>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	793b      	ldrb	r3, [r7, #4]
 8000a24:	461a      	mov	r2, r3
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dde0      	ble.n	80009f2 <fill_rectangle+0x82>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a36:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <fill_rectangle+0xd4>)
 8000a38:	f000 fd66 	bl	8001508 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	371c      	adds	r7, #28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	40011000 	.word	0x40011000

08000a48 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4604      	mov	r4, r0
 8000a50:	4608      	mov	r0, r1
 8000a52:	4611      	mov	r1, r2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4623      	mov	r3, r4
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71bb      	strb	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	717b      	strb	r3, [r7, #5]
 8000a62:	4613      	mov	r3, r2
 8000a64:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 8000a66:	797a      	ldrb	r2, [r7, #5]
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d205      	bcs.n	8000a7a <set_draw_window+0x32>
        swap_char(&x2, &x1);
 8000a6e:	1dfa      	adds	r2, r7, #7
 8000a70:	1d7b      	adds	r3, r7, #5
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe22 	bl	80006be <swap_char>
    if(y2 < y1)
 8000a7a:	793a      	ldrb	r2, [r7, #4]
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d205      	bcs.n	8000a8e <set_draw_window+0x46>
        swap_char(&y2, &y1);
 8000a82:	1dba      	adds	r2, r7, #6
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe18 	bl	80006be <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 8000a8e:	797b      	ldrb	r3, [r7, #5]
 8000a90:	4619      	mov	r1, r3
 8000a92:	2036      	movs	r0, #54	@ 0x36
 8000a94:	f7ff fdf4 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2037      	movs	r0, #55	@ 0x37
 8000a9e:	f7ff fdef 	bl	8000680 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 8000aa2:	793b      	ldrb	r3, [r7, #4]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2038      	movs	r0, #56	@ 0x38
 8000aa8:	f7ff fdea 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2039      	movs	r0, #57	@ 0x39
 8000ab2:	f7ff fde5 	bl	8000680 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	2020      	movs	r0, #32
 8000abc:	f7ff fde0 	bl	8000680 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	2021      	movs	r0, #33	@ 0x21
 8000ac6:	f7ff fddb 	bl	8000680 <lcd_write_register>

    lcd_write_command(0x00);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fdb6 	bl	800063c <lcd_write_command>
    lcd_write_command(0x22);
 8000ad0:	2022      	movs	r0, #34	@ 0x22
 8000ad2:	f7ff fdb3 	bl	800063c <lcd_write_command>
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
	...

08000ae0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af4:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a2c      	ldr	r2, [pc, #176]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0c:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a26      	ldr	r2, [pc, #152]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0320 	and.w	r3, r3, #32
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a20      	ldr	r2, [pc, #128]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a1a      	ldr	r2, [pc, #104]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_GPIO_Init+0xcc>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000b5a:	4815      	ldr	r0, [pc, #84]	@ (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b5c:	f000 fcd4 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2103      	movs	r1, #3
 8000b64:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <MX_GPIO_Init+0xd4>)
 8000b66:	f000 fccf 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b6a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b84:	f000 fb3c 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_GPIO_Init+0xd4>)
 8000ba0:	f000 fb2e 	bl	8001200 <HAL_GPIO_Init>

}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40010800 	.word	0x40010800

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 f9d9 	bl	8000f74 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 8000bc2:	f7ff fdc7 	bl	8000754 <lcd_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f817 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f7ff ff89 	bl	8000ae0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bce:	f000 f855 	bl	8000c7c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bd2:	f000 f889 	bl	8000ce8 <MX_SPI2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <main+0x3c>)
 8000bdc:	f000 fcac 	bl	8001538 <HAL_GPIO_TogglePin>
	  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK);
 8000be0:	2300      	movs	r3, #0
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	23b0      	movs	r3, #176	@ 0xb0
 8000be6:	22dc      	movs	r2, #220	@ 0xdc
 8000be8:	2100      	movs	r1, #0
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fec0 	bl	8000970 <fill_rectangle>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bf0:	bf00      	nop
 8000bf2:	e7f0      	b.n	8000bd6 <main+0x1e>
 8000bf4:	40011000 	.word	0x40011000

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	@ 0x40
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	2228      	movs	r2, #40	@ 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fafc 	bl	8002204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c22:	2310      	movs	r3, #16
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fc9c 	bl	800156c <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f818 	bl	8000c6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 ff0a 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f804 	bl	8000c6e <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3740      	adds	r7, #64	@ 0x40
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c72:	b672      	cpsid	i
}
 8000c74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c76:	bf00      	nop
 8000c78:	e7fd      	b.n	8000c76 <Error_Handler+0x8>
	...

08000c7c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c82:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <MX_SPI1_Init+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cce:	f001 f82b 	bl	8001d28 <HAL_SPI_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cd8:	f7ff ffc9 	bl	8000c6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000028 	.word	0x20000028
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	@ (8000d50 <MX_SPI2_Init+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000cf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d34:	220a      	movs	r2, #10
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_SPI2_Init+0x64>)
 8000d3a:	f000 fff5 	bl	8001d28 <HAL_SPI_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d44:	f7ff ff93 	bl	8000c6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000080 	.word	0x20000080
 8000d50:	40003800 	.word	0x40003800

08000d54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a37      	ldr	r2, [pc, #220]	@ (8000e4c <HAL_SPI_MspInit+0xf8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d130      	bne.n	8000dd6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d74:	4b36      	ldr	r3, [pc, #216]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a35      	ldr	r2, [pc, #212]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000d7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b33      	ldr	r3, [pc, #204]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b30      	ldr	r3, [pc, #192]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a2f      	ldr	r2, [pc, #188]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b2d      	ldr	r3, [pc, #180]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000da4:	23a0      	movs	r3, #160	@ 0xa0
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4827      	ldr	r0, [pc, #156]	@ (8000e54 <HAL_SPI_MspInit+0x100>)
 8000db8:	f000 fa22 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dbc:	2340      	movs	r3, #64	@ 0x40
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4821      	ldr	r0, [pc, #132]	@ (8000e54 <HAL_SPI_MspInit+0x100>)
 8000dd0:	f000 fa16 	bl	8001200 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dd4:	e036      	b.n	8000e44 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <HAL_SPI_MspInit+0x104>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d131      	bne.n	8000e44 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	4a1a      	ldr	r2, [pc, #104]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dea:	61d3      	str	r3, [r2, #28]
 8000dec:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_SPI_MspInit+0xfc>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e10:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	4619      	mov	r1, r3
 8000e24:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <HAL_SPI_MspInit+0x108>)
 8000e26:	f000 f9eb 	bl	8001200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <HAL_SPI_MspInit+0x108>)
 8000e40:	f000 f9de 	bl	8001200 <HAL_GPIO_Init>
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	@ 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010800 	.word	0x40010800
 8000e58:	40003800 	.word	0x40003800
 8000e5c:	40010c00 	.word	0x40010c00

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6193      	str	r3, [r2, #24]
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <HAL_MspInit+0x5c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_MspInit+0x60>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_MspInit+0x60>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f874 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f28:	f7ff fff8 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f2e:	490c      	ldr	r1, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f30:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f44:	4c09      	ldr	r4, [pc, #36]	@ (8000f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f001 f95f 	bl	8002214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f56:	f7ff fe2f 	bl	8000bb8 <main>
  bx lr
 8000f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f64:	080022a0 	.word	0x080022a0
  ldr r2, =_sbss
 8000f68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f6c:	200000dc 	.word	0x200000dc

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_Init+0x28>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	@ (8000f9c <HAL_Init+0x28>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f907 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff ff66 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f911 	bl	80011e6 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fdc:	f000 f8e7 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	@ (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HAL_IncTick+0x1c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <HAL_IncTick+0x20>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a03      	ldr	r2, [pc, #12]	@ (8001020 <HAL_IncTick+0x20>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	20000008 	.word	0x20000008
 8001020:	200000d8 	.word	0x200000d8

08001024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b02      	ldr	r3, [pc, #8]	@ (8001034 <HAL_GetTick+0x10>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	200000d8 	.word	0x200000d8

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	@ (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	@ 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001178:	f7ff ff90 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff49 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff5e 	bl	8001080 <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff90 	bl	80010f0 <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5f 	bl	800109c <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b08b      	sub	sp, #44	@ 0x2c
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e169      	b.n	80014e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001214:	2201      	movs	r2, #1
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8158 	bne.w	80014e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a9a      	ldr	r2, [pc, #616]	@ (80014a0 <HAL_GPIO_Init+0x2a0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d05e      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 800123c:	4a98      	ldr	r2, [pc, #608]	@ (80014a0 <HAL_GPIO_Init+0x2a0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d875      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001242:	4a98      	ldr	r2, [pc, #608]	@ (80014a4 <HAL_GPIO_Init+0x2a4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d058      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001248:	4a96      	ldr	r2, [pc, #600]	@ (80014a4 <HAL_GPIO_Init+0x2a4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d86f      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800124e:	4a96      	ldr	r2, [pc, #600]	@ (80014a8 <HAL_GPIO_Init+0x2a8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d052      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001254:	4a94      	ldr	r2, [pc, #592]	@ (80014a8 <HAL_GPIO_Init+0x2a8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d869      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800125a:	4a94      	ldr	r2, [pc, #592]	@ (80014ac <HAL_GPIO_Init+0x2ac>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d04c      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001260:	4a92      	ldr	r2, [pc, #584]	@ (80014ac <HAL_GPIO_Init+0x2ac>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d863      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001266:	4a92      	ldr	r2, [pc, #584]	@ (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d046      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 800126c:	4a90      	ldr	r2, [pc, #576]	@ (80014b0 <HAL_GPIO_Init+0x2b0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d85d      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001272:	2b12      	cmp	r3, #18
 8001274:	d82a      	bhi.n	80012cc <HAL_GPIO_Init+0xcc>
 8001276:	2b12      	cmp	r3, #18
 8001278:	d859      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800127a:	a201      	add	r2, pc, #4	@ (adr r2, 8001280 <HAL_GPIO_Init+0x80>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	080012fb 	.word	0x080012fb
 8001284:	080012d5 	.word	0x080012d5
 8001288:	080012e7 	.word	0x080012e7
 800128c:	08001329 	.word	0x08001329
 8001290:	0800132f 	.word	0x0800132f
 8001294:	0800132f 	.word	0x0800132f
 8001298:	0800132f 	.word	0x0800132f
 800129c:	0800132f 	.word	0x0800132f
 80012a0:	0800132f 	.word	0x0800132f
 80012a4:	0800132f 	.word	0x0800132f
 80012a8:	0800132f 	.word	0x0800132f
 80012ac:	0800132f 	.word	0x0800132f
 80012b0:	0800132f 	.word	0x0800132f
 80012b4:	0800132f 	.word	0x0800132f
 80012b8:	0800132f 	.word	0x0800132f
 80012bc:	0800132f 	.word	0x0800132f
 80012c0:	0800132f 	.word	0x0800132f
 80012c4:	080012dd 	.word	0x080012dd
 80012c8:	080012f1 	.word	0x080012f1
 80012cc:	4a79      	ldr	r2, [pc, #484]	@ (80014b4 <HAL_GPIO_Init+0x2b4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012d2:	e02c      	b.n	800132e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e029      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	3304      	adds	r3, #4
 80012e2:	623b      	str	r3, [r7, #32]
          break;
 80012e4:	e024      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	3308      	adds	r3, #8
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e01f      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	330c      	adds	r3, #12
 80012f6:	623b      	str	r3, [r7, #32]
          break;
 80012f8:	e01a      	b.n	8001330 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001302:	2304      	movs	r3, #4
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e013      	b.n	8001330 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001310:	2308      	movs	r3, #8
 8001312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	611a      	str	r2, [r3, #16]
          break;
 800131a:	e009      	b.n	8001330 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800131c:	2308      	movs	r3, #8
 800131e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	615a      	str	r2, [r3, #20]
          break;
 8001326:	e003      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x130>
          break;
 800132e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2bff      	cmp	r3, #255	@ 0xff
 8001334:	d801      	bhi.n	800133a <HAL_GPIO_Init+0x13a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	e001      	b.n	800133e <HAL_GPIO_Init+0x13e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3304      	adds	r3, #4
 800133e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2bff      	cmp	r3, #255	@ 0xff
 8001344:	d802      	bhi.n	800134c <HAL_GPIO_Init+0x14c>
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x152>
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	3b08      	subs	r3, #8
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	210f      	movs	r1, #15
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	401a      	ands	r2, r3
 8001364:	6a39      	ldr	r1, [r7, #32]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	431a      	orrs	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80b1 	beq.w	80014e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001380:	4b4d      	ldr	r3, [pc, #308]	@ (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a4c      	ldr	r2, [pc, #304]	@ (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <HAL_GPIO_Init+0x2b8>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001398:	4a48      	ldr	r2, [pc, #288]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a40      	ldr	r2, [pc, #256]	@ (80014c0 <HAL_GPIO_Init+0x2c0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d013      	beq.n	80013ec <HAL_GPIO_Init+0x1ec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a3f      	ldr	r2, [pc, #252]	@ (80014c4 <HAL_GPIO_Init+0x2c4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00d      	beq.n	80013e8 <HAL_GPIO_Init+0x1e8>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3e      	ldr	r2, [pc, #248]	@ (80014c8 <HAL_GPIO_Init+0x2c8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d007      	beq.n	80013e4 <HAL_GPIO_Init+0x1e4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3d      	ldr	r2, [pc, #244]	@ (80014cc <HAL_GPIO_Init+0x2cc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_GPIO_Init+0x1e0>
 80013dc:	2303      	movs	r3, #3
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e004      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e002      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013ec:	2300      	movs	r3, #0
 80013ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f0:	f002 0203 	and.w	r2, r2, #3
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	4093      	lsls	r3, r2
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013fe:	492f      	ldr	r1, [pc, #188]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001418:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	492c      	ldr	r1, [pc, #176]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001426:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	4928      	ldr	r1, [pc, #160]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001440:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	4922      	ldr	r1, [pc, #136]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	60cb      	str	r3, [r1, #12]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	491e      	ldr	r1, [pc, #120]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4918      	ldr	r1, [pc, #96]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	43db      	mvns	r3, r3
 800147e:	4914      	ldr	r1, [pc, #80]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001480:	4013      	ands	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d021      	beq.n	80014d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	490e      	ldr	r1, [pc, #56]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e021      	b.n	80014e2 <HAL_GPIO_Init+0x2e2>
 800149e:	bf00      	nop
 80014a0:	10320000 	.word	0x10320000
 80014a4:	10310000 	.word	0x10310000
 80014a8:	10220000 	.word	0x10220000
 80014ac:	10210000 	.word	0x10210000
 80014b0:	10120000 	.word	0x10120000
 80014b4:	10110000 	.word	0x10110000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40011400 	.word	0x40011400
 80014d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_GPIO_Init+0x304>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	43db      	mvns	r3, r3
 80014dc:	4909      	ldr	r1, [pc, #36]	@ (8001504 <HAL_GPIO_Init+0x304>)
 80014de:	4013      	ands	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f47f ae8e 	bne.w	8001214 <HAL_GPIO_Init+0x14>
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	372c      	adds	r7, #44	@ 0x2c
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	611a      	str	r2, [r3, #16]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4013      	ands	r3, r2
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43d9      	mvns	r1, r3
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	400b      	ands	r3, r1
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	611a      	str	r2, [r3, #16]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e272      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8087 	beq.w	800169a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800158c:	4b92      	ldr	r3, [pc, #584]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b04      	cmp	r3, #4
 8001596:	d00c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001598:	4b8f      	ldr	r3, [pc, #572]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d112      	bne.n	80015ca <HAL_RCC_OscConfig+0x5e>
 80015a4:	4b8c      	ldr	r3, [pc, #560]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015b0:	d10b      	bne.n	80015ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b2:	4b89      	ldr	r3, [pc, #548]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d06c      	beq.n	8001698 <HAL_RCC_OscConfig+0x12c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d168      	bne.n	8001698 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e24c      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x76>
 80015d4:	4b80      	ldr	r3, [pc, #512]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a7f      	ldr	r2, [pc, #508]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e02e      	b.n	8001640 <HAL_RCC_OscConfig+0xd4>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x98>
 80015ea:	4b7b      	ldr	r3, [pc, #492]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a7a      	ldr	r2, [pc, #488]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a77      	ldr	r2, [pc, #476]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e01d      	b.n	8001640 <HAL_RCC_OscConfig+0xd4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0xbc>
 800160e:	4b72      	ldr	r3, [pc, #456]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a71      	ldr	r2, [pc, #452]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b6f      	ldr	r3, [pc, #444]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6e      	ldr	r2, [pc, #440]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0xd4>
 8001628:	4b6b      	ldr	r3, [pc, #428]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a6a      	ldr	r2, [pc, #424]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b68      	ldr	r3, [pc, #416]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a67      	ldr	r2, [pc, #412]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800163e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fcec 	bl	8001024 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fce8 	bl	8001024 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	@ 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e200      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b5d      	ldr	r3, [pc, #372]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0xe4>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fcd8 	bl	8001024 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fcd4 	bl	8001024 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	@ 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1ec      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x10c>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d063      	beq.n	800176e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a6:	4b4c      	ldr	r3, [pc, #304]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016b2:	4b49      	ldr	r3, [pc, #292]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d11c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x18c>
 80016be:	4b46      	ldr	r3, [pc, #280]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d116      	bne.n	80016f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	4b43      	ldr	r3, [pc, #268]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x176>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e1c0      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b3d      	ldr	r3, [pc, #244]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4939      	ldr	r1, [pc, #228]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	e03a      	b.n	800176e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001700:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fc8d 	bl	8001024 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff fc89 	bl	8001024 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1a1      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4927      	ldr	r1, [pc, #156]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fc6c 	bl	8001024 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001750:	f7ff fc68 	bl	8001024 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e180      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d03a      	beq.n	80017f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d019      	beq.n	80017b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <HAL_RCC_OscConfig+0x274>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fc4c 	bl	8001024 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fc48 	bl	8001024 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e160      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f000 fa9c 	bl	8001cec <RCC_Delay>
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_RCC_OscConfig+0x274>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fc32 	bl	8001024 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c2:	e00f      	b.n	80017e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fc2e 	bl	8001024 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d908      	bls.n	80017e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e146      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	42420000 	.word	0x42420000
 80017e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	4b92      	ldr	r3, [pc, #584]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e9      	bne.n	80017c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a6 	beq.w	800194a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	4b8b      	ldr	r3, [pc, #556]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b88      	ldr	r3, [pc, #544]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a87      	ldr	r2, [pc, #540]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001818:	61d3      	str	r3, [r2, #28]
 800181a:	4b85      	ldr	r3, [pc, #532]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001826:	2301      	movs	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b82      	ldr	r3, [pc, #520]	@ (8001a34 <HAL_RCC_OscConfig+0x4c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001836:	4b7f      	ldr	r3, [pc, #508]	@ (8001a34 <HAL_RCC_OscConfig+0x4c8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a34 <HAL_RCC_OscConfig+0x4c8>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff fbef 	bl	8001024 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184a:	f7ff fbeb 	bl	8001024 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b64      	cmp	r3, #100	@ 0x64
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e103      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	4b75      	ldr	r3, [pc, #468]	@ (8001a34 <HAL_RCC_OscConfig+0x4c8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x312>
 8001870:	4b6f      	ldr	r3, [pc, #444]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a6e      	ldr	r2, [pc, #440]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	e02d      	b.n	80018da <HAL_RCC_OscConfig+0x36e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x334>
 8001886:	4b6a      	ldr	r3, [pc, #424]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a69      	ldr	r2, [pc, #420]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	4b67      	ldr	r3, [pc, #412]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a66      	ldr	r2, [pc, #408]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	e01c      	b.n	80018da <HAL_RCC_OscConfig+0x36e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d10c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x356>
 80018a8:	4b61      	ldr	r3, [pc, #388]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a60      	ldr	r2, [pc, #384]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6213      	str	r3, [r2, #32]
 80018c0:	e00b      	b.n	80018da <HAL_RCC_OscConfig+0x36e>
 80018c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	4b58      	ldr	r3, [pc, #352]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a57      	ldr	r2, [pc, #348]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d015      	beq.n	800190e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fb9f 	bl	8001024 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff fb9b 	bl	8001024 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0b1      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	4b4b      	ldr	r3, [pc, #300]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ee      	beq.n	80018ea <HAL_RCC_OscConfig+0x37e>
 800190c:	e014      	b.n	8001938 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff fb89 	bl	8001024 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff fb85 	bl	8001024 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e09b      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	4b40      	ldr	r3, [pc, #256]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1ee      	bne.n	8001916 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d105      	bne.n	800194a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a3b      	ldr	r2, [pc, #236]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001948:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8087 	beq.w	8001a62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001954:	4b36      	ldr	r3, [pc, #216]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d061      	beq.n	8001a24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d146      	bne.n	80019f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b33      	ldr	r3, [pc, #204]	@ (8001a38 <HAL_RCC_OscConfig+0x4cc>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff fb59 	bl	8001024 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff fb55 	bl	8001024 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e06d      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001988:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800199c:	d108      	bne.n	80019b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800199e:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4921      	ldr	r1, [pc, #132]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a19      	ldr	r1, [r3, #32]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	430b      	orrs	r3, r1
 80019c2:	491b      	ldr	r1, [pc, #108]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fb29 	bl	8001024 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff fb25 	bl	8001024 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e03d      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x46a>
 80019f4:	e035      	b.n	8001a62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <HAL_RCC_OscConfig+0x4cc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fb12 	bl	8001024 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff fb0e 	bl	8001024 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e026      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x498>
 8001a22:	e01e      	b.n	8001a62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e019      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40007000 	.word	0x40007000
 8001a38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_OscConfig+0x500>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0d0      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b6a      	ldr	r3, [pc, #424]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b67      	ldr	r3, [pc, #412]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4965      	ldr	r1, [pc, #404]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b63      	ldr	r3, [pc, #396]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001acc:	4b59      	ldr	r3, [pc, #356]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a58      	ldr	r2, [pc, #352]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ad6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae4:	4b53      	ldr	r3, [pc, #332]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001aee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b50      	ldr	r3, [pc, #320]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	494d      	ldr	r1, [pc, #308]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d040      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b47      	ldr	r3, [pc, #284]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d115      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e07f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b41      	ldr	r3, [pc, #260]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e073      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06b      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4e:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f023 0203 	bic.w	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4936      	ldr	r1, [pc, #216]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b60:	f7ff fa60 	bl	8001024 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b68:	f7ff fa5c 	bl	8001024 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e053      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 020c 	and.w	r2, r3, #12
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1eb      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b90:	4b27      	ldr	r3, [pc, #156]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d210      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0207 	bic.w	r2, r3, #7
 8001ba6:	4922      	ldr	r1, [pc, #136]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e032      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4916      	ldr	r1, [pc, #88]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bea:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	490e      	ldr	r1, [pc, #56]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bfe:	f000 f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	490a      	ldr	r1, [pc, #40]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	5ccb      	ldrb	r3, [r1, r3]
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <HAL_RCC_ClockConfig+0x1cc>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_RCC_ClockConfig+0x1d0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f9be 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08002274 	.word	0x08002274
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d002      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x30>
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x36>
 8001c72:	e027      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001c76:	613b      	str	r3, [r7, #16]
      break;
 8001c78:	e027      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	0c9b      	lsrs	r3, r3, #18
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d010      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	0c5b      	lsrs	r3, r3, #17
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ca6:	fb03 f202 	mul.w	r2, r3, r2
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e004      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	613b      	str	r3, [r7, #16]
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc6:	613b      	str	r3, [r7, #16]
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	693b      	ldr	r3, [r7, #16]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	007a1200 	.word	0x007a1200
 8001ce0:	08002284 	.word	0x08002284
 8001ce4:	08002294 	.word	0x08002294
 8001ce8:	003d0900 	.word	0x003d0900

08001cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <RCC_Delay+0x34>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <RCC_Delay+0x38>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0a5b      	lsrs	r3, r3, #9
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d08:	bf00      	nop
  }
  while (Delay --);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	60fa      	str	r2, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <RCC_Delay+0x1c>
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000000 	.word	0x20000000
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e076      	b.n	8001e28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d108      	bne.n	8001d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d4a:	d009      	beq.n	8001d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
 8001d52:	e005      	b.n	8001d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe ffea 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de4:	ea42 0103 	orr.w	r1, r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	0c1a      	lsrs	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f002 0204 	and.w	r2, r2, #4
 8001e06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_SPI_Transmit+0x22>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e12d      	b.n	80020ae <HAL_SPI_Transmit+0x27e>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e5a:	f7ff f8e3 	bl	8001024 <HAL_GetTick>
 8001e5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d002      	beq.n	8001e76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e70:	2302      	movs	r3, #2
 8001e72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e74:	e116      	b.n	80020a4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_SPI_Transmit+0x52>
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e86:	e10d      	b.n	80020a4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	88fa      	ldrh	r2, [r7, #6]
 8001ea0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	88fa      	ldrh	r2, [r7, #6]
 8001ea6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ece:	d10f      	bne.n	8001ef0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ede:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001eee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b40      	cmp	r3, #64	@ 0x40
 8001efc:	d007      	beq.n	8001f0e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f16:	d14f      	bne.n	8001fb8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_SPI_Transmit+0xf6>
 8001f20:	8afb      	ldrh	r3, [r7, #22]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d142      	bne.n	8001fac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	881a      	ldrh	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	1c9a      	adds	r2, r3, #2
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f4a:	e02f      	b.n	8001fac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d112      	bne.n	8001f80 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	1c9a      	adds	r2, r3, #2
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f7e:	e015      	b.n	8001fac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f80:	f7ff f850 	bl	8001024 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d803      	bhi.n	8001f98 <HAL_SPI_Transmit+0x168>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f96:	d102      	bne.n	8001f9e <HAL_SPI_Transmit+0x16e>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001faa:	e07b      	b.n	80020a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ca      	bne.n	8001f4c <HAL_SPI_Transmit+0x11c>
 8001fb6:	e050      	b.n	800205a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_SPI_Transmit+0x196>
 8001fc0:	8afb      	ldrh	r3, [r7, #22]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d144      	bne.n	8002050 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fec:	e030      	b.n	8002050 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d113      	bne.n	8002024 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002022:	e015      	b.n	8002050 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002024:	f7fe fffe 	bl	8001024 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d803      	bhi.n	800203c <HAL_SPI_Transmit+0x20c>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800203a:	d102      	bne.n	8002042 <HAL_SPI_Transmit+0x212>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800204e:	e029      	b.n	80020a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1c9      	bne.n	8001fee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f8b2 	bl	80021c8 <SPI_EndRxTxTransaction>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10a      	bne.n	800208e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]
 800209a:	e003      	b.n	80020a4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80020ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020c8:	f7fe ffac 	bl	8001024 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020d8:	f7fe ffa4 	bl	8001024 <HAL_GetTick>
 80020dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020de:	4b39      	ldr	r3, [pc, #228]	@ (80021c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	015b      	lsls	r3, r3, #5
 80020e4:	0d1b      	lsrs	r3, r3, #20
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020ee:	e054      	b.n	800219a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020f6:	d050      	beq.n	800219a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020f8:	f7fe ff94 	bl	8001024 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	429a      	cmp	r2, r3
 8002106:	d902      	bls.n	800210e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d13d      	bne.n	800218a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800211c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002126:	d111      	bne.n	800214c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002130:	d004      	beq.n	800213c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213a:	d107      	bne.n	800214c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800214a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002154:	d10f      	bne.n	8002176 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e017      	b.n	80021ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3b01      	subs	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4013      	ands	r3, r2
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d19b      	bne.n	80020f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000000 	.word	0x20000000

080021c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	2180      	movs	r1, #128	@ 0x80
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f7ff ff6a 	bl	80020b8 <SPI_WaitFlagStateUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ee:	f043 0220 	orr.w	r2, r3, #32
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e000      	b.n	80021fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <memset>:
 8002204:	4603      	mov	r3, r0
 8002206:	4402      	add	r2, r0
 8002208:	4293      	cmp	r3, r2
 800220a:	d100      	bne.n	800220e <memset+0xa>
 800220c:	4770      	bx	lr
 800220e:	f803 1b01 	strb.w	r1, [r3], #1
 8002212:	e7f9      	b.n	8002208 <memset+0x4>

08002214 <__libc_init_array>:
 8002214:	b570      	push	{r4, r5, r6, lr}
 8002216:	2600      	movs	r6, #0
 8002218:	4d0c      	ldr	r5, [pc, #48]	@ (800224c <__libc_init_array+0x38>)
 800221a:	4c0d      	ldr	r4, [pc, #52]	@ (8002250 <__libc_init_array+0x3c>)
 800221c:	1b64      	subs	r4, r4, r5
 800221e:	10a4      	asrs	r4, r4, #2
 8002220:	42a6      	cmp	r6, r4
 8002222:	d109      	bne.n	8002238 <__libc_init_array+0x24>
 8002224:	f000 f81a 	bl	800225c <_init>
 8002228:	2600      	movs	r6, #0
 800222a:	4d0a      	ldr	r5, [pc, #40]	@ (8002254 <__libc_init_array+0x40>)
 800222c:	4c0a      	ldr	r4, [pc, #40]	@ (8002258 <__libc_init_array+0x44>)
 800222e:	1b64      	subs	r4, r4, r5
 8002230:	10a4      	asrs	r4, r4, #2
 8002232:	42a6      	cmp	r6, r4
 8002234:	d105      	bne.n	8002242 <__libc_init_array+0x2e>
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	f855 3b04 	ldr.w	r3, [r5], #4
 800223c:	4798      	blx	r3
 800223e:	3601      	adds	r6, #1
 8002240:	e7ee      	b.n	8002220 <__libc_init_array+0xc>
 8002242:	f855 3b04 	ldr.w	r3, [r5], #4
 8002246:	4798      	blx	r3
 8002248:	3601      	adds	r6, #1
 800224a:	e7f2      	b.n	8002232 <__libc_init_array+0x1e>
 800224c:	08002298 	.word	0x08002298
 8002250:	08002298 	.word	0x08002298
 8002254:	08002298 	.word	0x08002298
 8002258:	0800229c 	.word	0x0800229c

0800225c <_init>:
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	bf00      	nop
 8002260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002262:	bc08      	pop	{r3}
 8002264:	469e      	mov	lr, r3
 8002266:	4770      	bx	lr

08002268 <_fini>:
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	bf00      	nop
 800226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800226e:	bc08      	pop	{r3}
 8002270:	469e      	mov	lr, r3
 8002272:	4770      	bx	lr
