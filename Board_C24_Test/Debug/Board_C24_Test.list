
Board_C24_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  080081c8  080081c8  000091c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087b8  080087b8  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  080087b8  080087b8  000097b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087c0  080087c0  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c0  080087c0  000097c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087c4  080087c4  000097c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080087c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  200001e8  080089b0  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014d4  080089b0  0000a4d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c309  00000000  00000000  0000a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ed  00000000  00000000  0001651a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00018b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087e  00000000  00000000  00019628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019085  00000000  00000000  00019ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d096  00000000  00000000  00032f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008701b  00000000  00000000  0003ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6fdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000406c  00000000  00000000  000c7020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cb08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080081ac 	.word	0x080081ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080081ac 	.word	0x080081ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000bde:	1df9      	adds	r1, r7, #7
 8000be0:	2364      	movs	r3, #100	@ 0x64
 8000be2:	2201      	movs	r2, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <spi_write+0x20>)
 8000be6:	f002 f891 	bl	8002d0c <HAL_SPI_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000204 	.word	0x20000204

08000bf8 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <lcd_write_data+0x3c>)
 8000c0a:	f001 fbb9 	bl	8002380 <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2102      	movs	r1, #2
 8000c12:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <lcd_write_data+0x40>)
 8000c14:	f001 fbb4 	bl	8002380 <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffda 	bl	8000bd4 <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c26:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <lcd_write_data+0x3c>)
 8000c28:	f001 fbaa 	bl	8002380 <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40011000 	.word	0x40011000
 8000c38:	40010800 	.word	0x40010800

08000c3c <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2102      	movs	r1, #2
 8000c4a:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <lcd_write_command+0x3c>)
 8000c4c:	f001 fb98 	bl	8002380 <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c56:	4809      	ldr	r0, [pc, #36]	@ (8000c7c <lcd_write_command+0x40>)
 8000c58:	f001 fb92 	bl	8002380 <HAL_GPIO_WritePin>
    spi_write(data);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffb8 	bl	8000bd4 <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <lcd_write_command+0x40>)
 8000c6c:	f001 fb88 	bl	8002380 <HAL_GPIO_WritePin>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40011000 	.word	0x40011000

08000c80 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffd3 	bl	8000c3c <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffce 	bl	8000c3c <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	0a1b      	lsrs	r3, r3, #8
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffa6 	bl	8000bf8 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffa1 	bl	8000bf8 <lcd_write_data>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	701a      	strb	r2, [r3, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
	...

08000ce8 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	e9c7 0100 	strd	r0, r1, [r7]
    int multiplier = 4;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8000cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cfa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000cfe:	e01c      	b.n	8000d3a <delay_ms+0x52>
        while(counter--);
 8000d00:	bf00      	nop
 8000d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <delay_ms+0x68>)
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	f7ff fa2a 	bl	8000168 <__aeabi_dsub>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	4620      	mov	r0, r4
 8000d26:	4629      	mov	r1, r5
 8000d28:	f7ff fe3e 	bl	80009a8 <__aeabi_dcmpeq>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0e7      	beq.n	8000d02 <delay_ms+0x1a>
        counter = millis;
 8000d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d36:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	1e5a      	subs	r2, r3, #1
 8000d3e:	617a      	str	r2, [r7, #20]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1dd      	bne.n	8000d00 <delay_ms+0x18>
    }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	3ff00000 	.word	0x3ff00000

08000d54 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d5e:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <lcd_init+0x54>)
 8000d60:	f001 fb0e 	bl	8002380 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8000d64:	2200      	movs	r2, #0
 8000d66:	2102      	movs	r1, #2
 8000d68:	4810      	ldr	r0, [pc, #64]	@ (8000dac <lcd_init+0x58>)
 8000d6a:	f001 fb09 	bl	8002380 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	480e      	ldr	r0, [pc, #56]	@ (8000dac <lcd_init+0x58>)
 8000d74:	f001 fb04 	bl	8002380 <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	480b      	ldr	r0, [pc, #44]	@ (8000dac <lcd_init+0x58>)
 8000d7e:	f001 faff 	bl	8002380 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	490a      	ldr	r1, [pc, #40]	@ (8000db0 <lcd_init+0x5c>)
 8000d88:	f7ff ffae 	bl	8000ce8 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4806      	ldr	r0, [pc, #24]	@ (8000dac <lcd_init+0x58>)
 8000d92:	f001 faf5 	bl	8002380 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	4905      	ldr	r1, [pc, #20]	@ (8000db0 <lcd_init+0x5c>)
 8000d9c:	f7ff ffa4 	bl	8000ce8 <delay_ms>
    
    lcd_init_command_list();
 8000da0:	f000 f808 	bl	8000db4 <lcd_init_command_list>
    
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40010800 	.word	0x40010800
 8000db0:	407f4000 	.word	0x407f4000

08000db4 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8000db8:	2100      	movs	r1, #0
 8000dba:	2010      	movs	r0, #16
 8000dbc:	f7ff ff60 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2011      	movs	r0, #17
 8000dc4:	f7ff ff5c 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2012      	movs	r0, #18
 8000dcc:	f7ff ff58 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2013      	movs	r0, #19
 8000dd4:	f7ff ff54 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2014      	movs	r0, #20
 8000ddc:	f7ff ff50 	bl	8000c80 <lcd_write_register>
    
    delay_ms(10);
 8000de0:	f04f 0000 	mov.w	r0, #0
 8000de4:	4960      	ldr	r1, [pc, #384]	@ (8000f68 <lcd_init_command_list+0x1b4>)
 8000de6:	f7ff ff7f 	bl	8000ce8 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 8000dea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000dee:	2011      	movs	r0, #17
 8000df0:	f7ff ff46 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 8000df4:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000df8:	2012      	movs	r0, #18
 8000dfa:	f7ff ff41 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8000dfe:	216f      	movs	r1, #111	@ 0x6f
 8000e00:	2013      	movs	r0, #19
 8000e02:	f7ff ff3d 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8000e06:	f644 115f 	movw	r1, #18783	@ 0x495f
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f7ff ff38 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 8000e10:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000e14:	2010      	movs	r0, #16
 8000e16:	f7ff ff33 	bl	8000c80 <lcd_write_register>
    
    delay_ms(10);
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	4952      	ldr	r1, [pc, #328]	@ (8000f68 <lcd_init_command_list+0x1b4>)
 8000e20:	f7ff ff62 	bl	8000ce8 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 8000e24:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e28:	2011      	movs	r0, #17
 8000e2a:	f7ff ff29 	bl	8000c80 <lcd_write_register>

    delay_ms(50);
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	494e      	ldr	r1, [pc, #312]	@ (8000f6c <lcd_init_command_list+0x1b8>)
 8000e34:	f7ff ff58 	bl	8000ce8 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8000e38:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ff1f 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8000e42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff ff1a 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 8000e4c:	f241 0130 	movw	r1, #4144	@ 0x1030
 8000e50:	2003      	movs	r0, #3
 8000e52:	f7ff ff15 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8000e56:	2100      	movs	r1, #0
 8000e58:	2007      	movs	r0, #7
 8000e5a:	f7ff ff11 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 8000e5e:	f240 2102 	movw	r1, #514	@ 0x202
 8000e62:	2008      	movs	r0, #8
 8000e64:	f7ff ff0c 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8000e68:	2100      	movs	r1, #0
 8000e6a:	200b      	movs	r0, #11
 8000e6c:	f7ff ff08 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8000e70:	2100      	movs	r1, #0
 8000e72:	200c      	movs	r0, #12
 8000e74:	f7ff ff04 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8000e78:	f640 7101 	movw	r1, #3841	@ 0xf01
 8000e7c:	200f      	movs	r0, #15
 8000e7e:	f7ff feff 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8000e82:	2100      	movs	r1, #0
 8000e84:	2015      	movs	r0, #21
 8000e86:	f7ff fefb 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2020      	movs	r0, #32
 8000e8e:	f7ff fef7 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8000e92:	2100      	movs	r1, #0
 8000e94:	2021      	movs	r0, #33	@ 0x21
 8000e96:	f7ff fef3 	bl	8000c80 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2030      	movs	r0, #48	@ 0x30
 8000e9e:	f7ff feef 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8000ea2:	21db      	movs	r1, #219	@ 0xdb
 8000ea4:	2031      	movs	r0, #49	@ 0x31
 8000ea6:	f7ff feeb 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2032      	movs	r0, #50	@ 0x32
 8000eae:	f7ff fee7 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2033      	movs	r0, #51	@ 0x33
 8000eb6:	f7ff fee3 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 8000eba:	21db      	movs	r1, #219	@ 0xdb
 8000ebc:	2034      	movs	r0, #52	@ 0x34
 8000ebe:	f7ff fedf 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2035      	movs	r0, #53	@ 0x35
 8000ec6:	f7ff fedb 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 8000eca:	21af      	movs	r1, #175	@ 0xaf
 8000ecc:	2036      	movs	r0, #54	@ 0x36
 8000ece:	f7ff fed7 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2037      	movs	r0, #55	@ 0x37
 8000ed6:	f7ff fed3 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 8000eda:	21db      	movs	r1, #219	@ 0xdb
 8000edc:	2038      	movs	r0, #56	@ 0x38
 8000ede:	f7ff fecf 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2039      	movs	r0, #57	@ 0x39
 8000ee6:	f7ff fecb 	bl	8000c80 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 8000eea:	2100      	movs	r1, #0
 8000eec:	2050      	movs	r0, #80	@ 0x50
 8000eee:	f7ff fec7 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 8000ef2:	f640 0108 	movw	r1, #2056	@ 0x808
 8000ef6:	2051      	movs	r0, #81	@ 0x51
 8000ef8:	f7ff fec2 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 8000efc:	f640 010a 	movw	r1, #2058	@ 0x80a
 8000f00:	2052      	movs	r0, #82	@ 0x52
 8000f02:	f7ff febd 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8000f06:	210a      	movs	r1, #10
 8000f08:	2053      	movs	r0, #83	@ 0x53
 8000f0a:	f7ff feb9 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 8000f0e:	f640 2108 	movw	r1, #2568	@ 0xa08
 8000f12:	2054      	movs	r0, #84	@ 0x54
 8000f14:	f7ff feb4 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 8000f18:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f1c:	2055      	movs	r0, #85	@ 0x55
 8000f1e:	f7ff feaf 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8000f22:	2100      	movs	r1, #0
 8000f24:	2056      	movs	r0, #86	@ 0x56
 8000f26:	f7ff feab 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 8000f2a:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8000f2e:	2057      	movs	r0, #87	@ 0x57
 8000f30:	f7ff fea6 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8000f34:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000f38:	2058      	movs	r0, #88	@ 0x58
 8000f3a:	f7ff fea1 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8000f3e:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000f42:	2059      	movs	r0, #89	@ 0x59
 8000f44:	f7ff fe9c 	bl	8000c80 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8000f48:	2112      	movs	r1, #18
 8000f4a:	2007      	movs	r0, #7
 8000f4c:	f7ff fe98 	bl	8000c80 <lcd_write_register>

    delay_ms(50); 
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4905      	ldr	r1, [pc, #20]	@ (8000f6c <lcd_init_command_list+0x1b8>)
 8000f56:	f7ff fec7 	bl	8000ce8 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 8000f5a:	f241 0117 	movw	r1, #4119	@ 0x1017
 8000f5e:	2007      	movs	r0, #7
 8000f60:	f7ff fe8e 	bl	8000c80 <lcd_write_register>

    
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40240000 	.word	0x40240000
 8000f6c:	40490000 	.word	0x40490000

08000f70 <fill_rectangle>:
}

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	4603      	mov	r3, r0
 8000f84:	71bb      	strb	r3, [r7, #6]
 8000f86:	460b      	mov	r3, r1
 8000f88:	717b      	strb	r3, [r7, #5]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 8000f8e:	1dba      	adds	r2, r7, #6
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe92 	bl	8000cbe <swap_char>
        swap_char(&x2, &y2);
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	1d7b      	adds	r3, r7, #5
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fe8c 	bl	8000cbe <swap_char>
        y1 = WIDTH - y1;
 8000fa6:	79ba      	ldrb	r2, [r7, #6]
 8000fa8:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 8000fb2:	793a      	ldrb	r2, [r7, #4]
 8000fb4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 8000fbe:	1dba      	adds	r2, r7, #6
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe7a 	bl	8000cbe <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 8000fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 8000fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd2:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8000fd4:	79f8      	ldrb	r0, [r7, #7]
 8000fd6:	79b9      	ldrb	r1, [r7, #6]
 8000fd8:	797a      	ldrb	r2, [r7, #5]
 8000fda:	793b      	ldrb	r3, [r7, #4]
 8000fdc:	f000 f834 	bl	8001048 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	4817      	ldr	r0, [pc, #92]	@ (8001044 <fill_rectangle+0xd4>)
 8000fe8:	f001 f9ca 	bl	8002380 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e017      	b.n	8001022 <fill_rectangle+0xb2>
        for(int x = 0; x < x2-x1+1; x++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e00a      	b.n	800100e <fill_rectangle+0x9e>
            lcd_write_data(colour_high);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fdfc 	bl	8000bf8 <lcd_write_data>
            lcd_write_data(colour_low);
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fdf8 	bl	8000bf8 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	3301      	adds	r3, #1
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	461a      	mov	r2, r3
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	dded      	ble.n	8000ff8 <fill_rectangle+0x88>
    for(int y = 0; y < y2-y1+1 ; y++) {
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	793b      	ldrb	r3, [r7, #4]
 8001024:	461a      	mov	r2, r3
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	429a      	cmp	r2, r3
 800102e:	dde0      	ble.n	8000ff2 <fill_rectangle+0x82>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001036:	4803      	ldr	r0, [pc, #12]	@ (8001044 <fill_rectangle+0xd4>)
 8001038:	f001 f9a2 	bl	8002380 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	40011000 	.word	0x40011000

08001048 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4604      	mov	r4, r0
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4623      	mov	r3, r4
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4603      	mov	r3, r0
 800105c:	71bb      	strb	r3, [r7, #6]
 800105e:	460b      	mov	r3, r1
 8001060:	717b      	strb	r3, [r7, #5]
 8001062:	4613      	mov	r3, r2
 8001064:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 8001066:	797a      	ldrb	r2, [r7, #5]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	429a      	cmp	r2, r3
 800106c:	d205      	bcs.n	800107a <set_draw_window+0x32>
        swap_char(&x2, &x1);
 800106e:	1dfa      	adds	r2, r7, #7
 8001070:	1d7b      	adds	r3, r7, #5
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe22 	bl	8000cbe <swap_char>
    if(y2 < y1)
 800107a:	793a      	ldrb	r2, [r7, #4]
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	429a      	cmp	r2, r3
 8001080:	d205      	bcs.n	800108e <set_draw_window+0x46>
        swap_char(&y2, &y1);
 8001082:	1dba      	adds	r2, r7, #6
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fe18 	bl	8000cbe <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	4619      	mov	r1, r3
 8001092:	2036      	movs	r0, #54	@ 0x36
 8001094:	f7ff fdf4 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4619      	mov	r1, r3
 800109c:	2037      	movs	r0, #55	@ 0x37
 800109e:	f7ff fdef 	bl	8000c80 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 80010a2:	793b      	ldrb	r3, [r7, #4]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2038      	movs	r0, #56	@ 0x38
 80010a8:	f7ff fdea 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	4619      	mov	r1, r3
 80010b0:	2039      	movs	r0, #57	@ 0x39
 80010b2:	f7ff fde5 	bl	8000c80 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4619      	mov	r1, r3
 80010ba:	2020      	movs	r0, #32
 80010bc:	f7ff fde0 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	4619      	mov	r1, r3
 80010c4:	2021      	movs	r0, #33	@ 0x21
 80010c6:	f7ff fddb 	bl	8000c80 <lcd_write_register>

    lcd_write_command(0x00);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fdb6 	bl	8000c3c <lcd_write_command>
    lcd_write_command(0x22);
 80010d0:	2022      	movs	r0, #34	@ 0x22
 80010d2:	f7ff fdb3 	bl	8000c3c <lcd_write_command>
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}
	...

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f000 fe5d 	bl	8001da4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f855 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 f92b 	bl	8001348 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010f2:	f000 f893 	bl	800121c <MX_SPI1_Init>
  MX_SPI2_Init();
 80010f6:	f000 f8c7 	bl	8001288 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80010fa:	f000 f8fb 	bl	80012f4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80010fe:	f002 fb6f 	bl	80037e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOC ,GPIO_PIN_13);
 8001102:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001106:	4822      	ldr	r0, [pc, #136]	@ (8001190 <main+0xb0>)
 8001108:	f001 f952 	bl	80023b0 <HAL_GPIO_TogglePin>
  lcd_init();
 800110c:	f7ff fe22 	bl	8000d54 <lcd_init>
  disk_initialize(SDFatFs.drv);
 8001110:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <main+0xb4>)
 8001112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fc6d 	bl	80039f8 <disk_initialize>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800111e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001122:	481b      	ldr	r0, [pc, #108]	@ (8001190 <main+0xb0>)
 8001124:	f001 f944 	bl	80023b0 <HAL_GPIO_TogglePin>
	  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK);
 8001128:	2300      	movs	r3, #0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	23b0      	movs	r3, #176	@ 0xb0
 800112e:	22dc      	movs	r2, #220	@ 0xdc
 8001130:	2100      	movs	r1, #0
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ff1c 	bl	8000f70 <fill_rectangle>
	  HAL_Delay(50);
 8001138:	2032      	movs	r0, #50	@ 0x32
 800113a:	f000 fe95 	bl	8001e68 <HAL_Delay>
	  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 800113e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	23b0      	movs	r3, #176	@ 0xb0
 8001146:	22dc      	movs	r2, #220	@ 0xdc
 8001148:	2100      	movs	r1, #0
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff ff10 	bl	8000f70 <fill_rectangle>
	  HAL_Delay(50);
 8001150:	2032      	movs	r0, #50	@ 0x32
 8001152:	f000 fe89 	bl	8001e68 <HAL_Delay>
	  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLUE);
 8001156:	231f      	movs	r3, #31
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	23b0      	movs	r3, #176	@ 0xb0
 800115c:	22dc      	movs	r2, #220	@ 0xdc
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ff05 	bl	8000f70 <fill_rectangle>
	  HAL_Delay(50);
 8001166:	2032      	movs	r0, #50	@ 0x32
 8001168:	f000 fe7e 	bl	8001e68 <HAL_Delay>
	  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_GREEN);
 800116c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	23b0      	movs	r3, #176	@ 0xb0
 8001174:	22dc      	movs	r2, #220	@ 0xdc
 8001176:	2100      	movs	r1, #0
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fef9 	bl	8000f70 <fill_rectangle>
	  HAL_Delay(50);
 800117e:	2032      	movs	r0, #50	@ 0x32
 8001180:	f000 fe72 	bl	8001e68 <HAL_Delay>

	  HAL_Delay(50);
 8001184:	2032      	movs	r0, #50	@ 0x32
 8001186:	f000 fe6f 	bl	8001e68 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800118a:	bf00      	nop
 800118c:	e7c7      	b.n	800111e <main+0x3e>
 800118e:	bf00      	nop
 8001190:	40011000 	.word	0x40011000
 8001194:	20000300 	.word	0x20000300

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b090      	sub	sp, #64	@ 0x40
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2228      	movs	r2, #40	@ 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 fc37 	bl	8004a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011be:	2301      	movs	r3, #1
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c2:	2310      	movs	r3, #16
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80011ce:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 f903 	bl	80023e4 <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011e4:	f000 f91c 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e8:	230f      	movs	r3, #15
 80011ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ec:	2302      	movs	r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fb70 	bl	80028e8 <HAL_RCC_ClockConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800120e:	f000 f907 	bl	8001420 <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	3740      	adds	r7, #64	@ 0x40
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001222:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <MX_SPI1_Init+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001228:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800122c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_SPI1_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800124c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001250:	2208      	movs	r2, #8
 8001252:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_SPI1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_SPI1_Init+0x64>)
 8001268:	220a      	movs	r2, #10
 800126a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_SPI1_Init+0x64>)
 800126e:	f001 fcc9 	bl	8002c04 <HAL_SPI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001278:	f000 f8d2 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000204 	.word	0x20000204
 8001284:	40013000 	.word	0x40013000

08001288 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <MX_SPI2_Init+0x64>)
 800128e:	4a18      	ldr	r2, [pc, #96]	@ (80012f0 <MX_SPI2_Init+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <MX_SPI2_Init+0x64>)
 8001294:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001298:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_SPI2_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012d4:	220a      	movs	r2, #10
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	@ (80012ec <MX_SPI2_Init+0x64>)
 80012da:	f001 fc93 	bl	8002c04 <HAL_SPI_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012e4:	f000 f89c 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000025c 	.word	0x2000025c
 80012f0:	40003800 	.word	0x40003800

080012f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <MX_USART1_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_USART1_UART_Init+0x4c>)
 800132c:	f002 f888 	bl	8003440 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001336:	f000 f873 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002b4 	.word	0x200002b4
 8001344:	40013800 	.word	0x40013800

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a2c      	ldr	r2, [pc, #176]	@ (8001414 <MX_GPIO_Init+0xcc>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <MX_GPIO_Init+0xcc>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800137a:	f043 0320 	orr.w	r3, r3, #32
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <MX_GPIO_Init+0xcc>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a20      	ldr	r2, [pc, #128]	@ (8001414 <MX_GPIO_Init+0xcc>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <MX_GPIO_Init+0xcc>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001414 <MX_GPIO_Init+0xcc>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <MX_GPIO_Init+0xcc>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80013c2:	4815      	ldr	r0, [pc, #84]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013c4:	f000 ffdc 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2103      	movs	r1, #3
 80013cc:	4813      	ldr	r0, [pc, #76]	@ (800141c <MX_GPIO_Init+0xd4>)
 80013ce:	f000 ffd7 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80013d2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80013d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	480b      	ldr	r0, [pc, #44]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013ec:	f000 fe44 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013f0:	2303      	movs	r3, #3
 80013f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_GPIO_Init+0xd4>)
 8001408:	f000 fe36 	bl	8002078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	40011000 	.word	0x40011000
 800141c:	40010800 	.word	0x40010800

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <Error_Handler+0x8>

0800142c <Error>:
	DIR dir;  /* Directory object structure (DIR) */
	//Kiem tra dung luong cua the
	DWORD fre_clust, fre_sect, tot_sect;
//-------------------------------------------------- 
static void Error (void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  LD_ON;
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001436:	4802      	ldr	r0, [pc, #8]	@ (8001440 <Error+0x14>)
 8001438:	f000 ffa2 	bl	8002380 <HAL_GPIO_WritePin>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40011000 	.word	0x40011000

08001444 <SPIx_WriteRead>:
//----------------------------------------------- Ham ghi, doc du lieu tren bus SPI
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af02      	add	r7, sp, #8
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi2,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8001452:	f107 020f 	add.w	r2, r7, #15
 8001456:	1df9      	adds	r1, r7, #7
 8001458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	4806      	ldr	r0, [pc, #24]	@ (800147c <SPIx_WriteRead+0x38>)
 8001462:	f001 fd96 	bl	8002f92 <HAL_SPI_TransmitReceive>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SPIx_WriteRead+0x2c>
  {
    Error();
 800146c:	f7ff ffde 	bl	800142c <Error>
  }
  return receivedbyte;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000025c 	.word	0x2000025c

08001480 <SPI_SendByte>:
//----------------------------------------------- Ham truyen 1byte du lieu tren bus SPI
void SPI_SendByte(uint8_t bt)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffd9 	bl	8001444 <SPIx_WriteRead>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <SPI_ReceiveByte>:
//----------------------------------------------- Ham nhan 1byte du lieu tren bus SPI
uint8_t SPI_ReceiveByte(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 80014a0:	20ff      	movs	r0, #255	@ 0xff
 80014a2:	f7ff ffcf 	bl	8001444 <SPIx_WriteRead>
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  return bt;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 80014b8:	20ff      	movs	r0, #255	@ 0xff
 80014ba:	f7ff ffc3 	bl	8001444 <SPIx_WriteRead>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <SPI_wait_ready>:
//-----------------------------------------------
uint8_t SPI_wait_ready(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 80014cc:	f7ff ffe5 	bl	800149a <SPI_ReceiveByte>
 80014d0:	4603      	mov	r3, r0
 80014d2:	717b      	strb	r3, [r7, #5]
    cnt++;
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	3301      	adds	r3, #1
 80014d8:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 80014da:	797b      	ldrb	r3, [r7, #5]
 80014dc:	2bff      	cmp	r3, #255	@ 0xff
 80014de:	d004      	beq.n	80014ea <SPI_wait_ready+0x28>
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d1f0      	bne.n	80014cc <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <SPI_wait_ready+0x36>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <SPI_wait_ready+0x38>
  return res;
 80014f8:	797b      	ldrb	r3, [r7, #5]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <SD_cmd>:
/*
	Cau lenh goi theo format of CMD8 - 48bit - 6bytes
*/
//----------------------------------------------- Goi 1 lenh den 
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
	//Phan biet lenh ACMD hay lenh CMD
	// ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	da0e      	bge.n	8001536 <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800151e:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 8001520:	2100      	movs	r1, #0
 8001522:	2077      	movs	r0, #119	@ 0x77
 8001524:	f7ff ffee 	bl	8001504 <SD_cmd>
 8001528:	4603      	mov	r3, r0
 800152a:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d901      	bls.n	8001536 <SD_cmd+0x32>
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	e049      	b.n	80015ca <SD_cmd+0xc6>
	}
	// Select the card
	SS_SD_DESELECT();
 8001536:	2201      	movs	r2, #1
 8001538:	2108      	movs	r1, #8
 800153a:	4826      	ldr	r0, [pc, #152]	@ (80015d4 <SD_cmd+0xd0>)
 800153c:	f000 ff20 	bl	8002380 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8001540:	f7ff ffab 	bl	800149a <SPI_ReceiveByte>
	SS_SD_SELECT();
 8001544:	2200      	movs	r2, #0
 8001546:	2108      	movs	r1, #8
 8001548:	4822      	ldr	r0, [pc, #136]	@ (80015d4 <SD_cmd+0xd0>)
 800154a:	f000 ff19 	bl	8002380 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 800154e:	f7ff ffa4 	bl	800149a <SPI_ReceiveByte>
	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff93 	bl	8001480 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	0e1b      	lsrs	r3, r3, #24
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff8d 	bl	8001480 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff87 	bl	8001480 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff81 	bl	8001480 <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); // Argument[7..0]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff7c 	bl	8001480 <SPI_SendByte>
	n = 0x01; // Dummy CRC + Stop
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
	//Cyclic Redundancy Check: Ham bam phat sinh kiem thu cho chuoi bit
	if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b40      	cmp	r3, #64	@ 0x40
 8001590:	d101      	bne.n	8001596 <SD_cmd+0x92>
 8001592:	2395      	movs	r3, #149	@ 0x95
 8001594:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b48      	cmp	r3, #72	@ 0x48
 800159a:	d101      	bne.n	80015a0 <SD_cmd+0x9c>
 800159c:	2387      	movs	r3, #135	@ 0x87
 800159e:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);	
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff6c 	bl	8001480 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 80015a8:	230a      	movs	r3, #10
 80015aa:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 80015ac:	f7ff ff75 	bl	800149a <SPI_ReceiveByte>
 80015b0:	4603      	mov	r3, r0
 80015b2:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 80015b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da05      	bge.n	80015c8 <SD_cmd+0xc4>
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3b01      	subs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f1      	bne.n	80015ac <SD_cmd+0xa8>
  return res;
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40010800 	.word	0x40010800

080015d8 <SD_Read_Block>:
  while(Timer1<2) //cho 20mili giay, de on dinh dien ap
    ;
}
//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;
	result=SD_cmd (CMD17, lba); //CMD17 datasheet trang 50 -> 96
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	2051      	movs	r0, #81	@ 0x51
 80015e6:	f7ff ff8d 	bl	8001504 <SD_cmd>
 80015ea:	4603      	mov	r3, r0
 80015ec:	737b      	strb	r3, [r7, #13]
	if (result!=0x00) return 5; //Thoat, neu ket qua tra ve 0x00
 80015ee:	7b7b      	ldrb	r3, [r7, #13]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SD_Read_Block+0x20>
 80015f4:	2305      	movs	r3, #5
 80015f6:	e02f      	b.n	8001658 <SD_Read_Block+0x80>
	  SPI_Release();
 80015f8:	f7ff ff5c 	bl	80014b4 <SPI_Release>
  cnt=0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	81fb      	strh	r3, [r7, #14]
  do{ //We are waiting for the beginning of the block
    result = SPI_ReceiveByte();
 8001600:	f7ff ff4b 	bl	800149a <SPI_ReceiveByte>
 8001604:	4603      	mov	r3, r0
 8001606:	737b      	strb	r3, [r7, #13]
    cnt++;
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	3301      	adds	r3, #1
 800160c:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 800160e:	7b7b      	ldrb	r3, [r7, #13]
 8001610:	2bfe      	cmp	r3, #254	@ 0xfe
 8001612:	d004      	beq.n	800161e <SD_Read_Block+0x46>
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161a:	4293      	cmp	r3, r2
 800161c:	d1f0      	bne.n	8001600 <SD_Read_Block+0x28>
  if (cnt>=0xFFFF) return 5;
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001624:	4293      	cmp	r3, r2
 8001626:	d101      	bne.n	800162c <SD_Read_Block+0x54>
 8001628:	2305      	movs	r3, #5
 800162a:	e015      	b.n	8001658 <SD_Read_Block+0x80>
  for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte(); //get the bytes of the block from the bus to the buffer
 800162c:	2300      	movs	r3, #0
 800162e:	81fb      	strh	r3, [r7, #14]
 8001630:	e009      	b.n	8001646 <SD_Read_Block+0x6e>
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	18d4      	adds	r4, r2, r3
 8001638:	f7ff ff2f 	bl	800149a <SPI_ReceiveByte>
 800163c:	4603      	mov	r3, r0
 800163e:	7023      	strb	r3, [r4, #0]
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	3301      	adds	r3, #1
 8001644:	81fb      	strh	r3, [r7, #14]
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800164c:	d3f1      	bcc.n	8001632 <SD_Read_Block+0x5a>
  SPI_Release(); 
 800164e:	f7ff ff31 	bl	80014b4 <SPI_Release>
  SPI_Release();
 8001652:	f7ff ff2f 	bl	80014b4 <SPI_Release>
  return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bd90      	pop	{r4, r7, pc}

08001660 <SD_Write_Block>:
//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba); //CMD24 Datasheet 51 and 97-98
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	2058      	movs	r0, #88	@ 0x58
 800166e:	f7ff ff49 	bl	8001504 <SD_cmd>
 8001672:	4603      	mov	r3, r0
 8001674:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 6; //Exit if the result is not 0x00
 8001676:	7b7b      	ldrb	r3, [r7, #13]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_Write_Block+0x20>
 800167c:	2306      	movs	r3, #6
 800167e:	e03d      	b.n	80016fc <SD_Write_Block+0x9c>
  SPI_Release();
 8001680:	f7ff ff18 	bl	80014b4 <SPI_Release>
  SPI_SendByte (0xFE); //Beginning of the buffer (Start block token)
 8001684:	20fe      	movs	r0, #254	@ 0xfe
 8001686:	f7ff fefb 	bl	8001480 <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]); //data transfer
 800168a:	2300      	movs	r3, #0
 800168c:	81fb      	strh	r3, [r7, #14]
 800168e:	e009      	b.n	80016a4 <SD_Write_Block+0x44>
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fef1 	bl	8001480 <SPI_SendByte>
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	3301      	adds	r3, #1
 80016a2:	81fb      	strh	r3, [r7, #14]
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016aa:	d3f1      	bcc.n	8001690 <SD_Write_Block+0x30>
  SPI_Release();
 80016ac:	f7ff ff02 	bl	80014b4 <SPI_Release>
  SPI_Release();
 80016b0:	f7ff ff00 	bl	80014b4 <SPI_Release>
  result=SPI_ReceiveByte();
 80016b4:	f7ff fef1 	bl	800149a <SPI_ReceiveByte>
 80016b8:	4603      	mov	r3, r0
 80016ba:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) return 6; //Exit if the result is not 0x05 (Datamount pg 111)
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	f003 0305 	and.w	r3, r3, #5
 80016c2:	2b05      	cmp	r3, #5
 80016c4:	d001      	beq.n	80016ca <SD_Write_Block+0x6a>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e018      	b.n	80016fc <SD_Write_Block+0x9c>
  cnt=0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	81fb      	strh	r3, [r7, #14]
  do { //We are waiting for the end of the BUSY state
    result=SPI_ReceiveByte();
 80016ce:	f7ff fee4 	bl	800149a <SPI_ReceiveByte>
 80016d2:	4603      	mov	r3, r0
 80016d4:	737b      	strb	r3, [r7, #13]
    cnt++;
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	3301      	adds	r3, #1
 80016da:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80016dc:	7b7b      	ldrb	r3, [r7, #13]
 80016de:	2bff      	cmp	r3, #255	@ 0xff
 80016e0:	d004      	beq.n	80016ec <SD_Write_Block+0x8c>
 80016e2:	89fb      	ldrh	r3, [r7, #14]
 80016e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d1f0      	bne.n	80016ce <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) return 6;
 80016ec:	89fb      	ldrh	r3, [r7, #14]
 80016ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <SD_Write_Block+0x9a>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e000      	b.n	80016fc <SD_Write_Block+0x9c>
  return 0;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <sd_ini>:
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b087      	sub	sp, #28
 8001708:	af02      	add	r7, sp, #8
	uint8_t i, cmd;					//Command
  int16_t tmr;						//Virtual timer
  uint32_t temp;					//Bien tam
  LD_OFF;									//Tat led PC13
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001710:	488d      	ldr	r0, [pc, #564]	@ (8001948 <sd_ini+0x244>)
 8001712:	f000 fe35 	bl	8002380 <HAL_GPIO_WritePin>
  sdinfo.type = 0;				//Kieu the
 8001716:	4b8d      	ldr	r3, [pc, #564]	@ (800194c <sd_ini+0x248>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
	//OCR Register
	uint8_t ocr[4];
	temp = hspi2.Init.BaudRatePrescaler;
 800171c:	4b8c      	ldr	r3, [pc, #560]	@ (8001950 <sd_ini+0x24c>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	60bb      	str	r3, [r7, #8]
	//Chia toc do cua SPI thang 156.25 KBPS vi toc doc cua bus APH qua cao nen sd card khong the dong bo
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbps
 8001722:	4b8b      	ldr	r3, [pc, #556]	@ (8001950 <sd_ini+0x24c>)
 8001724:	2230      	movs	r2, #48	@ 0x30
 8001726:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi2);
 8001728:	4889      	ldr	r0, [pc, #548]	@ (8001950 <sd_ini+0x24c>)
 800172a:	f001 fa6b 	bl	8002c04 <HAL_SPI_Init>
	SS_SD_DESELECT();
 800172e:	2201      	movs	r2, #1
 8001730:	2108      	movs	r1, #8
 8001732:	4888      	ldr	r0, [pc, #544]	@ (8001954 <sd_ini+0x250>)
 8001734:	f000 fe24 	bl	8002380 <HAL_GPIO_WritePin>
	for(i=0;i<10;i++) //Can phai doi it nhat 74 xung de dong bo, o day minh set 80
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e004      	b.n	8001748 <sd_ini+0x44>
	SPI_Release();
 800173e:	f7ff feb9 	bl	80014b4 <SPI_Release>
	for(i=0;i<10;i++) //Can phai doi it nhat 74 xung de dong bo, o day minh set 80
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	3301      	adds	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b09      	cmp	r3, #9
 800174c:	d9f7      	bls.n	800173e <sd_ini+0x3a>
	hspi2.Init.BaudRatePrescaler = temp;
 800174e:	4a80      	ldr	r2, [pc, #512]	@ (8001950 <sd_ini+0x24c>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi2);
 8001754:	487e      	ldr	r0, [pc, #504]	@ (8001950 <sd_ini+0x24c>)
 8001756:	f001 fa55 	bl	8002c04 <HAL_SPI_Init>
	SS_SD_SELECT();
 800175a:	2200      	movs	r2, #0
 800175c:	2108      	movs	r1, #8
 800175e:	487d      	ldr	r0, [pc, #500]	@ (8001954 <sd_ini+0x250>)
 8001760:	f000 fe0e 	bl	8002380 <HAL_GPIO_WritePin>
  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8001764:	2100      	movs	r1, #0
 8001766:	2040      	movs	r0, #64	@ 0x40
 8001768:	f7ff fecc 	bl	8001504 <SD_cmd>
 800176c:	4603      	mov	r3, r0
 800176e:	2b01      	cmp	r3, #1
 8001770:	f040 80cf 	bne.w	8001912 <sd_ini+0x20e>
  {
		SPI_Release();
 8001774:	f7ff fe9e 	bl	80014b4 <SPI_Release>
		if (SD_cmd(CMD8, 0x1AA) == 1) // SD version2 (Card returns response without illegal command) Lenh hop le
 8001778:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800177c:	2048      	movs	r0, #72	@ 0x48
 800177e:	f7ff fec1 	bl	8001504 <SD_cmd>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	f040 808c 	bne.w	80018a2 <sd_ini+0x19e>
		{
			for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e00c      	b.n	80017aa <sd_ini+0xa6>
 8001790:	7bfc      	ldrb	r4, [r7, #15]
 8001792:	f7ff fe82 	bl	800149a <SPI_ReceiveByte>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	f104 0310 	add.w	r3, r4, #16
 800179e:	443b      	add	r3, r7
 80017a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	3301      	adds	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d9ef      	bls.n	8001790 <sd_ini+0x8c>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 80017b0:	793b      	ldrb	r3, [r7, #4]
 80017b2:	4619      	mov	r1, r3
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	4618      	mov	r0, r3
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	4603      	mov	r3, r0
 80017c2:	460a      	mov	r2, r1
 80017c4:	4964      	ldr	r1, [pc, #400]	@ (8001958 <sd_ini+0x254>)
 80017c6:	4865      	ldr	r0, [pc, #404]	@ (800195c <sd_ini+0x258>)
 80017c8:	f003 f8c4 	bl	8004954 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80017cc:	4863      	ldr	r0, [pc, #396]	@ (800195c <sd_ini+0x258>)
 80017ce:	f7fe fcbf 	bl	8000150 <strlen>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017da:	4960      	ldr	r1, [pc, #384]	@ (800195c <sd_ini+0x258>)
 80017dc:	4860      	ldr	r0, [pc, #384]	@ (8001960 <sd_ini+0x25c>)
 80017de:	f001 fe7f 	bl	80034e0 <HAL_UART_Transmit>
			// Get trailing return value of R7 resp 
			//Check nguong dien ap hoat dong sd card
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	f040 8096 	bne.w	8001916 <sd_ini+0x212>
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2baa      	cmp	r3, #170	@ 0xaa
 80017ee:	f040 8092 	bne.w	8001916 <sd_ini+0x212>
			{
				  for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 80017f2:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80017f6:	81bb      	strh	r3, [r7, #12]
 80017f8:	e005      	b.n	8001806 <sd_ini+0x102>
 80017fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	81bb      	strh	r3, [r7, #12]
 8001806:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <sd_ini+0x11a>
 800180e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001812:	20e9      	movs	r0, #233	@ 0xe9
 8001814:	f7ff fe76 	bl	8001504 <SD_cmd>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ed      	bne.n	80017fa <sd_ini+0xf6>
						; // Wait for leaving idle state (ACMD41 with HCS bit)
					if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 800181e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d077      	beq.n	8001916 <sd_ini+0x212>
 8001826:	2100      	movs	r1, #0
 8001828:	207a      	movs	r0, #122	@ 0x7a
 800182a:	f7ff fe6b 	bl	8001504 <SD_cmd>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d170      	bne.n	8001916 <sd_ini+0x212>
					for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e00c      	b.n	8001854 <sd_ini+0x150>
 800183a:	7bfc      	ldrb	r4, [r7, #15]
 800183c:	f7ff fe2d 	bl	800149a <SPI_ReceiveByte>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	f104 0310 	add.w	r3, r4, #16
 8001848:	443b      	add	r3, r7
 800184a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	3301      	adds	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d9ef      	bls.n	800183a <sd_ini+0x136>
					sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	4618      	mov	r0, r3
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	79fa      	ldrb	r2, [r7, #7]
 8001866:	9201      	str	r2, [sp, #4]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	4603      	mov	r3, r0
 800186c:	460a      	mov	r2, r1
 800186e:	493a      	ldr	r1, [pc, #232]	@ (8001958 <sd_ini+0x254>)
 8001870:	483a      	ldr	r0, [pc, #232]	@ (800195c <sd_ini+0x258>)
 8001872:	f003 f86f 	bl	8004954 <siprintf>
					HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001876:	4839      	ldr	r0, [pc, #228]	@ (800195c <sd_ini+0x258>)
 8001878:	f7fe fc6a 	bl	8000150 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001884:	4935      	ldr	r1, [pc, #212]	@ (800195c <sd_ini+0x258>)
 8001886:	4836      	ldr	r0, [pc, #216]	@ (8001960 <sd_ini+0x25c>)
 8001888:	f001 fe2a 	bl	80034e0 <HAL_UART_Transmit>
						//Kiem tra neu 8bit OCR dau tien la Low voltage range thi SDv2 (0x04) + CT_BLOCK (0x08)
					sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 800188c:	793b      	ldrb	r3, [r7, #4]
 800188e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <sd_ini+0x196>
 8001896:	220c      	movs	r2, #12
 8001898:	e000      	b.n	800189c <sd_ini+0x198>
 800189a:	2204      	movs	r2, #4
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <sd_ini+0x248>)
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e039      	b.n	8001916 <sd_ini+0x212>
				}
			}
		}
		else //SD version1 or MMC version3 (illegal command) Lenh khong hop le
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 80018a2:	2100      	movs	r1, #0
 80018a4:	20e9      	movs	r0, #233	@ 0xe9
 80018a6:	f7ff fe2d 	bl	8001504 <SD_cmd>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d805      	bhi.n	80018bc <sd_ini+0x1b8>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80018b0:	4b26      	ldr	r3, [pc, #152]	@ (800194c <sd_ini+0x248>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	23e9      	movs	r3, #233	@ 0xe9
 80018b8:	73bb      	strb	r3, [r7, #14]
 80018ba:	e004      	b.n	80018c6 <sd_ini+0x1c2>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <sd_ini+0x248>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	2341      	movs	r3, #65	@ 0x41
 80018c4:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 80018c6:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80018ca:	81bb      	strh	r3, [r7, #12]
 80018cc:	e005      	b.n	80018da <sd_ini+0x1d6>
 80018ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	81bb      	strh	r3, [r7, #12]
 80018da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <sd_ini+0x1ee>
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fe0c 	bl	8001504 <SD_cmd>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ed      	bne.n	80018ce <sd_ini+0x1ca>
			if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 80018f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <sd_ini+0x206>
 80018fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018fe:	2050      	movs	r0, #80	@ 0x50
 8001900:	f7ff fe00 	bl	8001504 <SD_cmd>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <sd_ini+0x212>
			sdinfo.type = 0;
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <sd_ini+0x248>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e001      	b.n	8001916 <sd_ini+0x212>
		}
  }
  else
  {
    return 1;
 8001912:	2301      	movs	r3, #1
 8001914:	e013      	b.n	800193e <sd_ini+0x23a>
  }
  sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <sd_ini+0x248>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4911      	ldr	r1, [pc, #68]	@ (8001964 <sd_ini+0x260>)
 8001920:	480e      	ldr	r0, [pc, #56]	@ (800195c <sd_ini+0x258>)
 8001922:	f003 f817 	bl	8004954 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <sd_ini+0x258>)
 8001928:	f7fe fc12 	bl	8000150 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001934:	4909      	ldr	r1, [pc, #36]	@ (800195c <sd_ini+0x258>)
 8001936:	480a      	ldr	r0, [pc, #40]	@ (8001960 <sd_ini+0x25c>)
 8001938:	f001 fdd2 	bl	80034e0 <HAL_UART_Transmit>
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	40011000 	.word	0x40011000
 800194c:	200002fc 	.word	0x200002fc
 8001950:	2000025c 	.word	0x2000025c
 8001954:	40010800 	.word	0x40010800
 8001958:	080081c8 	.word	0x080081c8
 800195c:	20001330 	.word	0x20001330
 8001960:	200002b4 	.word	0x200002b4
 8001964:	080081ec 	.word	0x080081ec

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_MspInit+0x5c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <HAL_MspInit+0x5c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_MspInit+0x60>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_MspInit+0x60>)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000

080019cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	@ 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a37      	ldr	r2, [pc, #220]	@ (8001ac4 <HAL_SPI_MspInit+0xf8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d130      	bne.n	8001a4e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ec:	4b36      	ldr	r3, [pc, #216]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a35      	ldr	r2, [pc, #212]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 80019f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b33      	ldr	r3, [pc, #204]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b30      	ldr	r3, [pc, #192]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a1c:	23a0      	movs	r3, #160	@ 0xa0
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4827      	ldr	r0, [pc, #156]	@ (8001acc <HAL_SPI_MspInit+0x100>)
 8001a30:	f000 fb22 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a34:	2340      	movs	r3, #64	@ 0x40
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	4619      	mov	r1, r3
 8001a46:	4821      	ldr	r0, [pc, #132]	@ (8001acc <HAL_SPI_MspInit+0x100>)
 8001a48:	f000 fb16 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a4c:	e036      	b.n	8001abc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad0 <HAL_SPI_MspInit+0x104>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d131      	bne.n	8001abc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a62:	61d3      	str	r3, [r2, #28]
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_SPI_MspInit+0xfc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a88:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <HAL_SPI_MspInit+0x108>)
 8001a9e:	f000 faeb 	bl	8002078 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001aa2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <HAL_SPI_MspInit+0x108>)
 8001ab8:	f000 fade 	bl	8002078 <HAL_GPIO_Init>
}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	@ 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013000 	.word	0x40013000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	40003800 	.word	0x40003800
 8001ad4:	40010c00 	.word	0x40010c00

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b64 <HAL_UART_MspInit+0x8c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d131      	bne.n	8001b5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <HAL_UART_MspInit+0x90>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <HAL_UART_MspInit+0x90>)
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <HAL_UART_MspInit+0x90>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_UART_MspInit+0x90>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a14      	ldr	r2, [pc, #80]	@ (8001b68 <HAL_UART_MspInit+0x90>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_UART_MspInit+0x90>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480b      	ldr	r0, [pc, #44]	@ (8001b6c <HAL_UART_MspInit+0x94>)
 8001b3e:	f000 fa9b 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <HAL_UART_MspInit+0x94>)
 8001b58:	f000 fa8e 	bl	8002078 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010800 	.word	0x40010800

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <NMI_Handler+0x4>

08001b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <MemManage_Handler+0x4>

08001b88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc0:	f000 f936 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <_kill>:

int _kill(int pid, int sig)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001be0:	f002 ff6e 	bl	8004ac0 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2216      	movs	r2, #22
 8001be8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_exit>:

void _exit (int status)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bfe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffe7 	bl	8001bd6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <_exit+0x12>

08001c0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00a      	b.n	8001c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1e:	f3af 8000 	nop.w
 8001c22:	4601      	mov	r1, r0
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60ba      	str	r2, [r7, #8]
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf0      	blt.n	8001c1e <_read+0x12>
  }

  return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	e009      	b.n	8001c6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbf1      	blt.n	8001c58 <_write+0x12>
  }
  return len;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_close>:

int _close(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <_isatty>:

int _isatty(int file)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f002 fed6 	bl	8004ac0 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20005000 	.word	0x20005000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	2000136c 	.word	0x2000136c
 8001d48:	200014d8 	.word	0x200014d8

08001d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d58:	f7ff fff8 	bl	8001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d5e:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d60:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a09      	ldr	r2, [pc, #36]	@ (8001d98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d74:	4c09      	ldr	r4, [pc, #36]	@ (8001d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d82:	f002 fea3 	bl	8004acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d86:	f7ff f9ab 	bl	80010e0 <main>
  bx lr
 8001d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d90:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d94:	080087c8 	.word	0x080087c8
  ldr r2, =_sbss
 8001d98:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d9c:	200014d4 	.word	0x200014d4

08001da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC1_2_IRQHandler>
	...

08001da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <HAL_Init+0x28>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a07      	ldr	r2, [pc, #28]	@ (8001dcc <HAL_Init+0x28>)
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f000 f92b 	bl	8002010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dba:	200f      	movs	r0, #15
 8001dbc:	f000 f808 	bl	8001dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc0:	f7ff fdd2 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000

08001dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd8:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_InitTick+0x54>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_InitTick+0x58>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f935 	bl	800205e <HAL_SYSTICK_Config>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00e      	b.n	8001e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d80a      	bhi.n	8001e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e0c:	f000 f90b 	bl	8002026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e10:	4a06      	ldr	r2, [pc, #24]	@ (8001e2c <HAL_InitTick+0x5c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_IncTick+0x1c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a03      	ldr	r2, [pc, #12]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20001370 	.word	0x20001370

08001e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b02      	ldr	r3, [pc, #8]	@ (8001e64 <HAL_GetTick+0x10>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20001370 	.word	0x20001370

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffe0 	bl	8001e54 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	@ (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	@ (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	@ 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fdc:	d301      	bcc.n	8001fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00f      	b.n	8002002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <SysTick_Config+0x40>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fea:	210f      	movs	r1, #15
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ff0:	f7ff ff90 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <SysTick_Config+0x40>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffa:	4b04      	ldr	r3, [pc, #16]	@ (800200c <SysTick_Config+0x40>)
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	e000e010 	.word	0xe000e010

08002010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff49 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002038:	f7ff ff5e 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 800203c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	6978      	ldr	r0, [r7, #20]
 8002044:	f7ff ff90 	bl	8001f68 <NVIC_EncodePriority>
 8002048:	4602      	mov	r2, r0
 800204a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff5f 	bl	8001f14 <__NVIC_SetPriority>
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffb0 	bl	8001fcc <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b08b      	sub	sp, #44	@ 0x2c
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208a:	e169      	b.n	8002360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800208c:	2201      	movs	r2, #1
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f040 8158 	bne.w	800235a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a9a      	ldr	r2, [pc, #616]	@ (8002318 <HAL_GPIO_Init+0x2a0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d05e      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020b4:	4a98      	ldr	r2, [pc, #608]	@ (8002318 <HAL_GPIO_Init+0x2a0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d875      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020ba:	4a98      	ldr	r2, [pc, #608]	@ (800231c <HAL_GPIO_Init+0x2a4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d058      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020c0:	4a96      	ldr	r2, [pc, #600]	@ (800231c <HAL_GPIO_Init+0x2a4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d86f      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020c6:	4a96      	ldr	r2, [pc, #600]	@ (8002320 <HAL_GPIO_Init+0x2a8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d052      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020cc:	4a94      	ldr	r2, [pc, #592]	@ (8002320 <HAL_GPIO_Init+0x2a8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d869      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020d2:	4a94      	ldr	r2, [pc, #592]	@ (8002324 <HAL_GPIO_Init+0x2ac>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04c      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020d8:	4a92      	ldr	r2, [pc, #584]	@ (8002324 <HAL_GPIO_Init+0x2ac>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d863      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020de:	4a92      	ldr	r2, [pc, #584]	@ (8002328 <HAL_GPIO_Init+0x2b0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d046      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
 80020e4:	4a90      	ldr	r2, [pc, #576]	@ (8002328 <HAL_GPIO_Init+0x2b0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d85d      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d82a      	bhi.n	8002144 <HAL_GPIO_Init+0xcc>
 80020ee:	2b12      	cmp	r3, #18
 80020f0:	d859      	bhi.n	80021a6 <HAL_GPIO_Init+0x12e>
 80020f2:	a201      	add	r2, pc, #4	@ (adr r2, 80020f8 <HAL_GPIO_Init+0x80>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002173 	.word	0x08002173
 80020fc:	0800214d 	.word	0x0800214d
 8002100:	0800215f 	.word	0x0800215f
 8002104:	080021a1 	.word	0x080021a1
 8002108:	080021a7 	.word	0x080021a7
 800210c:	080021a7 	.word	0x080021a7
 8002110:	080021a7 	.word	0x080021a7
 8002114:	080021a7 	.word	0x080021a7
 8002118:	080021a7 	.word	0x080021a7
 800211c:	080021a7 	.word	0x080021a7
 8002120:	080021a7 	.word	0x080021a7
 8002124:	080021a7 	.word	0x080021a7
 8002128:	080021a7 	.word	0x080021a7
 800212c:	080021a7 	.word	0x080021a7
 8002130:	080021a7 	.word	0x080021a7
 8002134:	080021a7 	.word	0x080021a7
 8002138:	080021a7 	.word	0x080021a7
 800213c:	08002155 	.word	0x08002155
 8002140:	08002169 	.word	0x08002169
 8002144:	4a79      	ldr	r2, [pc, #484]	@ (800232c <HAL_GPIO_Init+0x2b4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800214a:	e02c      	b.n	80021a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	623b      	str	r3, [r7, #32]
          break;
 8002152:	e029      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	3304      	adds	r3, #4
 800215a:	623b      	str	r3, [r7, #32]
          break;
 800215c:	e024      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	3308      	adds	r3, #8
 8002164:	623b      	str	r3, [r7, #32]
          break;
 8002166:	e01f      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	330c      	adds	r3, #12
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e01a      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800217a:	2304      	movs	r3, #4
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e013      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002188:	2308      	movs	r3, #8
 800218a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	611a      	str	r2, [r3, #16]
          break;
 8002192:	e009      	b.n	80021a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002194:	2308      	movs	r3, #8
 8002196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	615a      	str	r2, [r3, #20]
          break;
 800219e:	e003      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
          break;
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x130>
          break;
 80021a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2bff      	cmp	r3, #255	@ 0xff
 80021ac:	d801      	bhi.n	80021b2 <HAL_GPIO_Init+0x13a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	e001      	b.n	80021b6 <HAL_GPIO_Init+0x13e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2bff      	cmp	r3, #255	@ 0xff
 80021bc:	d802      	bhi.n	80021c4 <HAL_GPIO_Init+0x14c>
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x152>
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	3b08      	subs	r3, #8
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	210f      	movs	r1, #15
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	6a39      	ldr	r1, [r7, #32]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	431a      	orrs	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80b1 	beq.w	800235a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002330 <HAL_GPIO_Init+0x2b8>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002330 <HAL_GPIO_Init+0x2b8>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b4a      	ldr	r3, [pc, #296]	@ (8002330 <HAL_GPIO_Init+0x2b8>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002210:	4a48      	ldr	r2, [pc, #288]	@ (8002334 <HAL_GPIO_Init+0x2bc>)
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a40      	ldr	r2, [pc, #256]	@ (8002338 <HAL_GPIO_Init+0x2c0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d013      	beq.n	8002264 <HAL_GPIO_Init+0x1ec>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3f      	ldr	r2, [pc, #252]	@ (800233c <HAL_GPIO_Init+0x2c4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00d      	beq.n	8002260 <HAL_GPIO_Init+0x1e8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3e      	ldr	r2, [pc, #248]	@ (8002340 <HAL_GPIO_Init+0x2c8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d007      	beq.n	800225c <HAL_GPIO_Init+0x1e4>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3d      	ldr	r2, [pc, #244]	@ (8002344 <HAL_GPIO_Init+0x2cc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_GPIO_Init+0x1e0>
 8002254:	2303      	movs	r3, #3
 8002256:	e006      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002258:	2304      	movs	r3, #4
 800225a:	e004      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 800225c:	2302      	movs	r3, #2
 800225e:	e002      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002264:	2300      	movs	r3, #0
 8002266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002268:	f002 0203 	and.w	r2, r2, #3
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	4093      	lsls	r3, r2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002276:	492f      	ldr	r1, [pc, #188]	@ (8002334 <HAL_GPIO_Init+0x2bc>)
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002290:	4b2d      	ldr	r3, [pc, #180]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	492c      	ldr	r1, [pc, #176]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800229e:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4928      	ldr	r1, [pc, #160]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022b8:	4b23      	ldr	r3, [pc, #140]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4922      	ldr	r1, [pc, #136]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022c6:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	491e      	ldr	r1, [pc, #120]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4918      	ldr	r1, [pc, #96]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ee:	4b16      	ldr	r3, [pc, #88]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4914      	ldr	r1, [pc, #80]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d021      	beq.n	800234c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002308:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	490e      	ldr	r1, [pc, #56]	@ (8002348 <HAL_GPIO_Init+0x2d0>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e021      	b.n	800235a <HAL_GPIO_Init+0x2e2>
 8002316:	bf00      	nop
 8002318:	10320000 	.word	0x10320000
 800231c:	10310000 	.word	0x10310000
 8002320:	10220000 	.word	0x10220000
 8002324:	10210000 	.word	0x10210000
 8002328:	10120000 	.word	0x10120000
 800232c:	10110000 	.word	0x10110000
 8002330:	40021000 	.word	0x40021000
 8002334:	40010000 	.word	0x40010000
 8002338:	40010800 	.word	0x40010800
 800233c:	40010c00 	.word	0x40010c00
 8002340:	40011000 	.word	0x40011000
 8002344:	40011400 	.word	0x40011400
 8002348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_GPIO_Init+0x304>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	43db      	mvns	r3, r3
 8002354:	4909      	ldr	r1, [pc, #36]	@ (800237c <HAL_GPIO_Init+0x304>)
 8002356:	4013      	ands	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	3301      	adds	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f47f ae8e 	bne.w	800208c <HAL_GPIO_Init+0x14>
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	372c      	adds	r7, #44	@ 0x2c
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800239c:	e003      	b.n	80023a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	611a      	str	r2, [r3, #16]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	041a      	lsls	r2, r3, #16
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43d9      	mvns	r1, r3
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	400b      	ands	r3, r1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	611a      	str	r2, [r3, #16]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e272      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8087 	beq.w	8002512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002404:	4b92      	ldr	r3, [pc, #584]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b04      	cmp	r3, #4
 800240e:	d00c      	beq.n	800242a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002410:	4b8f      	ldr	r3, [pc, #572]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d112      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
 800241c:	4b8c      	ldr	r3, [pc, #560]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002428:	d10b      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	4b89      	ldr	r3, [pc, #548]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d06c      	beq.n	8002510 <HAL_RCC_OscConfig+0x12c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d168      	bne.n	8002510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e24c      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x76>
 800244c:	4b80      	ldr	r3, [pc, #512]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a7f      	ldr	r2, [pc, #508]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e02e      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b7b      	ldr	r3, [pc, #492]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7a      	ldr	r2, [pc, #488]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b78      	ldr	r3, [pc, #480]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a77      	ldr	r2, [pc, #476]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0xbc>
 8002486:	4b72      	ldr	r3, [pc, #456]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a71      	ldr	r2, [pc, #452]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6e      	ldr	r2, [pc, #440]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 80024a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b68      	ldr	r3, [pc, #416]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a67      	ldr	r2, [pc, #412]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fcc8 	bl	8001e54 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fcc4 	bl	8001e54 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	@ 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e200      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xe4>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fcb4 	bl	8001e54 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fcb0 	bl	8001e54 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1ec      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x10c>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b4c      	ldr	r3, [pc, #304]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800252a:	4b49      	ldr	r3, [pc, #292]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
 8002536:	4b46      	ldr	r3, [pc, #280]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b43      	ldr	r3, [pc, #268]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1c0      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b3d      	ldr	r3, [pc, #244]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4939      	ldr	r1, [pc, #228]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <HAL_RCC_OscConfig+0x270>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fc69 	bl	8001e54 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff fc65 	bl	8001e54 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1a1      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4927      	ldr	r1, [pc, #156]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <HAL_RCC_OscConfig+0x270>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fc48 	bl	8001e54 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7ff fc44 	bl	8001e54 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e180      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b1d      	ldr	r3, [pc, #116]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d03a      	beq.n	8002668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d019      	beq.n	800262e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <HAL_RCC_OscConfig+0x274>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7ff fc28 	bl	8001e54 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fc24 	bl	8001e54 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e160      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 face 	bl	8002bc8 <RCC_Delay>
 800262c:	e01c      	b.n	8002668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_RCC_OscConfig+0x274>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002634:	f7ff fc0e 	bl	8001e54 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263a:	e00f      	b.n	800265c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7ff fc0a 	bl	8001e54 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d908      	bls.n	800265c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e146      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	42420000 	.word	0x42420000
 8002658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b92      	ldr	r3, [pc, #584]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e9      	bne.n	800263c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a6 	beq.w	80027c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b8b      	ldr	r3, [pc, #556]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b88      	ldr	r3, [pc, #544]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a87      	ldr	r2, [pc, #540]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b85      	ldr	r3, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b82      	ldr	r3, [pc, #520]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a7e      	ldr	r2, [pc, #504]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fbcb 	bl	8001e54 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7ff fbc7 	bl	8001e54 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	@ 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e103      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b75      	ldr	r3, [pc, #468]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x312>
 80026e8:	4b6f      	ldr	r3, [pc, #444]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a6e      	ldr	r2, [pc, #440]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e02d      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x334>
 80026fe:	4b6a      	ldr	r3, [pc, #424]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a69      	ldr	r2, [pc, #420]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	4b67      	ldr	r3, [pc, #412]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a66      	ldr	r2, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	e01c      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x356>
 8002720:	4b61      	ldr	r3, [pc, #388]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a60      	ldr	r2, [pc, #384]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	4b5e      	ldr	r3, [pc, #376]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a5d      	ldr	r2, [pc, #372]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	e00b      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 800273a:	4b5b      	ldr	r3, [pc, #364]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a5a      	ldr	r2, [pc, #360]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	4b58      	ldr	r3, [pc, #352]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a57      	ldr	r2, [pc, #348]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d015      	beq.n	8002786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7ff fb7b 	bl	8001e54 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff fb77 	bl	8001e54 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0b1      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4b4b      	ldr	r3, [pc, #300]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ee      	beq.n	8002762 <HAL_RCC_OscConfig+0x37e>
 8002784:	e014      	b.n	80027b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff fb65 	bl	8001e54 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff fb61 	bl	8001e54 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e09b      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	4b40      	ldr	r3, [pc, #256]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ee      	bne.n	800278e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4b3c      	ldr	r3, [pc, #240]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a3b      	ldr	r2, [pc, #236]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8087 	beq.w	80028da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	4b36      	ldr	r3, [pc, #216]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d061      	beq.n	800289c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d146      	bne.n	800286e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b33      	ldr	r3, [pc, #204]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fb35 	bl	8001e54 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7ff fb31 	bl	8001e54 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e06d      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	4b29      	ldr	r3, [pc, #164]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	4921      	ldr	r1, [pc, #132]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a19      	ldr	r1, [r3, #32]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	430b      	orrs	r3, r1
 800283a:	491b      	ldr	r1, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7ff fb05 	bl	8001e54 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7ff fb01 	bl	8001e54 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e03d      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x46a>
 800286c:	e035      	b.n	80028da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff faee 	bl	8001e54 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7ff faea 	bl	8001e54 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e026      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x498>
 800289a:	e01e      	b.n	80028da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e019      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40007000 	.word	0x40007000
 80028b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCC_OscConfig+0x500>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0d0      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b67      	ldr	r3, [pc, #412]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 0207 	bic.w	r2, r3, #7
 8002912:	4965      	ldr	r1, [pc, #404]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a58      	ldr	r2, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800294e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002966:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d040      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d115      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b41      	ldr	r3, [pc, #260]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e073      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06b      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b39      	ldr	r3, [pc, #228]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4936      	ldr	r1, [pc, #216]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7ff fa3c 	bl	8001e54 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7ff fa38 	bl	8001e54 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e053      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d210      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4922      	ldr	r1, [pc, #136]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f821 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f99a 	bl	8001dd0 <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	0800835c 	.word	0x0800835c
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x30>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aea:	e027      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aee:	613b      	str	r3, [r7, #16]
      break;
 8002af0:	e027      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0c9b      	lsrs	r3, r3, #18
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a17      	ldr	r2, [pc, #92]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0c5b      	lsrs	r3, r3, #17
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	4a11      	ldr	r2, [pc, #68]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1e:	fb03 f202 	mul.w	r2, r3, r2
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e004      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	613b      	str	r3, [r7, #16]
      break;
 8002b3a:	e002      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3e:	613b      	str	r3, [r7, #16]
      break;
 8002b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b42:	693b      	ldr	r3, [r7, #16]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	08008374 	.word	0x08008374
 8002b5c:	08008384 	.word	0x08008384
 8002b60:	003d0900 	.word	0x003d0900

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b02      	ldr	r3, [pc, #8]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	20000000 	.word	0x20000000

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff2 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	0800836c 	.word	0x0800836c

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba4:	f7ff ffde 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	0adb      	lsrs	r3, r3, #11
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	@ (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	0800836c 	.word	0x0800836c

08002bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <RCC_Delay+0x34>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <RCC_Delay+0x38>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0a5b      	lsrs	r3, r3, #9
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002be4:	bf00      	nop
  }
  while (Delay --);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	60fa      	str	r2, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f9      	bne.n	8002be4 <RCC_Delay+0x1c>
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	10624dd3 	.word	0x10624dd3

08002c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e076      	b.n	8002d04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c26:	d009      	beq.n	8002c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe feb8 	bl	80019cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	ea42 0103 	orr.w	r1, r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	0c1a      	lsrs	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f002 0204 	and.w	r2, r2, #4
 8002ce2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_SPI_Transmit+0x22>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e12d      	b.n	8002f8a <HAL_SPI_Transmit+0x27e>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d36:	f7ff f88d 	bl	8001e54 <HAL_GetTick>
 8002d3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d002      	beq.n	8002d52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d50:	e116      	b.n	8002f80 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Transmit+0x52>
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d62:	e10d      	b.n	8002f80 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2203      	movs	r2, #3
 8002d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	88fa      	ldrh	r2, [r7, #6]
 8002d82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002daa:	d10f      	bne.n	8002dcc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd6:	2b40      	cmp	r3, #64	@ 0x40
 8002dd8:	d007      	beq.n	8002dea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002df2:	d14f      	bne.n	8002e94 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_SPI_Transmit+0xf6>
 8002dfc:	8afb      	ldrh	r3, [r7, #22]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d142      	bne.n	8002e88 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	1c9a      	adds	r2, r3, #2
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e26:	e02f      	b.n	8002e88 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d112      	bne.n	8002e5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	1c9a      	adds	r2, r3, #2
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e5a:	e015      	b.n	8002e88 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e5c:	f7fe fffa 	bl	8001e54 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d803      	bhi.n	8002e74 <HAL_SPI_Transmit+0x168>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e72:	d102      	bne.n	8002e7a <HAL_SPI_Transmit+0x16e>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002e86:	e07b      	b.n	8002f80 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ca      	bne.n	8002e28 <HAL_SPI_Transmit+0x11c>
 8002e92:	e050      	b.n	8002f36 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_SPI_Transmit+0x196>
 8002e9c:	8afb      	ldrh	r3, [r7, #22]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d144      	bne.n	8002f2c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	330c      	adds	r3, #12
 8002eac:	7812      	ldrb	r2, [r2, #0]
 8002eae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ec8:	e030      	b.n	8002f2c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d113      	bne.n	8002f00 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	7812      	ldrb	r2, [r2, #0]
 8002ee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002efe:	e015      	b.n	8002f2c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f00:	f7fe ffa8 	bl	8001e54 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d803      	bhi.n	8002f18 <HAL_SPI_Transmit+0x20c>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f16:	d102      	bne.n	8002f1e <HAL_SPI_Transmit+0x212>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002f2a:	e029      	b.n	8002f80 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1c9      	bne.n	8002eca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	6839      	ldr	r1, [r7, #0]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa62 	bl	8003404 <SPI_EndRxTxTransaction>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e003      	b.n	8002f80 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08c      	sub	sp, #48	@ 0x30
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x26>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e198      	b.n	80032ea <HAL_SPI_TransmitReceive+0x358>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc0:	f7fe ff48 	bl	8001e54 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d00f      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x70>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fe8:	d107      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x68>
 8002ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d003      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003000:	e16d      	b.n	80032de <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_SPI_TransmitReceive+0x82>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_TransmitReceive+0x82>
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800301a:	e160      	b.n	80032de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b04      	cmp	r3, #4
 8003026:	d003      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2205      	movs	r2, #5
 800302c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	887a      	ldrh	r2, [r7, #2]
 8003046:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	887a      	ldrh	r2, [r7, #2]
 8003052:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b40      	cmp	r3, #64	@ 0x40
 8003072:	d007      	beq.n	8003084 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800308c:	d17c      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_SPI_TransmitReceive+0x10a>
 8003096:	8b7b      	ldrh	r3, [r7, #26]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d16a      	bne.n	8003172 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	881a      	ldrh	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030c0:	e057      	b.n	8003172 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d11b      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x176>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x176>
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d113      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d119      	bne.n	800314a <HAL_SPI_TransmitReceive+0x1b8>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d014      	beq.n	800314a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	b292      	uxth	r2, r2
 800312c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003132:	1c9a      	adds	r2, r3, #2
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003146:	2301      	movs	r3, #1
 8003148:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800314a:	f7fe fe83 	bl	8001e54 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003156:	429a      	cmp	r2, r3
 8003158:	d80b      	bhi.n	8003172 <HAL_SPI_TransmitReceive+0x1e0>
 800315a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003160:	d007      	beq.n	8003172 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003170:	e0b5      	b.n	80032de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1a2      	bne.n	80030c2 <HAL_SPI_TransmitReceive+0x130>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d19d      	bne.n	80030c2 <HAL_SPI_TransmitReceive+0x130>
 8003186:	e080      	b.n	800328a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_SPI_TransmitReceive+0x204>
 8003190:	8b7b      	ldrh	r3, [r7, #26]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d16f      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	7812      	ldrb	r2, [r2, #0]
 80031a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e05b      	b.n	8003276 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11c      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x274>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d017      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x274>
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d114      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	330c      	adds	r3, #12
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d119      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x2b6>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d014      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003244:	2301      	movs	r3, #1
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003248:	f7fe fe04 	bl	8001e54 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003254:	429a      	cmp	r2, r3
 8003256:	d803      	bhi.n	8003260 <HAL_SPI_TransmitReceive+0x2ce>
 8003258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800325e:	d102      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x2d4>
 8003260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003274:	e033      	b.n	80032de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d19e      	bne.n	80031be <HAL_SPI_TransmitReceive+0x22c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d199      	bne.n	80031be <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f8b8 	bl	8003404 <SPI_EndRxTxTransaction>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80032a6:	e01a      	b.n	80032de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d4:	e003      	b.n	80032de <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80032e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3730      	adds	r7, #48	@ 0x30
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003304:	f7fe fda6 	bl	8001e54 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	4413      	add	r3, r2
 8003312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003314:	f7fe fd9e 	bl	8001e54 <HAL_GetTick>
 8003318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800331a:	4b39      	ldr	r3, [pc, #228]	@ (8003400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	015b      	lsls	r3, r3, #5
 8003320:	0d1b      	lsrs	r3, r3, #20
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	fb02 f303 	mul.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332a:	e054      	b.n	80033d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003332:	d050      	beq.n	80033d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003334:	f7fe fd8e 	bl	8001e54 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	429a      	cmp	r2, r3
 8003342:	d902      	bls.n	800334a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d13d      	bne.n	80033c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003362:	d111      	bne.n	8003388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800336c:	d004      	beq.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003376:	d107      	bne.n	8003388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003390:	d10f      	bne.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e017      	b.n	80033f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d19b      	bne.n	800332c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000

08003404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	@ 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff ff6a 	bl	80032f4 <SPI_WaitFlagStateUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e000      	b.n	8003438 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e042      	b.n	80034d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe fb36 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	@ 0x24
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f91d 	bl	80036c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d16d      	bne.n	80035dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_UART_Transmit+0x2c>
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e066      	b.n	80035de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2221      	movs	r2, #33	@ 0x21
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351e:	f7fe fc99 	bl	8001e54 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003538:	d108      	bne.n	800354c <HAL_UART_Transmit+0x6c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e003      	b.n	8003554 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003554:	e02a      	b.n	80035ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	@ 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f840 	bl	80035e6 <UART_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e036      	b.n	80035de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	3302      	adds	r3, #2
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	e007      	b.n	800359e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	3301      	adds	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1cf      	bne.n	8003556 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	2140      	movs	r1, #64	@ 0x40
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f810 	bl	80035e6 <UART_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e006      	b.n	80035de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b090      	sub	sp, #64	@ 0x40
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4613      	mov	r3, r2
 80035f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f6:	e050      	b.n	800369a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035fe:	d04c      	beq.n	800369a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0x30>
 8003606:	f7fe fc25 	bl	8001e54 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003612:	429a      	cmp	r2, r3
 8003614:	d241      	bcs.n	800369a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800362c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003636:	637a      	str	r2, [r7, #52]	@ 0x34
 8003638:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800363c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3314      	adds	r3, #20
 8003650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	613b      	str	r3, [r7, #16]
   return(result);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3314      	adds	r3, #20
 8003668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800366a:	623a      	str	r2, [r7, #32]
 800366c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	69f9      	ldr	r1, [r7, #28]
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	61bb      	str	r3, [r7, #24]
   return(result);
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e5      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00f      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d09f      	beq.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3740      	adds	r7, #64	@ 0x40
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036fe:	f023 030c 	bic.w	r3, r3, #12
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	430b      	orrs	r3, r1
 800370a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2c      	ldr	r2, [pc, #176]	@ (80037d8 <UART_SetConfig+0x114>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d103      	bne.n	8003734 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800372c:	f7ff fa38 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	e002      	b.n	800373a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003734:	f7ff fa20 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8003738:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009a      	lsls	r2, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	4a22      	ldr	r2, [pc, #136]	@ (80037dc <UART_SetConfig+0x118>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	0119      	lsls	r1, r3, #4
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009a      	lsls	r2, r3, #2
 8003764:	441a      	add	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003770:	4b1a      	ldr	r3, [pc, #104]	@ (80037dc <UART_SetConfig+0x118>)
 8003772:	fba3 0302 	umull	r0, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2064      	movs	r0, #100	@ 0x64
 800377a:	fb00 f303 	mul.w	r3, r0, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	@ 0x32
 8003784:	4a15      	ldr	r2, [pc, #84]	@ (80037dc <UART_SetConfig+0x118>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003790:	4419      	add	r1, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a8:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <UART_SetConfig+0x118>)
 80037aa:	fba3 0302 	umull	r0, r3, r3, r2
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2064      	movs	r0, #100	@ 0x64
 80037b2:	fb00 f303 	mul.w	r3, r0, r3
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	3332      	adds	r3, #50	@ 0x32
 80037bc:	4a07      	ldr	r2, [pc, #28]	@ (80037dc <UART_SetConfig+0x118>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	440a      	add	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40013800 	.word	0x40013800
 80037dc:	51eb851f 	.word	0x51eb851f

080037e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80037e4:	4904      	ldr	r1, [pc, #16]	@ (80037f8 <MX_FATFS_Init+0x18>)
 80037e6:	4805      	ldr	r0, [pc, #20]	@ (80037fc <MX_FATFS_Init+0x1c>)
 80037e8:	f000 f976 	bl	8003ad8 <FATFS_LinkDriver>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b03      	ldr	r3, [pc, #12]	@ (8003800 <MX_FATFS_Init+0x20>)
 80037f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20001378 	.word	0x20001378
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	20001374 	.word	0x20001374

08003804 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
		HAL_UART_Transmit(&huart1,(uint8_t*)"USER_initialize\r\n",17,0x1000);
 800380e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003812:	2211      	movs	r2, #17
 8003814:	490d      	ldr	r1, [pc, #52]	@ (800384c <USER_initialize+0x48>)
 8003816:	480e      	ldr	r0, [pc, #56]	@ (8003850 <USER_initialize+0x4c>)
 8003818:	f7ff fe62 	bl	80034e0 <HAL_UART_Transmit>

		HAL_Delay(2);
 800381c:	2002      	movs	r0, #2
 800381e:	f7fe fb23 	bl	8001e68 <HAL_Delay>
		if(sd_ini()==0) {Stat &= ~STA_NOINIT;} //Reset status STA_NOINIT
 8003822:	f7fd ff6f 	bl	8001704 <sd_ini>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <USER_initialize+0x38>
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <USER_initialize+0x50>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <USER_initialize+0x50>)
 800383a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <USER_initialize+0x50>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	08008348 	.word	0x08008348
 8003850:	200002b4 	.word	0x200002b4
 8003854:	20000009 	.word	0x20000009

08003858 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
		//HAL_UART_Transmit(&huart1,(uint8_t*)"USER_status\r\n",13,0x1000);
		if (pdrv) return STA_NOINIT;
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <USER_status+0x14>
 8003868:	2301      	movs	r3, #1
 800386a:	e002      	b.n	8003872 <USER_status+0x1a>
    return Stat;
 800386c:	4b03      	ldr	r3, [pc, #12]	@ (800387c <USER_status+0x24>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	20000009 	.word	0x20000009

08003880 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//		HAL_UART_Transmit(&huart1,(uint8_t*)"USER_read\r\n",11,0x1000);
//		sprintf(str1,"sector: %lu; count: %d\r\n",sector, count);
//		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
		if (pdrv || !count) return RES_PARERR;
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <USER_read+0x1c>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <USER_read+0x20>
 800389c:	2304      	movs	r3, #4
 800389e:	e023      	b.n	80038e8 <USER_read+0x68>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80038a0:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <USER_read+0x70>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <USER_read+0x32>
 80038ae:	2303      	movs	r3, #3
 80038b0:	e01a      	b.n	80038e8 <USER_read+0x68>
		if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <USER_read+0x74>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <USER_read+0x46>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	025b      	lsls	r3, r3, #9
 80038c4:	607b      	str	r3, [r7, #4]
		if (count == 1) /* Single block read */
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <USER_read+0x58>
		{
			SD_Read_Block(buff,sector); //Consider the block in the buffer
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	68b8      	ldr	r0, [r7, #8]
 80038d0:	f7fd fe82 	bl	80015d8 <SD_Read_Block>
			count = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	603b      	str	r3, [r7, #0]
		}
		else /* Multiple block read */
		{
		}
		SPI_Release();
 80038d8:	f7fd fdec 	bl	80014b4 <SPI_Release>
		return count ? RES_ERROR : RES_OK;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000009 	.word	0x20000009
 80038f4:	200002fc 	.word	0x200002fc

080038f8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4603      	mov	r3, r0
 8003906:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//		HAL_UART_Transmit(&huart1,(uint8_t*)"USER_write\r\n",12,0x1000);
//		sprintf(str1,"sector: %lu\r\n",sector);
//		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	  if (pdrv || !count) return RES_PARERR;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <USER_write+0x1c>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <USER_write+0x20>
 8003914:	2304      	movs	r3, #4
 8003916:	e02c      	b.n	8003972 <USER_write+0x7a>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003918:	4b18      	ldr	r3, [pc, #96]	@ (800397c <USER_write+0x84>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <USER_write+0x32>
 8003926:	2303      	movs	r3, #3
 8003928:	e023      	b.n	8003972 <USER_write+0x7a>
		if (Stat & STA_PROTECT) return RES_WRPRT;
 800392a:	4b14      	ldr	r3, [pc, #80]	@ (800397c <USER_write+0x84>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <USER_write+0x44>
 8003938:	2302      	movs	r3, #2
 800393a:	e01a      	b.n	8003972 <USER_write+0x7a>
		if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800393c:	4b10      	ldr	r3, [pc, #64]	@ (8003980 <USER_write+0x88>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <USER_write+0x58>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	025b      	lsls	r3, r3, #9
 800394e:	607b      	str	r3, [r7, #4]
		if (count == 1) /* Single block read */
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <USER_write+0x6a>
		{
			SD_Write_Block((BYTE*)buff,sector); //Consider the block in the buffer
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f7fd fe81 	bl	8001660 <SD_Write_Block>
			count = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
		}
		else /* Multiple block read */
		{
		}
		SPI_Release();
 8003962:	f7fd fda7 	bl	80014b4 <SPI_Release>
		return count ? RES_ERROR : RES_OK;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000009 	.word	0x20000009
 8003980:	200002fc 	.word	0x200002fc

08003984 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	603a      	str	r2, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
 8003990:	460b      	mov	r3, r1
 8003992:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
//		HAL_UART_Transmit(&huart1,(uint8_t*)"USER_ioctl\r\n",12,0x1000);
	//So lenh dang su dung
//		sprintf(str1,"cmd: %d\r\n",cmd);
//		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
		if (pdrv) return RES_PARERR;
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <USER_ioctl+0x1a>
 800399a:	2304      	movs	r3, #4
 800399c:	e026      	b.n	80039ec <USER_ioctl+0x68>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800399e:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <USER_ioctl+0x70>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <USER_ioctl+0x2c>
 80039ac:	2303      	movs	r3, #3
 80039ae:	e01d      	b.n	80039ec <USER_ioctl+0x68>
		res = RES_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
		switch (cmd)
 80039b4:	79bb      	ldrb	r3, [r7, #6]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <USER_ioctl+0x3c>
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d008      	beq.n	80039d0 <USER_ioctl+0x4c>
 80039be:	e00e      	b.n	80039de <USER_ioctl+0x5a>
		{
			case CTRL_SYNC : /* Flush dirty buffer if present */
				//SS_SD_SELECT();
				if (SPI_wait_ready() == 0xFF)
 80039c0:	f7fd fd7f 	bl	80014c2 <SPI_wait_ready>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2bff      	cmp	r3, #255	@ 0xff
 80039c8:	d10c      	bne.n	80039e4 <USER_ioctl+0x60>
				res = RES_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
				break;
 80039ce:	e009      	b.n	80039e4 <USER_ioctl+0x60>
			case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
				*(WORD*)buff = 512;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d6:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
				break;
 80039dc:	e003      	b.n	80039e6 <USER_ioctl+0x62>
			default:
				res = RES_PARERR;
 80039de:	2304      	movs	r3, #4
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e000      	b.n	80039e6 <USER_ioctl+0x62>
				break;
 80039e4:	bf00      	nop
		}
		SPI_Release();
 80039e6:	f7fd fd65 	bl	80014b4 <SPI_Release>
    return res;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000009 	.word	0x20000009

080039f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	4a0d      	ldr	r2, [pc, #52]	@ (8003a40 <disk_initialize+0x48>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d111      	bne.n	8003a34 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	4a0b      	ldr	r2, [pc, #44]	@ (8003a40 <disk_initialize+0x48>)
 8003a14:	2101      	movs	r1, #1
 8003a16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <disk_initialize+0x48>)
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	79fa      	ldrb	r2, [r7, #7]
 8003a26:	4906      	ldr	r1, [pc, #24]	@ (8003a40 <disk_initialize+0x48>)
 8003a28:	440a      	add	r2, r1
 8003a2a:	7a12      	ldrb	r2, [r2, #8]
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4798      	blx	r3
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000137c 	.word	0x2000137c

08003a44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a5c:	7a5b      	ldrb	r3, [r3, #9]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d831      	bhi.n	8003ac8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a66:	7a5b      	ldrb	r3, [r3, #9]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8003a72:	4b18      	ldr	r3, [pc, #96]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a74:	7a5b      	ldrb	r3, [r3, #9]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4a16      	ldr	r2, [pc, #88]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8003a82:	4b14      	ldr	r3, [pc, #80]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a84:	7a5b      	ldrb	r3, [r3, #9]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a8c:	4413      	add	r3, r2
 8003a8e:	79fa      	ldrb	r2, [r7, #7]
 8003a90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003a92:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a94:	7a5b      	ldrb	r3, [r3, #9]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	b2d1      	uxtb	r1, r2
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad4 <FATFS_LinkDriverEx+0x90>)
 8003a9e:	7251      	strb	r1, [r2, #9]
 8003aa0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003aa2:	7dbb      	ldrb	r3, [r7, #22]
 8003aa4:	3330      	adds	r3, #48	@ 0x30
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	223a      	movs	r2, #58	@ 0x3a
 8003ab2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	222f      	movs	r2, #47	@ 0x2f
 8003aba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3303      	adds	r3, #3
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	2000137c 	.word	0x2000137c

08003ad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	6839      	ldr	r1, [r7, #0]
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ffac 	bl	8003a44 <FATFS_LinkDriverEx>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <__cvt>:
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	461d      	mov	r5, r3
 8003afe:	bfbb      	ittet	lt
 8003b00:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003b04:	461d      	movlt	r5, r3
 8003b06:	2300      	movge	r3, #0
 8003b08:	232d      	movlt	r3, #45	@ 0x2d
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	4614      	mov	r4, r2
 8003b0e:	bfb8      	it	lt
 8003b10:	4614      	movlt	r4, r2
 8003b12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003b14:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003b16:	7013      	strb	r3, [r2, #0]
 8003b18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003b1a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003b1e:	f023 0820 	bic.w	r8, r3, #32
 8003b22:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b26:	d005      	beq.n	8003b34 <__cvt+0x3e>
 8003b28:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b2c:	d100      	bne.n	8003b30 <__cvt+0x3a>
 8003b2e:	3601      	adds	r6, #1
 8003b30:	2302      	movs	r3, #2
 8003b32:	e000      	b.n	8003b36 <__cvt+0x40>
 8003b34:	2303      	movs	r3, #3
 8003b36:	aa07      	add	r2, sp, #28
 8003b38:	9204      	str	r2, [sp, #16]
 8003b3a:	aa06      	add	r2, sp, #24
 8003b3c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b40:	e9cd 3600 	strd	r3, r6, [sp]
 8003b44:	4622      	mov	r2, r4
 8003b46:	462b      	mov	r3, r5
 8003b48:	f001 f882 	bl	8004c50 <_dtoa_r>
 8003b4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003b50:	4607      	mov	r7, r0
 8003b52:	d119      	bne.n	8003b88 <__cvt+0x92>
 8003b54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b56:	07db      	lsls	r3, r3, #31
 8003b58:	d50e      	bpl.n	8003b78 <__cvt+0x82>
 8003b5a:	eb00 0906 	add.w	r9, r0, r6
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2300      	movs	r3, #0
 8003b62:	4620      	mov	r0, r4
 8003b64:	4629      	mov	r1, r5
 8003b66:	f7fc ff1f 	bl	80009a8 <__aeabi_dcmpeq>
 8003b6a:	b108      	cbz	r0, 8003b70 <__cvt+0x7a>
 8003b6c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b70:	2230      	movs	r2, #48	@ 0x30
 8003b72:	9b07      	ldr	r3, [sp, #28]
 8003b74:	454b      	cmp	r3, r9
 8003b76:	d31e      	bcc.n	8003bb6 <__cvt+0xc0>
 8003b78:	4638      	mov	r0, r7
 8003b7a:	9b07      	ldr	r3, [sp, #28]
 8003b7c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003b7e:	1bdb      	subs	r3, r3, r7
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	b008      	add	sp, #32
 8003b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b8c:	eb00 0906 	add.w	r9, r0, r6
 8003b90:	d1e5      	bne.n	8003b5e <__cvt+0x68>
 8003b92:	7803      	ldrb	r3, [r0, #0]
 8003b94:	2b30      	cmp	r3, #48	@ 0x30
 8003b96:	d10a      	bne.n	8003bae <__cvt+0xb8>
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	f7fc ff02 	bl	80009a8 <__aeabi_dcmpeq>
 8003ba4:	b918      	cbnz	r0, 8003bae <__cvt+0xb8>
 8003ba6:	f1c6 0601 	rsb	r6, r6, #1
 8003baa:	f8ca 6000 	str.w	r6, [sl]
 8003bae:	f8da 3000 	ldr.w	r3, [sl]
 8003bb2:	4499      	add	r9, r3
 8003bb4:	e7d3      	b.n	8003b5e <__cvt+0x68>
 8003bb6:	1c59      	adds	r1, r3, #1
 8003bb8:	9107      	str	r1, [sp, #28]
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	e7d9      	b.n	8003b72 <__cvt+0x7c>

08003bbe <__exponent>:
 8003bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	bfb6      	itet	lt
 8003bc4:	232d      	movlt	r3, #45	@ 0x2d
 8003bc6:	232b      	movge	r3, #43	@ 0x2b
 8003bc8:	4249      	neglt	r1, r1
 8003bca:	2909      	cmp	r1, #9
 8003bcc:	7002      	strb	r2, [r0, #0]
 8003bce:	7043      	strb	r3, [r0, #1]
 8003bd0:	dd29      	ble.n	8003c26 <__exponent+0x68>
 8003bd2:	f10d 0307 	add.w	r3, sp, #7
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	270a      	movs	r7, #10
 8003bda:	fbb1 f6f7 	udiv	r6, r1, r7
 8003bde:	461a      	mov	r2, r3
 8003be0:	fb07 1416 	mls	r4, r7, r6, r1
 8003be4:	3430      	adds	r4, #48	@ 0x30
 8003be6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003bea:	460c      	mov	r4, r1
 8003bec:	2c63      	cmp	r4, #99	@ 0x63
 8003bee:	4631      	mov	r1, r6
 8003bf0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003bf4:	dcf1      	bgt.n	8003bda <__exponent+0x1c>
 8003bf6:	3130      	adds	r1, #48	@ 0x30
 8003bf8:	1e94      	subs	r4, r2, #2
 8003bfa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003bfe:	4623      	mov	r3, r4
 8003c00:	1c41      	adds	r1, r0, #1
 8003c02:	42ab      	cmp	r3, r5
 8003c04:	d30a      	bcc.n	8003c1c <__exponent+0x5e>
 8003c06:	f10d 0309 	add.w	r3, sp, #9
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	42ac      	cmp	r4, r5
 8003c0e:	bf88      	it	hi
 8003c10:	2300      	movhi	r3, #0
 8003c12:	3302      	adds	r3, #2
 8003c14:	4403      	add	r3, r0
 8003c16:	1a18      	subs	r0, r3, r0
 8003c18:	b003      	add	sp, #12
 8003c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c20:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c24:	e7ed      	b.n	8003c02 <__exponent+0x44>
 8003c26:	2330      	movs	r3, #48	@ 0x30
 8003c28:	3130      	adds	r1, #48	@ 0x30
 8003c2a:	7083      	strb	r3, [r0, #2]
 8003c2c:	70c1      	strb	r1, [r0, #3]
 8003c2e:	1d03      	adds	r3, r0, #4
 8003c30:	e7f1      	b.n	8003c16 <__exponent+0x58>
	...

08003c34 <_printf_float>:
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	b091      	sub	sp, #68	@ 0x44
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003c40:	4616      	mov	r6, r2
 8003c42:	461f      	mov	r7, r3
 8003c44:	4605      	mov	r5, r0
 8003c46:	f000 fef1 	bl	8004a2c <_localeconv_r>
 8003c4a:	6803      	ldr	r3, [r0, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	9308      	str	r3, [sp, #32]
 8003c50:	f7fc fa7e 	bl	8000150 <strlen>
 8003c54:	2300      	movs	r3, #0
 8003c56:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c58:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8003c5e:	3307      	adds	r3, #7
 8003c60:	f023 0307 	bic.w	r3, r3, #7
 8003c64:	f103 0208 	add.w	r2, r3, #8
 8003c68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c6c:	f8d4 b000 	ldr.w	fp, [r4]
 8003c70:	f8c8 2000 	str.w	r2, [r8]
 8003c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003c7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c7e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003c82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8003f00 <_printf_float+0x2cc>)
 8003c90:	f7fc febc 	bl	8000a0c <__aeabi_dcmpun>
 8003c94:	bb70      	cbnz	r0, 8003cf4 <_printf_float+0xc0>
 8003c96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c9e:	4b98      	ldr	r3, [pc, #608]	@ (8003f00 <_printf_float+0x2cc>)
 8003ca0:	f7fc fe96 	bl	80009d0 <__aeabi_dcmple>
 8003ca4:	bb30      	cbnz	r0, 8003cf4 <_printf_float+0xc0>
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4640      	mov	r0, r8
 8003cac:	4649      	mov	r1, r9
 8003cae:	f7fc fe85 	bl	80009bc <__aeabi_dcmplt>
 8003cb2:	b110      	cbz	r0, 8003cba <_printf_float+0x86>
 8003cb4:	232d      	movs	r3, #45	@ 0x2d
 8003cb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cba:	4a92      	ldr	r2, [pc, #584]	@ (8003f04 <_printf_float+0x2d0>)
 8003cbc:	4b92      	ldr	r3, [pc, #584]	@ (8003f08 <_printf_float+0x2d4>)
 8003cbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003cc2:	bf94      	ite	ls
 8003cc4:	4690      	movls	r8, r2
 8003cc6:	4698      	movhi	r8, r3
 8003cc8:	2303      	movs	r3, #3
 8003cca:	f04f 0900 	mov.w	r9, #0
 8003cce:	6123      	str	r3, [r4, #16]
 8003cd0:	f02b 0304 	bic.w	r3, fp, #4
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	4633      	mov	r3, r6
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4628      	mov	r0, r5
 8003cdc:	9700      	str	r7, [sp, #0]
 8003cde:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003ce0:	f000 f9d4 	bl	800408c <_printf_common>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f040 8090 	bne.w	8003e0a <_printf_float+0x1d6>
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cee:	b011      	add	sp, #68	@ 0x44
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	f7fc fe86 	bl	8000a0c <__aeabi_dcmpun>
 8003d00:	b148      	cbz	r0, 8003d16 <_printf_float+0xe2>
 8003d02:	464b      	mov	r3, r9
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfb8      	it	lt
 8003d08:	232d      	movlt	r3, #45	@ 0x2d
 8003d0a:	4a80      	ldr	r2, [pc, #512]	@ (8003f0c <_printf_float+0x2d8>)
 8003d0c:	bfb8      	it	lt
 8003d0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d12:	4b7f      	ldr	r3, [pc, #508]	@ (8003f10 <_printf_float+0x2dc>)
 8003d14:	e7d3      	b.n	8003cbe <_printf_float+0x8a>
 8003d16:	6863      	ldr	r3, [r4, #4]
 8003d18:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	d13f      	bne.n	8003da0 <_printf_float+0x16c>
 8003d20:	2306      	movs	r3, #6
 8003d22:	6063      	str	r3, [r4, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	9206      	str	r2, [sp, #24]
 8003d2e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003d30:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003d34:	aa0d      	add	r2, sp, #52	@ 0x34
 8003d36:	9203      	str	r2, [sp, #12]
 8003d38:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003d3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d40:	6863      	ldr	r3, [r4, #4]
 8003d42:	4642      	mov	r2, r8
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	4628      	mov	r0, r5
 8003d48:	464b      	mov	r3, r9
 8003d4a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003d4c:	f7ff fed3 	bl	8003af6 <__cvt>
 8003d50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003d52:	4680      	mov	r8, r0
 8003d54:	2947      	cmp	r1, #71	@ 0x47
 8003d56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003d58:	d128      	bne.n	8003dac <_printf_float+0x178>
 8003d5a:	1cc8      	adds	r0, r1, #3
 8003d5c:	db02      	blt.n	8003d64 <_printf_float+0x130>
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	4299      	cmp	r1, r3
 8003d62:	dd40      	ble.n	8003de6 <_printf_float+0x1b2>
 8003d64:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d68:	fa5f fa8a 	uxtb.w	sl, sl
 8003d6c:	4652      	mov	r2, sl
 8003d6e:	3901      	subs	r1, #1
 8003d70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003d74:	910d      	str	r1, [sp, #52]	@ 0x34
 8003d76:	f7ff ff22 	bl	8003bbe <__exponent>
 8003d7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d7c:	4681      	mov	r9, r0
 8003d7e:	1813      	adds	r3, r2, r0
 8003d80:	2a01      	cmp	r2, #1
 8003d82:	6123      	str	r3, [r4, #16]
 8003d84:	dc02      	bgt.n	8003d8c <_printf_float+0x158>
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	07d2      	lsls	r2, r2, #31
 8003d8a:	d501      	bpl.n	8003d90 <_printf_float+0x15c>
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d09e      	beq.n	8003cd6 <_printf_float+0xa2>
 8003d98:	232d      	movs	r3, #45	@ 0x2d
 8003d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d9e:	e79a      	b.n	8003cd6 <_printf_float+0xa2>
 8003da0:	2947      	cmp	r1, #71	@ 0x47
 8003da2:	d1bf      	bne.n	8003d24 <_printf_float+0xf0>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1bd      	bne.n	8003d24 <_printf_float+0xf0>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e7ba      	b.n	8003d22 <_printf_float+0xee>
 8003dac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003db0:	d9dc      	bls.n	8003d6c <_printf_float+0x138>
 8003db2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003db6:	d118      	bne.n	8003dea <_printf_float+0x1b6>
 8003db8:	2900      	cmp	r1, #0
 8003dba:	6863      	ldr	r3, [r4, #4]
 8003dbc:	dd0b      	ble.n	8003dd6 <_printf_float+0x1a2>
 8003dbe:	6121      	str	r1, [r4, #16]
 8003dc0:	b913      	cbnz	r3, 8003dc8 <_printf_float+0x194>
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	07d0      	lsls	r0, r2, #31
 8003dc6:	d502      	bpl.n	8003dce <_printf_float+0x19a>
 8003dc8:	3301      	adds	r3, #1
 8003dca:	440b      	add	r3, r1
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	f04f 0900 	mov.w	r9, #0
 8003dd2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003dd4:	e7dc      	b.n	8003d90 <_printf_float+0x15c>
 8003dd6:	b913      	cbnz	r3, 8003dde <_printf_float+0x1aa>
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	07d2      	lsls	r2, r2, #31
 8003ddc:	d501      	bpl.n	8003de2 <_printf_float+0x1ae>
 8003dde:	3302      	adds	r3, #2
 8003de0:	e7f4      	b.n	8003dcc <_printf_float+0x198>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e7f2      	b.n	8003dcc <_printf_float+0x198>
 8003de6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003dec:	4299      	cmp	r1, r3
 8003dee:	db05      	blt.n	8003dfc <_printf_float+0x1c8>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	6121      	str	r1, [r4, #16]
 8003df4:	07d8      	lsls	r0, r3, #31
 8003df6:	d5ea      	bpl.n	8003dce <_printf_float+0x19a>
 8003df8:	1c4b      	adds	r3, r1, #1
 8003dfa:	e7e7      	b.n	8003dcc <_printf_float+0x198>
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	bfcc      	ite	gt
 8003e00:	2201      	movgt	r2, #1
 8003e02:	f1c1 0202 	rsble	r2, r1, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	e7e0      	b.n	8003dcc <_printf_float+0x198>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	055a      	lsls	r2, r3, #21
 8003e0e:	d407      	bmi.n	8003e20 <_printf_float+0x1ec>
 8003e10:	6923      	ldr	r3, [r4, #16]
 8003e12:	4642      	mov	r2, r8
 8003e14:	4631      	mov	r1, r6
 8003e16:	4628      	mov	r0, r5
 8003e18:	47b8      	blx	r7
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d12b      	bne.n	8003e76 <_printf_float+0x242>
 8003e1e:	e764      	b.n	8003cea <_printf_float+0xb6>
 8003e20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e24:	f240 80dc 	bls.w	8003fe0 <_printf_float+0x3ac>
 8003e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f7fc fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d033      	beq.n	8003ea0 <_printf_float+0x26c>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4631      	mov	r1, r6
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	4a35      	ldr	r2, [pc, #212]	@ (8003f14 <_printf_float+0x2e0>)
 8003e40:	47b8      	blx	r7
 8003e42:	3001      	adds	r0, #1
 8003e44:	f43f af51 	beq.w	8003cea <_printf_float+0xb6>
 8003e48:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003e4c:	4543      	cmp	r3, r8
 8003e4e:	db02      	blt.n	8003e56 <_printf_float+0x222>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	07d8      	lsls	r0, r3, #31
 8003e54:	d50f      	bpl.n	8003e76 <_printf_float+0x242>
 8003e56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	f43f af42 	beq.w	8003cea <_printf_float+0xb6>
 8003e66:	f04f 0900 	mov.w	r9, #0
 8003e6a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003e6e:	f104 0a1a 	add.w	sl, r4, #26
 8003e72:	45c8      	cmp	r8, r9
 8003e74:	dc09      	bgt.n	8003e8a <_printf_float+0x256>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	079b      	lsls	r3, r3, #30
 8003e7a:	f100 8102 	bmi.w	8004082 <_printf_float+0x44e>
 8003e7e:	68e0      	ldr	r0, [r4, #12]
 8003e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e82:	4298      	cmp	r0, r3
 8003e84:	bfb8      	it	lt
 8003e86:	4618      	movlt	r0, r3
 8003e88:	e731      	b.n	8003cee <_printf_float+0xba>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	4652      	mov	r2, sl
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4628      	mov	r0, r5
 8003e92:	47b8      	blx	r7
 8003e94:	3001      	adds	r0, #1
 8003e96:	f43f af28 	beq.w	8003cea <_printf_float+0xb6>
 8003e9a:	f109 0901 	add.w	r9, r9, #1
 8003e9e:	e7e8      	b.n	8003e72 <_printf_float+0x23e>
 8003ea0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	dc38      	bgt.n	8003f18 <_printf_float+0x2e4>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4628      	mov	r0, r5
 8003eac:	4a19      	ldr	r2, [pc, #100]	@ (8003f14 <_printf_float+0x2e0>)
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f43f af1a 	beq.w	8003cea <_printf_float+0xb6>
 8003eb6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003eba:	ea59 0303 	orrs.w	r3, r9, r3
 8003ebe:	d102      	bne.n	8003ec6 <_printf_float+0x292>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	07d9      	lsls	r1, r3, #31
 8003ec4:	d5d7      	bpl.n	8003e76 <_printf_float+0x242>
 8003ec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003eca:	4631      	mov	r1, r6
 8003ecc:	4628      	mov	r0, r5
 8003ece:	47b8      	blx	r7
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	f43f af0a 	beq.w	8003cea <_printf_float+0xb6>
 8003ed6:	f04f 0a00 	mov.w	sl, #0
 8003eda:	f104 0b1a 	add.w	fp, r4, #26
 8003ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ee0:	425b      	negs	r3, r3
 8003ee2:	4553      	cmp	r3, sl
 8003ee4:	dc01      	bgt.n	8003eea <_printf_float+0x2b6>
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	e793      	b.n	8003e12 <_printf_float+0x1de>
 8003eea:	2301      	movs	r3, #1
 8003eec:	465a      	mov	r2, fp
 8003eee:	4631      	mov	r1, r6
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	47b8      	blx	r7
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	f43f aef8 	beq.w	8003cea <_printf_float+0xb6>
 8003efa:	f10a 0a01 	add.w	sl, sl, #1
 8003efe:	e7ee      	b.n	8003ede <_printf_float+0x2aa>
 8003f00:	7fefffff 	.word	0x7fefffff
 8003f04:	08008386 	.word	0x08008386
 8003f08:	0800838a 	.word	0x0800838a
 8003f0c:	0800838e 	.word	0x0800838e
 8003f10:	08008392 	.word	0x08008392
 8003f14:	08008396 	.word	0x08008396
 8003f18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f1a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f1e:	4553      	cmp	r3, sl
 8003f20:	bfa8      	it	ge
 8003f22:	4653      	movge	r3, sl
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	4699      	mov	r9, r3
 8003f28:	dc36      	bgt.n	8003f98 <_printf_float+0x364>
 8003f2a:	f04f 0b00 	mov.w	fp, #0
 8003f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f32:	f104 021a 	add.w	r2, r4, #26
 8003f36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f38:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f3a:	eba3 0309 	sub.w	r3, r3, r9
 8003f3e:	455b      	cmp	r3, fp
 8003f40:	dc31      	bgt.n	8003fa6 <_printf_float+0x372>
 8003f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f44:	459a      	cmp	sl, r3
 8003f46:	dc3a      	bgt.n	8003fbe <_printf_float+0x38a>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	07da      	lsls	r2, r3, #31
 8003f4c:	d437      	bmi.n	8003fbe <_printf_float+0x38a>
 8003f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f50:	ebaa 0903 	sub.w	r9, sl, r3
 8003f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f56:	ebaa 0303 	sub.w	r3, sl, r3
 8003f5a:	4599      	cmp	r9, r3
 8003f5c:	bfa8      	it	ge
 8003f5e:	4699      	movge	r9, r3
 8003f60:	f1b9 0f00 	cmp.w	r9, #0
 8003f64:	dc33      	bgt.n	8003fce <_printf_float+0x39a>
 8003f66:	f04f 0800 	mov.w	r8, #0
 8003f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f6e:	f104 0b1a 	add.w	fp, r4, #26
 8003f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f74:	ebaa 0303 	sub.w	r3, sl, r3
 8003f78:	eba3 0309 	sub.w	r3, r3, r9
 8003f7c:	4543      	cmp	r3, r8
 8003f7e:	f77f af7a 	ble.w	8003e76 <_printf_float+0x242>
 8003f82:	2301      	movs	r3, #1
 8003f84:	465a      	mov	r2, fp
 8003f86:	4631      	mov	r1, r6
 8003f88:	4628      	mov	r0, r5
 8003f8a:	47b8      	blx	r7
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	f43f aeac 	beq.w	8003cea <_printf_float+0xb6>
 8003f92:	f108 0801 	add.w	r8, r8, #1
 8003f96:	e7ec      	b.n	8003f72 <_printf_float+0x33e>
 8003f98:	4642      	mov	r2, r8
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	47b8      	blx	r7
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d1c2      	bne.n	8003f2a <_printf_float+0x2f6>
 8003fa4:	e6a1      	b.n	8003cea <_printf_float+0xb6>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4631      	mov	r1, r6
 8003faa:	4628      	mov	r0, r5
 8003fac:	920a      	str	r2, [sp, #40]	@ 0x28
 8003fae:	47b8      	blx	r7
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	f43f ae9a 	beq.w	8003cea <_printf_float+0xb6>
 8003fb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003fb8:	f10b 0b01 	add.w	fp, fp, #1
 8003fbc:	e7bb      	b.n	8003f36 <_printf_float+0x302>
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b8      	blx	r7
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d1c0      	bne.n	8003f4e <_printf_float+0x31a>
 8003fcc:	e68d      	b.n	8003cea <_printf_float+0xb6>
 8003fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	4442      	add	r2, r8
 8003fd8:	47b8      	blx	r7
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d1c3      	bne.n	8003f66 <_printf_float+0x332>
 8003fde:	e684      	b.n	8003cea <_printf_float+0xb6>
 8003fe0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003fe4:	f1ba 0f01 	cmp.w	sl, #1
 8003fe8:	dc01      	bgt.n	8003fee <_printf_float+0x3ba>
 8003fea:	07db      	lsls	r3, r3, #31
 8003fec:	d536      	bpl.n	800405c <_printf_float+0x428>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	47b8      	blx	r7
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	f43f ae76 	beq.w	8003cea <_printf_float+0xb6>
 8003ffe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004002:	4631      	mov	r1, r6
 8004004:	4628      	mov	r0, r5
 8004006:	47b8      	blx	r7
 8004008:	3001      	adds	r0, #1
 800400a:	f43f ae6e 	beq.w	8003cea <_printf_float+0xb6>
 800400e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004012:	2200      	movs	r2, #0
 8004014:	2300      	movs	r3, #0
 8004016:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800401a:	f7fc fcc5 	bl	80009a8 <__aeabi_dcmpeq>
 800401e:	b9c0      	cbnz	r0, 8004052 <_printf_float+0x41e>
 8004020:	4653      	mov	r3, sl
 8004022:	f108 0201 	add.w	r2, r8, #1
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	47b8      	blx	r7
 800402c:	3001      	adds	r0, #1
 800402e:	d10c      	bne.n	800404a <_printf_float+0x416>
 8004030:	e65b      	b.n	8003cea <_printf_float+0xb6>
 8004032:	2301      	movs	r3, #1
 8004034:	465a      	mov	r2, fp
 8004036:	4631      	mov	r1, r6
 8004038:	4628      	mov	r0, r5
 800403a:	47b8      	blx	r7
 800403c:	3001      	adds	r0, #1
 800403e:	f43f ae54 	beq.w	8003cea <_printf_float+0xb6>
 8004042:	f108 0801 	add.w	r8, r8, #1
 8004046:	45d0      	cmp	r8, sl
 8004048:	dbf3      	blt.n	8004032 <_printf_float+0x3fe>
 800404a:	464b      	mov	r3, r9
 800404c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004050:	e6e0      	b.n	8003e14 <_printf_float+0x1e0>
 8004052:	f04f 0800 	mov.w	r8, #0
 8004056:	f104 0b1a 	add.w	fp, r4, #26
 800405a:	e7f4      	b.n	8004046 <_printf_float+0x412>
 800405c:	2301      	movs	r3, #1
 800405e:	4642      	mov	r2, r8
 8004060:	e7e1      	b.n	8004026 <_printf_float+0x3f2>
 8004062:	2301      	movs	r3, #1
 8004064:	464a      	mov	r2, r9
 8004066:	4631      	mov	r1, r6
 8004068:	4628      	mov	r0, r5
 800406a:	47b8      	blx	r7
 800406c:	3001      	adds	r0, #1
 800406e:	f43f ae3c 	beq.w	8003cea <_printf_float+0xb6>
 8004072:	f108 0801 	add.w	r8, r8, #1
 8004076:	68e3      	ldr	r3, [r4, #12]
 8004078:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800407a:	1a5b      	subs	r3, r3, r1
 800407c:	4543      	cmp	r3, r8
 800407e:	dcf0      	bgt.n	8004062 <_printf_float+0x42e>
 8004080:	e6fd      	b.n	8003e7e <_printf_float+0x24a>
 8004082:	f04f 0800 	mov.w	r8, #0
 8004086:	f104 0919 	add.w	r9, r4, #25
 800408a:	e7f4      	b.n	8004076 <_printf_float+0x442>

0800408c <_printf_common>:
 800408c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	4616      	mov	r6, r2
 8004092:	4698      	mov	r8, r3
 8004094:	688a      	ldr	r2, [r1, #8]
 8004096:	690b      	ldr	r3, [r1, #16]
 8004098:	4607      	mov	r7, r0
 800409a:	4293      	cmp	r3, r2
 800409c:	bfb8      	it	lt
 800409e:	4613      	movlt	r3, r2
 80040a0:	6033      	str	r3, [r6, #0]
 80040a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040a6:	460c      	mov	r4, r1
 80040a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040ac:	b10a      	cbz	r2, 80040b2 <_printf_common+0x26>
 80040ae:	3301      	adds	r3, #1
 80040b0:	6033      	str	r3, [r6, #0]
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	0699      	lsls	r1, r3, #26
 80040b6:	bf42      	ittt	mi
 80040b8:	6833      	ldrmi	r3, [r6, #0]
 80040ba:	3302      	addmi	r3, #2
 80040bc:	6033      	strmi	r3, [r6, #0]
 80040be:	6825      	ldr	r5, [r4, #0]
 80040c0:	f015 0506 	ands.w	r5, r5, #6
 80040c4:	d106      	bne.n	80040d4 <_printf_common+0x48>
 80040c6:	f104 0a19 	add.w	sl, r4, #25
 80040ca:	68e3      	ldr	r3, [r4, #12]
 80040cc:	6832      	ldr	r2, [r6, #0]
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	42ab      	cmp	r3, r5
 80040d2:	dc2b      	bgt.n	800412c <_printf_common+0xa0>
 80040d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	3b00      	subs	r3, #0
 80040dc:	bf18      	it	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	0692      	lsls	r2, r2, #26
 80040e2:	d430      	bmi.n	8004146 <_printf_common+0xba>
 80040e4:	4641      	mov	r1, r8
 80040e6:	4638      	mov	r0, r7
 80040e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040ec:	47c8      	blx	r9
 80040ee:	3001      	adds	r0, #1
 80040f0:	d023      	beq.n	800413a <_printf_common+0xae>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	6922      	ldr	r2, [r4, #16]
 80040f6:	f003 0306 	and.w	r3, r3, #6
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	bf14      	ite	ne
 80040fe:	2500      	movne	r5, #0
 8004100:	6833      	ldreq	r3, [r6, #0]
 8004102:	f04f 0600 	mov.w	r6, #0
 8004106:	bf08      	it	eq
 8004108:	68e5      	ldreq	r5, [r4, #12]
 800410a:	f104 041a 	add.w	r4, r4, #26
 800410e:	bf08      	it	eq
 8004110:	1aed      	subeq	r5, r5, r3
 8004112:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004116:	bf08      	it	eq
 8004118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800411c:	4293      	cmp	r3, r2
 800411e:	bfc4      	itt	gt
 8004120:	1a9b      	subgt	r3, r3, r2
 8004122:	18ed      	addgt	r5, r5, r3
 8004124:	42b5      	cmp	r5, r6
 8004126:	d11a      	bne.n	800415e <_printf_common+0xd2>
 8004128:	2000      	movs	r0, #0
 800412a:	e008      	b.n	800413e <_printf_common+0xb2>
 800412c:	2301      	movs	r3, #1
 800412e:	4652      	mov	r2, sl
 8004130:	4641      	mov	r1, r8
 8004132:	4638      	mov	r0, r7
 8004134:	47c8      	blx	r9
 8004136:	3001      	adds	r0, #1
 8004138:	d103      	bne.n	8004142 <_printf_common+0xb6>
 800413a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004142:	3501      	adds	r5, #1
 8004144:	e7c1      	b.n	80040ca <_printf_common+0x3e>
 8004146:	2030      	movs	r0, #48	@ 0x30
 8004148:	18e1      	adds	r1, r4, r3
 800414a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004154:	4422      	add	r2, r4
 8004156:	3302      	adds	r3, #2
 8004158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800415c:	e7c2      	b.n	80040e4 <_printf_common+0x58>
 800415e:	2301      	movs	r3, #1
 8004160:	4622      	mov	r2, r4
 8004162:	4641      	mov	r1, r8
 8004164:	4638      	mov	r0, r7
 8004166:	47c8      	blx	r9
 8004168:	3001      	adds	r0, #1
 800416a:	d0e6      	beq.n	800413a <_printf_common+0xae>
 800416c:	3601      	adds	r6, #1
 800416e:	e7d9      	b.n	8004124 <_printf_common+0x98>

08004170 <_printf_i>:
 8004170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004174:	7e0f      	ldrb	r7, [r1, #24]
 8004176:	4691      	mov	r9, r2
 8004178:	2f78      	cmp	r7, #120	@ 0x78
 800417a:	4680      	mov	r8, r0
 800417c:	460c      	mov	r4, r1
 800417e:	469a      	mov	sl, r3
 8004180:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004186:	d807      	bhi.n	8004198 <_printf_i+0x28>
 8004188:	2f62      	cmp	r7, #98	@ 0x62
 800418a:	d80a      	bhi.n	80041a2 <_printf_i+0x32>
 800418c:	2f00      	cmp	r7, #0
 800418e:	f000 80d3 	beq.w	8004338 <_printf_i+0x1c8>
 8004192:	2f58      	cmp	r7, #88	@ 0x58
 8004194:	f000 80ba 	beq.w	800430c <_printf_i+0x19c>
 8004198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800419c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041a0:	e03a      	b.n	8004218 <_printf_i+0xa8>
 80041a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041a6:	2b15      	cmp	r3, #21
 80041a8:	d8f6      	bhi.n	8004198 <_printf_i+0x28>
 80041aa:	a101      	add	r1, pc, #4	@ (adr r1, 80041b0 <_printf_i+0x40>)
 80041ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041b0:	08004209 	.word	0x08004209
 80041b4:	0800421d 	.word	0x0800421d
 80041b8:	08004199 	.word	0x08004199
 80041bc:	08004199 	.word	0x08004199
 80041c0:	08004199 	.word	0x08004199
 80041c4:	08004199 	.word	0x08004199
 80041c8:	0800421d 	.word	0x0800421d
 80041cc:	08004199 	.word	0x08004199
 80041d0:	08004199 	.word	0x08004199
 80041d4:	08004199 	.word	0x08004199
 80041d8:	08004199 	.word	0x08004199
 80041dc:	0800431f 	.word	0x0800431f
 80041e0:	08004247 	.word	0x08004247
 80041e4:	080042d9 	.word	0x080042d9
 80041e8:	08004199 	.word	0x08004199
 80041ec:	08004199 	.word	0x08004199
 80041f0:	08004341 	.word	0x08004341
 80041f4:	08004199 	.word	0x08004199
 80041f8:	08004247 	.word	0x08004247
 80041fc:	08004199 	.word	0x08004199
 8004200:	08004199 	.word	0x08004199
 8004204:	080042e1 	.word	0x080042e1
 8004208:	6833      	ldr	r3, [r6, #0]
 800420a:	1d1a      	adds	r2, r3, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6032      	str	r2, [r6, #0]
 8004210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004218:	2301      	movs	r3, #1
 800421a:	e09e      	b.n	800435a <_printf_i+0x1ea>
 800421c:	6833      	ldr	r3, [r6, #0]
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	1d19      	adds	r1, r3, #4
 8004222:	6031      	str	r1, [r6, #0]
 8004224:	0606      	lsls	r6, r0, #24
 8004226:	d501      	bpl.n	800422c <_printf_i+0xbc>
 8004228:	681d      	ldr	r5, [r3, #0]
 800422a:	e003      	b.n	8004234 <_printf_i+0xc4>
 800422c:	0645      	lsls	r5, r0, #25
 800422e:	d5fb      	bpl.n	8004228 <_printf_i+0xb8>
 8004230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004234:	2d00      	cmp	r5, #0
 8004236:	da03      	bge.n	8004240 <_printf_i+0xd0>
 8004238:	232d      	movs	r3, #45	@ 0x2d
 800423a:	426d      	negs	r5, r5
 800423c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004240:	230a      	movs	r3, #10
 8004242:	4859      	ldr	r0, [pc, #356]	@ (80043a8 <_printf_i+0x238>)
 8004244:	e011      	b.n	800426a <_printf_i+0xfa>
 8004246:	6821      	ldr	r1, [r4, #0]
 8004248:	6833      	ldr	r3, [r6, #0]
 800424a:	0608      	lsls	r0, r1, #24
 800424c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004250:	d402      	bmi.n	8004258 <_printf_i+0xe8>
 8004252:	0649      	lsls	r1, r1, #25
 8004254:	bf48      	it	mi
 8004256:	b2ad      	uxthmi	r5, r5
 8004258:	2f6f      	cmp	r7, #111	@ 0x6f
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	bf14      	ite	ne
 800425e:	230a      	movne	r3, #10
 8004260:	2308      	moveq	r3, #8
 8004262:	4851      	ldr	r0, [pc, #324]	@ (80043a8 <_printf_i+0x238>)
 8004264:	2100      	movs	r1, #0
 8004266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800426a:	6866      	ldr	r6, [r4, #4]
 800426c:	2e00      	cmp	r6, #0
 800426e:	bfa8      	it	ge
 8004270:	6821      	ldrge	r1, [r4, #0]
 8004272:	60a6      	str	r6, [r4, #8]
 8004274:	bfa4      	itt	ge
 8004276:	f021 0104 	bicge.w	r1, r1, #4
 800427a:	6021      	strge	r1, [r4, #0]
 800427c:	b90d      	cbnz	r5, 8004282 <_printf_i+0x112>
 800427e:	2e00      	cmp	r6, #0
 8004280:	d04b      	beq.n	800431a <_printf_i+0x1aa>
 8004282:	4616      	mov	r6, r2
 8004284:	fbb5 f1f3 	udiv	r1, r5, r3
 8004288:	fb03 5711 	mls	r7, r3, r1, r5
 800428c:	5dc7      	ldrb	r7, [r0, r7]
 800428e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004292:	462f      	mov	r7, r5
 8004294:	42bb      	cmp	r3, r7
 8004296:	460d      	mov	r5, r1
 8004298:	d9f4      	bls.n	8004284 <_printf_i+0x114>
 800429a:	2b08      	cmp	r3, #8
 800429c:	d10b      	bne.n	80042b6 <_printf_i+0x146>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	07df      	lsls	r7, r3, #31
 80042a2:	d508      	bpl.n	80042b6 <_printf_i+0x146>
 80042a4:	6923      	ldr	r3, [r4, #16]
 80042a6:	6861      	ldr	r1, [r4, #4]
 80042a8:	4299      	cmp	r1, r3
 80042aa:	bfde      	ittt	le
 80042ac:	2330      	movle	r3, #48	@ 0x30
 80042ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042b2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80042b6:	1b92      	subs	r2, r2, r6
 80042b8:	6122      	str	r2, [r4, #16]
 80042ba:	464b      	mov	r3, r9
 80042bc:	4621      	mov	r1, r4
 80042be:	4640      	mov	r0, r8
 80042c0:	f8cd a000 	str.w	sl, [sp]
 80042c4:	aa03      	add	r2, sp, #12
 80042c6:	f7ff fee1 	bl	800408c <_printf_common>
 80042ca:	3001      	adds	r0, #1
 80042cc:	d14a      	bne.n	8004364 <_printf_i+0x1f4>
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042d2:	b004      	add	sp, #16
 80042d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	f043 0320 	orr.w	r3, r3, #32
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	2778      	movs	r7, #120	@ 0x78
 80042e2:	4832      	ldr	r0, [pc, #200]	@ (80043ac <_printf_i+0x23c>)
 80042e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	6831      	ldr	r1, [r6, #0]
 80042ec:	061f      	lsls	r7, r3, #24
 80042ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80042f2:	d402      	bmi.n	80042fa <_printf_i+0x18a>
 80042f4:	065f      	lsls	r7, r3, #25
 80042f6:	bf48      	it	mi
 80042f8:	b2ad      	uxthmi	r5, r5
 80042fa:	6031      	str	r1, [r6, #0]
 80042fc:	07d9      	lsls	r1, r3, #31
 80042fe:	bf44      	itt	mi
 8004300:	f043 0320 	orrmi.w	r3, r3, #32
 8004304:	6023      	strmi	r3, [r4, #0]
 8004306:	b11d      	cbz	r5, 8004310 <_printf_i+0x1a0>
 8004308:	2310      	movs	r3, #16
 800430a:	e7ab      	b.n	8004264 <_printf_i+0xf4>
 800430c:	4826      	ldr	r0, [pc, #152]	@ (80043a8 <_printf_i+0x238>)
 800430e:	e7e9      	b.n	80042e4 <_printf_i+0x174>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	f023 0320 	bic.w	r3, r3, #32
 8004316:	6023      	str	r3, [r4, #0]
 8004318:	e7f6      	b.n	8004308 <_printf_i+0x198>
 800431a:	4616      	mov	r6, r2
 800431c:	e7bd      	b.n	800429a <_printf_i+0x12a>
 800431e:	6833      	ldr	r3, [r6, #0]
 8004320:	6825      	ldr	r5, [r4, #0]
 8004322:	1d18      	adds	r0, r3, #4
 8004324:	6961      	ldr	r1, [r4, #20]
 8004326:	6030      	str	r0, [r6, #0]
 8004328:	062e      	lsls	r6, r5, #24
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	d501      	bpl.n	8004332 <_printf_i+0x1c2>
 800432e:	6019      	str	r1, [r3, #0]
 8004330:	e002      	b.n	8004338 <_printf_i+0x1c8>
 8004332:	0668      	lsls	r0, r5, #25
 8004334:	d5fb      	bpl.n	800432e <_printf_i+0x1be>
 8004336:	8019      	strh	r1, [r3, #0]
 8004338:	2300      	movs	r3, #0
 800433a:	4616      	mov	r6, r2
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	e7bc      	b.n	80042ba <_printf_i+0x14a>
 8004340:	6833      	ldr	r3, [r6, #0]
 8004342:	2100      	movs	r1, #0
 8004344:	1d1a      	adds	r2, r3, #4
 8004346:	6032      	str	r2, [r6, #0]
 8004348:	681e      	ldr	r6, [r3, #0]
 800434a:	6862      	ldr	r2, [r4, #4]
 800434c:	4630      	mov	r0, r6
 800434e:	f000 fbe4 	bl	8004b1a <memchr>
 8004352:	b108      	cbz	r0, 8004358 <_printf_i+0x1e8>
 8004354:	1b80      	subs	r0, r0, r6
 8004356:	6060      	str	r0, [r4, #4]
 8004358:	6863      	ldr	r3, [r4, #4]
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	2300      	movs	r3, #0
 800435e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004362:	e7aa      	b.n	80042ba <_printf_i+0x14a>
 8004364:	4632      	mov	r2, r6
 8004366:	4649      	mov	r1, r9
 8004368:	4640      	mov	r0, r8
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	47d0      	blx	sl
 800436e:	3001      	adds	r0, #1
 8004370:	d0ad      	beq.n	80042ce <_printf_i+0x15e>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	079b      	lsls	r3, r3, #30
 8004376:	d413      	bmi.n	80043a0 <_printf_i+0x230>
 8004378:	68e0      	ldr	r0, [r4, #12]
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	4298      	cmp	r0, r3
 800437e:	bfb8      	it	lt
 8004380:	4618      	movlt	r0, r3
 8004382:	e7a6      	b.n	80042d2 <_printf_i+0x162>
 8004384:	2301      	movs	r3, #1
 8004386:	4632      	mov	r2, r6
 8004388:	4649      	mov	r1, r9
 800438a:	4640      	mov	r0, r8
 800438c:	47d0      	blx	sl
 800438e:	3001      	adds	r0, #1
 8004390:	d09d      	beq.n	80042ce <_printf_i+0x15e>
 8004392:	3501      	adds	r5, #1
 8004394:	68e3      	ldr	r3, [r4, #12]
 8004396:	9903      	ldr	r1, [sp, #12]
 8004398:	1a5b      	subs	r3, r3, r1
 800439a:	42ab      	cmp	r3, r5
 800439c:	dcf2      	bgt.n	8004384 <_printf_i+0x214>
 800439e:	e7eb      	b.n	8004378 <_printf_i+0x208>
 80043a0:	2500      	movs	r5, #0
 80043a2:	f104 0619 	add.w	r6, r4, #25
 80043a6:	e7f5      	b.n	8004394 <_printf_i+0x224>
 80043a8:	08008398 	.word	0x08008398
 80043ac:	080083a9 	.word	0x080083a9

080043b0 <_scanf_float>:
 80043b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b4:	b087      	sub	sp, #28
 80043b6:	9303      	str	r3, [sp, #12]
 80043b8:	688b      	ldr	r3, [r1, #8]
 80043ba:	4617      	mov	r7, r2
 80043bc:	1e5a      	subs	r2, r3, #1
 80043be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80043c2:	bf82      	ittt	hi
 80043c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80043c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80043cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80043d0:	460a      	mov	r2, r1
 80043d2:	f04f 0500 	mov.w	r5, #0
 80043d6:	bf88      	it	hi
 80043d8:	608b      	strhi	r3, [r1, #8]
 80043da:	680b      	ldr	r3, [r1, #0]
 80043dc:	4680      	mov	r8, r0
 80043de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80043e2:	f842 3b1c 	str.w	r3, [r2], #28
 80043e6:	460c      	mov	r4, r1
 80043e8:	bf98      	it	ls
 80043ea:	f04f 0b00 	movls.w	fp, #0
 80043ee:	4616      	mov	r6, r2
 80043f0:	46aa      	mov	sl, r5
 80043f2:	46a9      	mov	r9, r5
 80043f4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043f8:	9201      	str	r2, [sp, #4]
 80043fa:	9502      	str	r5, [sp, #8]
 80043fc:	68a2      	ldr	r2, [r4, #8]
 80043fe:	b152      	cbz	r2, 8004416 <_scanf_float+0x66>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b4e      	cmp	r3, #78	@ 0x4e
 8004406:	d865      	bhi.n	80044d4 <_scanf_float+0x124>
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d83d      	bhi.n	8004488 <_scanf_float+0xd8>
 800440c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004410:	b2c8      	uxtb	r0, r1
 8004412:	280e      	cmp	r0, #14
 8004414:	d93b      	bls.n	800448e <_scanf_float+0xde>
 8004416:	f1b9 0f00 	cmp.w	r9, #0
 800441a:	d003      	beq.n	8004424 <_scanf_float+0x74>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004428:	f1ba 0f01 	cmp.w	sl, #1
 800442c:	f200 8118 	bhi.w	8004660 <_scanf_float+0x2b0>
 8004430:	9b01      	ldr	r3, [sp, #4]
 8004432:	429e      	cmp	r6, r3
 8004434:	f200 8109 	bhi.w	800464a <_scanf_float+0x29a>
 8004438:	2001      	movs	r0, #1
 800443a:	b007      	add	sp, #28
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004440:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004444:	2a0d      	cmp	r2, #13
 8004446:	d8e6      	bhi.n	8004416 <_scanf_float+0x66>
 8004448:	a101      	add	r1, pc, #4	@ (adr r1, 8004450 <_scanf_float+0xa0>)
 800444a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004597 	.word	0x08004597
 8004454:	08004417 	.word	0x08004417
 8004458:	08004417 	.word	0x08004417
 800445c:	08004417 	.word	0x08004417
 8004460:	080045f7 	.word	0x080045f7
 8004464:	080045cf 	.word	0x080045cf
 8004468:	08004417 	.word	0x08004417
 800446c:	08004417 	.word	0x08004417
 8004470:	080045a5 	.word	0x080045a5
 8004474:	08004417 	.word	0x08004417
 8004478:	08004417 	.word	0x08004417
 800447c:	08004417 	.word	0x08004417
 8004480:	08004417 	.word	0x08004417
 8004484:	0800455d 	.word	0x0800455d
 8004488:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800448c:	e7da      	b.n	8004444 <_scanf_float+0x94>
 800448e:	290e      	cmp	r1, #14
 8004490:	d8c1      	bhi.n	8004416 <_scanf_float+0x66>
 8004492:	a001      	add	r0, pc, #4	@ (adr r0, 8004498 <_scanf_float+0xe8>)
 8004494:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004498:	0800454d 	.word	0x0800454d
 800449c:	08004417 	.word	0x08004417
 80044a0:	0800454d 	.word	0x0800454d
 80044a4:	080045e3 	.word	0x080045e3
 80044a8:	08004417 	.word	0x08004417
 80044ac:	080044f5 	.word	0x080044f5
 80044b0:	08004533 	.word	0x08004533
 80044b4:	08004533 	.word	0x08004533
 80044b8:	08004533 	.word	0x08004533
 80044bc:	08004533 	.word	0x08004533
 80044c0:	08004533 	.word	0x08004533
 80044c4:	08004533 	.word	0x08004533
 80044c8:	08004533 	.word	0x08004533
 80044cc:	08004533 	.word	0x08004533
 80044d0:	08004533 	.word	0x08004533
 80044d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80044d6:	d809      	bhi.n	80044ec <_scanf_float+0x13c>
 80044d8:	2b60      	cmp	r3, #96	@ 0x60
 80044da:	d8b1      	bhi.n	8004440 <_scanf_float+0x90>
 80044dc:	2b54      	cmp	r3, #84	@ 0x54
 80044de:	d07b      	beq.n	80045d8 <_scanf_float+0x228>
 80044e0:	2b59      	cmp	r3, #89	@ 0x59
 80044e2:	d198      	bne.n	8004416 <_scanf_float+0x66>
 80044e4:	2d07      	cmp	r5, #7
 80044e6:	d196      	bne.n	8004416 <_scanf_float+0x66>
 80044e8:	2508      	movs	r5, #8
 80044ea:	e02c      	b.n	8004546 <_scanf_float+0x196>
 80044ec:	2b74      	cmp	r3, #116	@ 0x74
 80044ee:	d073      	beq.n	80045d8 <_scanf_float+0x228>
 80044f0:	2b79      	cmp	r3, #121	@ 0x79
 80044f2:	e7f6      	b.n	80044e2 <_scanf_float+0x132>
 80044f4:	6821      	ldr	r1, [r4, #0]
 80044f6:	05c8      	lsls	r0, r1, #23
 80044f8:	d51b      	bpl.n	8004532 <_scanf_float+0x182>
 80044fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80044fe:	6021      	str	r1, [r4, #0]
 8004500:	f109 0901 	add.w	r9, r9, #1
 8004504:	f1bb 0f00 	cmp.w	fp, #0
 8004508:	d003      	beq.n	8004512 <_scanf_float+0x162>
 800450a:	3201      	adds	r2, #1
 800450c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004510:	60a2      	str	r2, [r4, #8]
 8004512:	68a3      	ldr	r3, [r4, #8]
 8004514:	3b01      	subs	r3, #1
 8004516:	60a3      	str	r3, [r4, #8]
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	3301      	adds	r3, #1
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3b01      	subs	r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	f340 8087 	ble.w	8004638 <_scanf_float+0x288>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	e764      	b.n	80043fc <_scanf_float+0x4c>
 8004532:	eb1a 0105 	adds.w	r1, sl, r5
 8004536:	f47f af6e 	bne.w	8004416 <_scanf_float+0x66>
 800453a:	460d      	mov	r5, r1
 800453c:	468a      	mov	sl, r1
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	f806 3b01 	strb.w	r3, [r6], #1
 800454a:	e7e2      	b.n	8004512 <_scanf_float+0x162>
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	0610      	lsls	r0, r2, #24
 8004550:	f57f af61 	bpl.w	8004416 <_scanf_float+0x66>
 8004554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004558:	6022      	str	r2, [r4, #0]
 800455a:	e7f4      	b.n	8004546 <_scanf_float+0x196>
 800455c:	f1ba 0f00 	cmp.w	sl, #0
 8004560:	d10e      	bne.n	8004580 <_scanf_float+0x1d0>
 8004562:	f1b9 0f00 	cmp.w	r9, #0
 8004566:	d10e      	bne.n	8004586 <_scanf_float+0x1d6>
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800456e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004572:	d108      	bne.n	8004586 <_scanf_float+0x1d6>
 8004574:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004578:	f04f 0a01 	mov.w	sl, #1
 800457c:	6022      	str	r2, [r4, #0]
 800457e:	e7e2      	b.n	8004546 <_scanf_float+0x196>
 8004580:	f1ba 0f02 	cmp.w	sl, #2
 8004584:	d055      	beq.n	8004632 <_scanf_float+0x282>
 8004586:	2d01      	cmp	r5, #1
 8004588:	d002      	beq.n	8004590 <_scanf_float+0x1e0>
 800458a:	2d04      	cmp	r5, #4
 800458c:	f47f af43 	bne.w	8004416 <_scanf_float+0x66>
 8004590:	3501      	adds	r5, #1
 8004592:	b2ed      	uxtb	r5, r5
 8004594:	e7d7      	b.n	8004546 <_scanf_float+0x196>
 8004596:	f1ba 0f01 	cmp.w	sl, #1
 800459a:	f47f af3c 	bne.w	8004416 <_scanf_float+0x66>
 800459e:	f04f 0a02 	mov.w	sl, #2
 80045a2:	e7d0      	b.n	8004546 <_scanf_float+0x196>
 80045a4:	b97d      	cbnz	r5, 80045c6 <_scanf_float+0x216>
 80045a6:	f1b9 0f00 	cmp.w	r9, #0
 80045aa:	f47f af37 	bne.w	800441c <_scanf_float+0x6c>
 80045ae:	6822      	ldr	r2, [r4, #0]
 80045b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80045b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80045b8:	f040 8103 	bne.w	80047c2 <_scanf_float+0x412>
 80045bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80045c0:	2501      	movs	r5, #1
 80045c2:	6022      	str	r2, [r4, #0]
 80045c4:	e7bf      	b.n	8004546 <_scanf_float+0x196>
 80045c6:	2d03      	cmp	r5, #3
 80045c8:	d0e2      	beq.n	8004590 <_scanf_float+0x1e0>
 80045ca:	2d05      	cmp	r5, #5
 80045cc:	e7de      	b.n	800458c <_scanf_float+0x1dc>
 80045ce:	2d02      	cmp	r5, #2
 80045d0:	f47f af21 	bne.w	8004416 <_scanf_float+0x66>
 80045d4:	2503      	movs	r5, #3
 80045d6:	e7b6      	b.n	8004546 <_scanf_float+0x196>
 80045d8:	2d06      	cmp	r5, #6
 80045da:	f47f af1c 	bne.w	8004416 <_scanf_float+0x66>
 80045de:	2507      	movs	r5, #7
 80045e0:	e7b1      	b.n	8004546 <_scanf_float+0x196>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	0591      	lsls	r1, r2, #22
 80045e6:	f57f af16 	bpl.w	8004416 <_scanf_float+0x66>
 80045ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80045ee:	6022      	str	r2, [r4, #0]
 80045f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80045f4:	e7a7      	b.n	8004546 <_scanf_float+0x196>
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80045fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004600:	d006      	beq.n	8004610 <_scanf_float+0x260>
 8004602:	0550      	lsls	r0, r2, #21
 8004604:	f57f af07 	bpl.w	8004416 <_scanf_float+0x66>
 8004608:	f1b9 0f00 	cmp.w	r9, #0
 800460c:	f000 80d9 	beq.w	80047c2 <_scanf_float+0x412>
 8004610:	0591      	lsls	r1, r2, #22
 8004612:	bf58      	it	pl
 8004614:	9902      	ldrpl	r1, [sp, #8]
 8004616:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800461a:	bf58      	it	pl
 800461c:	eba9 0101 	subpl.w	r1, r9, r1
 8004620:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004624:	f04f 0900 	mov.w	r9, #0
 8004628:	bf58      	it	pl
 800462a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800462e:	6022      	str	r2, [r4, #0]
 8004630:	e789      	b.n	8004546 <_scanf_float+0x196>
 8004632:	f04f 0a03 	mov.w	sl, #3
 8004636:	e786      	b.n	8004546 <_scanf_float+0x196>
 8004638:	4639      	mov	r1, r7
 800463a:	4640      	mov	r0, r8
 800463c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004640:	4798      	blx	r3
 8004642:	2800      	cmp	r0, #0
 8004644:	f43f aeda 	beq.w	80043fc <_scanf_float+0x4c>
 8004648:	e6e5      	b.n	8004416 <_scanf_float+0x66>
 800464a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800464e:	463a      	mov	r2, r7
 8004650:	4640      	mov	r0, r8
 8004652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004656:	4798      	blx	r3
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	3b01      	subs	r3, #1
 800465c:	6123      	str	r3, [r4, #16]
 800465e:	e6e7      	b.n	8004430 <_scanf_float+0x80>
 8004660:	1e6b      	subs	r3, r5, #1
 8004662:	2b06      	cmp	r3, #6
 8004664:	d824      	bhi.n	80046b0 <_scanf_float+0x300>
 8004666:	2d02      	cmp	r5, #2
 8004668:	d836      	bhi.n	80046d8 <_scanf_float+0x328>
 800466a:	9b01      	ldr	r3, [sp, #4]
 800466c:	429e      	cmp	r6, r3
 800466e:	f67f aee3 	bls.w	8004438 <_scanf_float+0x88>
 8004672:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004676:	463a      	mov	r2, r7
 8004678:	4640      	mov	r0, r8
 800467a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800467e:	4798      	blx	r3
 8004680:	6923      	ldr	r3, [r4, #16]
 8004682:	3b01      	subs	r3, #1
 8004684:	6123      	str	r3, [r4, #16]
 8004686:	e7f0      	b.n	800466a <_scanf_float+0x2ba>
 8004688:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800468c:	463a      	mov	r2, r7
 800468e:	4640      	mov	r0, r8
 8004690:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004694:	4798      	blx	r3
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	3b01      	subs	r3, #1
 800469a:	6123      	str	r3, [r4, #16]
 800469c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80046a0:	fa5f fa8a 	uxtb.w	sl, sl
 80046a4:	f1ba 0f02 	cmp.w	sl, #2
 80046a8:	d1ee      	bne.n	8004688 <_scanf_float+0x2d8>
 80046aa:	3d03      	subs	r5, #3
 80046ac:	b2ed      	uxtb	r5, r5
 80046ae:	1b76      	subs	r6, r6, r5
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	05da      	lsls	r2, r3, #23
 80046b4:	d530      	bpl.n	8004718 <_scanf_float+0x368>
 80046b6:	055b      	lsls	r3, r3, #21
 80046b8:	d511      	bpl.n	80046de <_scanf_float+0x32e>
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	429e      	cmp	r6, r3
 80046be:	f67f aebb 	bls.w	8004438 <_scanf_float+0x88>
 80046c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046c6:	463a      	mov	r2, r7
 80046c8:	4640      	mov	r0, r8
 80046ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046ce:	4798      	blx	r3
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	e7f0      	b.n	80046ba <_scanf_float+0x30a>
 80046d8:	46aa      	mov	sl, r5
 80046da:	46b3      	mov	fp, r6
 80046dc:	e7de      	b.n	800469c <_scanf_float+0x2ec>
 80046de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	2965      	cmp	r1, #101	@ 0x65
 80046e6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80046ea:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80046ee:	6123      	str	r3, [r4, #16]
 80046f0:	d00c      	beq.n	800470c <_scanf_float+0x35c>
 80046f2:	2945      	cmp	r1, #69	@ 0x45
 80046f4:	d00a      	beq.n	800470c <_scanf_float+0x35c>
 80046f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046fa:	463a      	mov	r2, r7
 80046fc:	4640      	mov	r0, r8
 80046fe:	4798      	blx	r3
 8004700:	6923      	ldr	r3, [r4, #16]
 8004702:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004706:	3b01      	subs	r3, #1
 8004708:	1eb5      	subs	r5, r6, #2
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	463a      	mov	r2, r7
 800470e:	4640      	mov	r0, r8
 8004710:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004714:	4798      	blx	r3
 8004716:	462e      	mov	r6, r5
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	f012 0210 	ands.w	r2, r2, #16
 800471e:	d001      	beq.n	8004724 <_scanf_float+0x374>
 8004720:	2000      	movs	r0, #0
 8004722:	e68a      	b.n	800443a <_scanf_float+0x8a>
 8004724:	7032      	strb	r2, [r6, #0]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004730:	d11c      	bne.n	800476c <_scanf_float+0x3bc>
 8004732:	9b02      	ldr	r3, [sp, #8]
 8004734:	454b      	cmp	r3, r9
 8004736:	eba3 0209 	sub.w	r2, r3, r9
 800473a:	d123      	bne.n	8004784 <_scanf_float+0x3d4>
 800473c:	2200      	movs	r2, #0
 800473e:	4640      	mov	r0, r8
 8004740:	9901      	ldr	r1, [sp, #4]
 8004742:	f002 fbed 	bl	8006f20 <_strtod_r>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	6825      	ldr	r5, [r4, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f015 0f02 	tst.w	r5, #2
 8004750:	4606      	mov	r6, r0
 8004752:	460f      	mov	r7, r1
 8004754:	f103 0204 	add.w	r2, r3, #4
 8004758:	d01f      	beq.n	800479a <_scanf_float+0x3ea>
 800475a:	9903      	ldr	r1, [sp, #12]
 800475c:	600a      	str	r2, [r1, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	e9c3 6700 	strd	r6, r7, [r3]
 8004764:	68e3      	ldr	r3, [r4, #12]
 8004766:	3301      	adds	r3, #1
 8004768:	60e3      	str	r3, [r4, #12]
 800476a:	e7d9      	b.n	8004720 <_scanf_float+0x370>
 800476c:	9b04      	ldr	r3, [sp, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0e4      	beq.n	800473c <_scanf_float+0x38c>
 8004772:	9905      	ldr	r1, [sp, #20]
 8004774:	230a      	movs	r3, #10
 8004776:	4640      	mov	r0, r8
 8004778:	3101      	adds	r1, #1
 800477a:	f002 fc51 	bl	8007020 <_strtol_r>
 800477e:	9b04      	ldr	r3, [sp, #16]
 8004780:	9e05      	ldr	r6, [sp, #20]
 8004782:	1ac2      	subs	r2, r0, r3
 8004784:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004788:	429e      	cmp	r6, r3
 800478a:	bf28      	it	cs
 800478c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004790:	4630      	mov	r0, r6
 8004792:	490d      	ldr	r1, [pc, #52]	@ (80047c8 <_scanf_float+0x418>)
 8004794:	f000 f8de 	bl	8004954 <siprintf>
 8004798:	e7d0      	b.n	800473c <_scanf_float+0x38c>
 800479a:	076d      	lsls	r5, r5, #29
 800479c:	d4dd      	bmi.n	800475a <_scanf_float+0x3aa>
 800479e:	9d03      	ldr	r5, [sp, #12]
 80047a0:	602a      	str	r2, [r5, #0]
 80047a2:	681d      	ldr	r5, [r3, #0]
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	f7fc f930 	bl	8000a0c <__aeabi_dcmpun>
 80047ac:	b120      	cbz	r0, 80047b8 <_scanf_float+0x408>
 80047ae:	4807      	ldr	r0, [pc, #28]	@ (80047cc <_scanf_float+0x41c>)
 80047b0:	f000 f9c2 	bl	8004b38 <nanf>
 80047b4:	6028      	str	r0, [r5, #0]
 80047b6:	e7d5      	b.n	8004764 <_scanf_float+0x3b4>
 80047b8:	4630      	mov	r0, r6
 80047ba:	4639      	mov	r1, r7
 80047bc:	f7fc f984 	bl	8000ac8 <__aeabi_d2f>
 80047c0:	e7f8      	b.n	80047b4 <_scanf_float+0x404>
 80047c2:	f04f 0900 	mov.w	r9, #0
 80047c6:	e62d      	b.n	8004424 <_scanf_float+0x74>
 80047c8:	080083ba 	.word	0x080083ba
 80047cc:	08008755 	.word	0x08008755

080047d0 <std>:
 80047d0:	2300      	movs	r3, #0
 80047d2:	b510      	push	{r4, lr}
 80047d4:	4604      	mov	r4, r0
 80047d6:	e9c0 3300 	strd	r3, r3, [r0]
 80047da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047de:	6083      	str	r3, [r0, #8]
 80047e0:	8181      	strh	r1, [r0, #12]
 80047e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80047e4:	81c2      	strh	r2, [r0, #14]
 80047e6:	6183      	str	r3, [r0, #24]
 80047e8:	4619      	mov	r1, r3
 80047ea:	2208      	movs	r2, #8
 80047ec:	305c      	adds	r0, #92	@ 0x5c
 80047ee:	f000 f914 	bl	8004a1a <memset>
 80047f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <std+0x58>)
 80047f4:	6224      	str	r4, [r4, #32]
 80047f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80047f8:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <std+0x5c>)
 80047fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004830 <std+0x60>)
 80047fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004800:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <std+0x64>)
 8004802:	6323      	str	r3, [r4, #48]	@ 0x30
 8004804:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <std+0x68>)
 8004806:	429c      	cmp	r4, r3
 8004808:	d006      	beq.n	8004818 <std+0x48>
 800480a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800480e:	4294      	cmp	r4, r2
 8004810:	d002      	beq.n	8004818 <std+0x48>
 8004812:	33d0      	adds	r3, #208	@ 0xd0
 8004814:	429c      	cmp	r4, r3
 8004816:	d105      	bne.n	8004824 <std+0x54>
 8004818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800481c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004820:	f000 b978 	b.w	8004b14 <__retarget_lock_init_recursive>
 8004824:	bd10      	pop	{r4, pc}
 8004826:	bf00      	nop
 8004828:	08004995 	.word	0x08004995
 800482c:	080049b7 	.word	0x080049b7
 8004830:	080049ef 	.word	0x080049ef
 8004834:	08004a13 	.word	0x08004a13
 8004838:	20001388 	.word	0x20001388

0800483c <stdio_exit_handler>:
 800483c:	4a02      	ldr	r2, [pc, #8]	@ (8004848 <stdio_exit_handler+0xc>)
 800483e:	4903      	ldr	r1, [pc, #12]	@ (800484c <stdio_exit_handler+0x10>)
 8004840:	4803      	ldr	r0, [pc, #12]	@ (8004850 <stdio_exit_handler+0x14>)
 8004842:	f000 b869 	b.w	8004918 <_fwalk_sglue>
 8004846:	bf00      	nop
 8004848:	20000020 	.word	0x20000020
 800484c:	080073d5 	.word	0x080073d5
 8004850:	20000030 	.word	0x20000030

08004854 <cleanup_stdio>:
 8004854:	6841      	ldr	r1, [r0, #4]
 8004856:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <cleanup_stdio+0x34>)
 8004858:	b510      	push	{r4, lr}
 800485a:	4299      	cmp	r1, r3
 800485c:	4604      	mov	r4, r0
 800485e:	d001      	beq.n	8004864 <cleanup_stdio+0x10>
 8004860:	f002 fdb8 	bl	80073d4 <_fflush_r>
 8004864:	68a1      	ldr	r1, [r4, #8]
 8004866:	4b09      	ldr	r3, [pc, #36]	@ (800488c <cleanup_stdio+0x38>)
 8004868:	4299      	cmp	r1, r3
 800486a:	d002      	beq.n	8004872 <cleanup_stdio+0x1e>
 800486c:	4620      	mov	r0, r4
 800486e:	f002 fdb1 	bl	80073d4 <_fflush_r>
 8004872:	68e1      	ldr	r1, [r4, #12]
 8004874:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <cleanup_stdio+0x3c>)
 8004876:	4299      	cmp	r1, r3
 8004878:	d004      	beq.n	8004884 <cleanup_stdio+0x30>
 800487a:	4620      	mov	r0, r4
 800487c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004880:	f002 bda8 	b.w	80073d4 <_fflush_r>
 8004884:	bd10      	pop	{r4, pc}
 8004886:	bf00      	nop
 8004888:	20001388 	.word	0x20001388
 800488c:	200013f0 	.word	0x200013f0
 8004890:	20001458 	.word	0x20001458

08004894 <global_stdio_init.part.0>:
 8004894:	b510      	push	{r4, lr}
 8004896:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <global_stdio_init.part.0+0x30>)
 8004898:	4c0b      	ldr	r4, [pc, #44]	@ (80048c8 <global_stdio_init.part.0+0x34>)
 800489a:	4a0c      	ldr	r2, [pc, #48]	@ (80048cc <global_stdio_init.part.0+0x38>)
 800489c:	4620      	mov	r0, r4
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	2104      	movs	r1, #4
 80048a2:	2200      	movs	r2, #0
 80048a4:	f7ff ff94 	bl	80047d0 <std>
 80048a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048ac:	2201      	movs	r2, #1
 80048ae:	2109      	movs	r1, #9
 80048b0:	f7ff ff8e 	bl	80047d0 <std>
 80048b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048b8:	2202      	movs	r2, #2
 80048ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048be:	2112      	movs	r1, #18
 80048c0:	f7ff bf86 	b.w	80047d0 <std>
 80048c4:	200014c0 	.word	0x200014c0
 80048c8:	20001388 	.word	0x20001388
 80048cc:	0800483d 	.word	0x0800483d

080048d0 <__sfp_lock_acquire>:
 80048d0:	4801      	ldr	r0, [pc, #4]	@ (80048d8 <__sfp_lock_acquire+0x8>)
 80048d2:	f000 b920 	b.w	8004b16 <__retarget_lock_acquire_recursive>
 80048d6:	bf00      	nop
 80048d8:	200014c9 	.word	0x200014c9

080048dc <__sfp_lock_release>:
 80048dc:	4801      	ldr	r0, [pc, #4]	@ (80048e4 <__sfp_lock_release+0x8>)
 80048de:	f000 b91b 	b.w	8004b18 <__retarget_lock_release_recursive>
 80048e2:	bf00      	nop
 80048e4:	200014c9 	.word	0x200014c9

080048e8 <__sinit>:
 80048e8:	b510      	push	{r4, lr}
 80048ea:	4604      	mov	r4, r0
 80048ec:	f7ff fff0 	bl	80048d0 <__sfp_lock_acquire>
 80048f0:	6a23      	ldr	r3, [r4, #32]
 80048f2:	b11b      	cbz	r3, 80048fc <__sinit+0x14>
 80048f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f8:	f7ff bff0 	b.w	80048dc <__sfp_lock_release>
 80048fc:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <__sinit+0x28>)
 80048fe:	6223      	str	r3, [r4, #32]
 8004900:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <__sinit+0x2c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f5      	bne.n	80048f4 <__sinit+0xc>
 8004908:	f7ff ffc4 	bl	8004894 <global_stdio_init.part.0>
 800490c:	e7f2      	b.n	80048f4 <__sinit+0xc>
 800490e:	bf00      	nop
 8004910:	08004855 	.word	0x08004855
 8004914:	200014c0 	.word	0x200014c0

08004918 <_fwalk_sglue>:
 8004918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800491c:	4607      	mov	r7, r0
 800491e:	4688      	mov	r8, r1
 8004920:	4614      	mov	r4, r2
 8004922:	2600      	movs	r6, #0
 8004924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004928:	f1b9 0901 	subs.w	r9, r9, #1
 800492c:	d505      	bpl.n	800493a <_fwalk_sglue+0x22>
 800492e:	6824      	ldr	r4, [r4, #0]
 8004930:	2c00      	cmp	r4, #0
 8004932:	d1f7      	bne.n	8004924 <_fwalk_sglue+0xc>
 8004934:	4630      	mov	r0, r6
 8004936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800493a:	89ab      	ldrh	r3, [r5, #12]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d907      	bls.n	8004950 <_fwalk_sglue+0x38>
 8004940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004944:	3301      	adds	r3, #1
 8004946:	d003      	beq.n	8004950 <_fwalk_sglue+0x38>
 8004948:	4629      	mov	r1, r5
 800494a:	4638      	mov	r0, r7
 800494c:	47c0      	blx	r8
 800494e:	4306      	orrs	r6, r0
 8004950:	3568      	adds	r5, #104	@ 0x68
 8004952:	e7e9      	b.n	8004928 <_fwalk_sglue+0x10>

08004954 <siprintf>:
 8004954:	b40e      	push	{r1, r2, r3}
 8004956:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800495a:	b500      	push	{lr}
 800495c:	b09c      	sub	sp, #112	@ 0x70
 800495e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004960:	9002      	str	r0, [sp, #8]
 8004962:	9006      	str	r0, [sp, #24]
 8004964:	9107      	str	r1, [sp, #28]
 8004966:	9104      	str	r1, [sp, #16]
 8004968:	4808      	ldr	r0, [pc, #32]	@ (800498c <siprintf+0x38>)
 800496a:	4909      	ldr	r1, [pc, #36]	@ (8004990 <siprintf+0x3c>)
 800496c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004970:	9105      	str	r1, [sp, #20]
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	a902      	add	r1, sp, #8
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	f002 fbb0 	bl	80070dc <_svfiprintf_r>
 800497c:	2200      	movs	r2, #0
 800497e:	9b02      	ldr	r3, [sp, #8]
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	b01c      	add	sp, #112	@ 0x70
 8004984:	f85d eb04 	ldr.w	lr, [sp], #4
 8004988:	b003      	add	sp, #12
 800498a:	4770      	bx	lr
 800498c:	2000002c 	.word	0x2000002c
 8004990:	ffff0208 	.word	0xffff0208

08004994 <__sread>:
 8004994:	b510      	push	{r4, lr}
 8004996:	460c      	mov	r4, r1
 8004998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499c:	f000 f86c 	bl	8004a78 <_read_r>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	bfab      	itete	ge
 80049a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049a6:	89a3      	ldrhlt	r3, [r4, #12]
 80049a8:	181b      	addge	r3, r3, r0
 80049aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049ae:	bfac      	ite	ge
 80049b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049b2:	81a3      	strhlt	r3, [r4, #12]
 80049b4:	bd10      	pop	{r4, pc}

080049b6 <__swrite>:
 80049b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ba:	461f      	mov	r7, r3
 80049bc:	898b      	ldrh	r3, [r1, #12]
 80049be:	4605      	mov	r5, r0
 80049c0:	05db      	lsls	r3, r3, #23
 80049c2:	460c      	mov	r4, r1
 80049c4:	4616      	mov	r6, r2
 80049c6:	d505      	bpl.n	80049d4 <__swrite+0x1e>
 80049c8:	2302      	movs	r3, #2
 80049ca:	2200      	movs	r2, #0
 80049cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d0:	f000 f840 	bl	8004a54 <_lseek_r>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	4632      	mov	r2, r6
 80049d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	4628      	mov	r0, r5
 80049e0:	463b      	mov	r3, r7
 80049e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ea:	f000 b857 	b.w	8004a9c <_write_r>

080049ee <__sseek>:
 80049ee:	b510      	push	{r4, lr}
 80049f0:	460c      	mov	r4, r1
 80049f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f6:	f000 f82d 	bl	8004a54 <_lseek_r>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	bf15      	itete	ne
 8004a00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a0a:	81a3      	strheq	r3, [r4, #12]
 8004a0c:	bf18      	it	ne
 8004a0e:	81a3      	strhne	r3, [r4, #12]
 8004a10:	bd10      	pop	{r4, pc}

08004a12 <__sclose>:
 8004a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a16:	f000 b80d 	b.w	8004a34 <_close_r>

08004a1a <memset>:
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4402      	add	r2, r0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d100      	bne.n	8004a24 <memset+0xa>
 8004a22:	4770      	bx	lr
 8004a24:	f803 1b01 	strb.w	r1, [r3], #1
 8004a28:	e7f9      	b.n	8004a1e <memset+0x4>
	...

08004a2c <_localeconv_r>:
 8004a2c:	4800      	ldr	r0, [pc, #0]	@ (8004a30 <_localeconv_r+0x4>)
 8004a2e:	4770      	bx	lr
 8004a30:	2000016c 	.word	0x2000016c

08004a34 <_close_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	2300      	movs	r3, #0
 8004a38:	4d05      	ldr	r5, [pc, #20]	@ (8004a50 <_close_r+0x1c>)
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	f7fd f91d 	bl	8001c7e <_close>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_close_r+0x1a>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_close_r+0x1a>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	200014c4 	.word	0x200014c4

08004a54 <_lseek_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4604      	mov	r4, r0
 8004a58:	4608      	mov	r0, r1
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4d05      	ldr	r5, [pc, #20]	@ (8004a74 <_lseek_r+0x20>)
 8004a60:	602a      	str	r2, [r5, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f7fd f92f 	bl	8001cc6 <_lseek>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_lseek_r+0x1e>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_lseek_r+0x1e>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	200014c4 	.word	0x200014c4

08004a78 <_read_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	2200      	movs	r2, #0
 8004a82:	4d05      	ldr	r5, [pc, #20]	@ (8004a98 <_read_r+0x20>)
 8004a84:	602a      	str	r2, [r5, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f7fd f8c0 	bl	8001c0c <_read>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_read_r+0x1e>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_read_r+0x1e>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	200014c4 	.word	0x200014c4

08004a9c <_write_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4d05      	ldr	r5, [pc, #20]	@ (8004abc <_write_r+0x20>)
 8004aa8:	602a      	str	r2, [r5, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f7fd f8cb 	bl	8001c46 <_write>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_write_r+0x1e>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_write_r+0x1e>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	200014c4 	.word	0x200014c4

08004ac0 <__errno>:
 8004ac0:	4b01      	ldr	r3, [pc, #4]	@ (8004ac8 <__errno+0x8>)
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	2000002c 	.word	0x2000002c

08004acc <__libc_init_array>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	2600      	movs	r6, #0
 8004ad0:	4d0c      	ldr	r5, [pc, #48]	@ (8004b04 <__libc_init_array+0x38>)
 8004ad2:	4c0d      	ldr	r4, [pc, #52]	@ (8004b08 <__libc_init_array+0x3c>)
 8004ad4:	1b64      	subs	r4, r4, r5
 8004ad6:	10a4      	asrs	r4, r4, #2
 8004ad8:	42a6      	cmp	r6, r4
 8004ada:	d109      	bne.n	8004af0 <__libc_init_array+0x24>
 8004adc:	f003 fb66 	bl	80081ac <_init>
 8004ae0:	2600      	movs	r6, #0
 8004ae2:	4d0a      	ldr	r5, [pc, #40]	@ (8004b0c <__libc_init_array+0x40>)
 8004ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8004b10 <__libc_init_array+0x44>)
 8004ae6:	1b64      	subs	r4, r4, r5
 8004ae8:	10a4      	asrs	r4, r4, #2
 8004aea:	42a6      	cmp	r6, r4
 8004aec:	d105      	bne.n	8004afa <__libc_init_array+0x2e>
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af4:	4798      	blx	r3
 8004af6:	3601      	adds	r6, #1
 8004af8:	e7ee      	b.n	8004ad8 <__libc_init_array+0xc>
 8004afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afe:	4798      	blx	r3
 8004b00:	3601      	adds	r6, #1
 8004b02:	e7f2      	b.n	8004aea <__libc_init_array+0x1e>
 8004b04:	080087c0 	.word	0x080087c0
 8004b08:	080087c0 	.word	0x080087c0
 8004b0c:	080087c0 	.word	0x080087c0
 8004b10:	080087c4 	.word	0x080087c4

08004b14 <__retarget_lock_init_recursive>:
 8004b14:	4770      	bx	lr

08004b16 <__retarget_lock_acquire_recursive>:
 8004b16:	4770      	bx	lr

08004b18 <__retarget_lock_release_recursive>:
 8004b18:	4770      	bx	lr

08004b1a <memchr>:
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	b2c9      	uxtb	r1, r1
 8004b20:	4402      	add	r2, r0
 8004b22:	4293      	cmp	r3, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	d101      	bne.n	8004b2c <memchr+0x12>
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e003      	b.n	8004b34 <memchr+0x1a>
 8004b2c:	7804      	ldrb	r4, [r0, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	428c      	cmp	r4, r1
 8004b32:	d1f6      	bne.n	8004b22 <memchr+0x8>
 8004b34:	bd10      	pop	{r4, pc}
	...

08004b38 <nanf>:
 8004b38:	4800      	ldr	r0, [pc, #0]	@ (8004b3c <nanf+0x4>)
 8004b3a:	4770      	bx	lr
 8004b3c:	7fc00000 	.word	0x7fc00000

08004b40 <quorem>:
 8004b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b44:	6903      	ldr	r3, [r0, #16]
 8004b46:	690c      	ldr	r4, [r1, #16]
 8004b48:	4607      	mov	r7, r0
 8004b4a:	42a3      	cmp	r3, r4
 8004b4c:	db7e      	blt.n	8004c4c <quorem+0x10c>
 8004b4e:	3c01      	subs	r4, #1
 8004b50:	00a3      	lsls	r3, r4, #2
 8004b52:	f100 0514 	add.w	r5, r0, #20
 8004b56:	f101 0814 	add.w	r8, r1, #20
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b76:	d32e      	bcc.n	8004bd6 <quorem+0x96>
 8004b78:	f04f 0a00 	mov.w	sl, #0
 8004b7c:	46c4      	mov	ip, r8
 8004b7e:	46ae      	mov	lr, r5
 8004b80:	46d3      	mov	fp, sl
 8004b82:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b86:	b298      	uxth	r0, r3
 8004b88:	fb06 a000 	mla	r0, r6, r0, sl
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	0c02      	lsrs	r2, r0, #16
 8004b90:	fb06 2303 	mla	r3, r6, r3, r2
 8004b94:	f8de 2000 	ldr.w	r2, [lr]
 8004b98:	b280      	uxth	r0, r0
 8004b9a:	b292      	uxth	r2, r2
 8004b9c:	1a12      	subs	r2, r2, r0
 8004b9e:	445a      	add	r2, fp
 8004ba0:	f8de 0000 	ldr.w	r0, [lr]
 8004ba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004bae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004bb8:	45e1      	cmp	r9, ip
 8004bba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004bbe:	f84e 2b04 	str.w	r2, [lr], #4
 8004bc2:	d2de      	bcs.n	8004b82 <quorem+0x42>
 8004bc4:	9b00      	ldr	r3, [sp, #0]
 8004bc6:	58eb      	ldr	r3, [r5, r3]
 8004bc8:	b92b      	cbnz	r3, 8004bd6 <quorem+0x96>
 8004bca:	9b01      	ldr	r3, [sp, #4]
 8004bcc:	3b04      	subs	r3, #4
 8004bce:	429d      	cmp	r5, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	d32f      	bcc.n	8004c34 <quorem+0xf4>
 8004bd4:	613c      	str	r4, [r7, #16]
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f001 f9c2 	bl	8005f60 <__mcmp>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	db25      	blt.n	8004c2c <quorem+0xec>
 8004be0:	4629      	mov	r1, r5
 8004be2:	2000      	movs	r0, #0
 8004be4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004be8:	f8d1 c000 	ldr.w	ip, [r1]
 8004bec:	fa1f fe82 	uxth.w	lr, r2
 8004bf0:	fa1f f38c 	uxth.w	r3, ip
 8004bf4:	eba3 030e 	sub.w	r3, r3, lr
 8004bf8:	4403      	add	r3, r0
 8004bfa:	0c12      	lsrs	r2, r2, #16
 8004bfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c0a:	45c1      	cmp	r9, r8
 8004c0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c10:	f841 3b04 	str.w	r3, [r1], #4
 8004c14:	d2e6      	bcs.n	8004be4 <quorem+0xa4>
 8004c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c1e:	b922      	cbnz	r2, 8004c2a <quorem+0xea>
 8004c20:	3b04      	subs	r3, #4
 8004c22:	429d      	cmp	r5, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	d30b      	bcc.n	8004c40 <quorem+0x100>
 8004c28:	613c      	str	r4, [r7, #16]
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	b003      	add	sp, #12
 8004c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	3b04      	subs	r3, #4
 8004c38:	2a00      	cmp	r2, #0
 8004c3a:	d1cb      	bne.n	8004bd4 <quorem+0x94>
 8004c3c:	3c01      	subs	r4, #1
 8004c3e:	e7c6      	b.n	8004bce <quorem+0x8e>
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	3b04      	subs	r3, #4
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	d1ef      	bne.n	8004c28 <quorem+0xe8>
 8004c48:	3c01      	subs	r4, #1
 8004c4a:	e7ea      	b.n	8004c22 <quorem+0xe2>
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e7ee      	b.n	8004c2e <quorem+0xee>

08004c50 <_dtoa_r>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	69c7      	ldr	r7, [r0, #28]
 8004c5a:	b097      	sub	sp, #92	@ 0x5c
 8004c5c:	4683      	mov	fp, r0
 8004c5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004c64:	b97f      	cbnz	r7, 8004c86 <_dtoa_r+0x36>
 8004c66:	2010      	movs	r0, #16
 8004c68:	f000 fe02 	bl	8005870 <malloc>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004c72:	b920      	cbnz	r0, 8004c7e <_dtoa_r+0x2e>
 8004c74:	21ef      	movs	r1, #239	@ 0xef
 8004c76:	4ba8      	ldr	r3, [pc, #672]	@ (8004f18 <_dtoa_r+0x2c8>)
 8004c78:	48a8      	ldr	r0, [pc, #672]	@ (8004f1c <_dtoa_r+0x2cc>)
 8004c7a:	f002 fc23 	bl	80074c4 <__assert_func>
 8004c7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c82:	6007      	str	r7, [r0, #0]
 8004c84:	60c7      	str	r7, [r0, #12]
 8004c86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c8a:	6819      	ldr	r1, [r3, #0]
 8004c8c:	b159      	cbz	r1, 8004ca6 <_dtoa_r+0x56>
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	2301      	movs	r3, #1
 8004c92:	4093      	lsls	r3, r2
 8004c94:	604a      	str	r2, [r1, #4]
 8004c96:	608b      	str	r3, [r1, #8]
 8004c98:	4658      	mov	r0, fp
 8004c9a:	f000 fedf 	bl	8005a5c <_Bfree>
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	1e2b      	subs	r3, r5, #0
 8004ca8:	bfaf      	iteee	ge
 8004caa:	2300      	movge	r3, #0
 8004cac:	2201      	movlt	r2, #1
 8004cae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004cb2:	9303      	strlt	r3, [sp, #12]
 8004cb4:	bfa8      	it	ge
 8004cb6:	6033      	strge	r3, [r6, #0]
 8004cb8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004cbc:	4b98      	ldr	r3, [pc, #608]	@ (8004f20 <_dtoa_r+0x2d0>)
 8004cbe:	bfb8      	it	lt
 8004cc0:	6032      	strlt	r2, [r6, #0]
 8004cc2:	ea33 0308 	bics.w	r3, r3, r8
 8004cc6:	d112      	bne.n	8004cee <_dtoa_r+0x9e>
 8004cc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ccc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004cd4:	4323      	orrs	r3, r4
 8004cd6:	f000 8550 	beq.w	800577a <_dtoa_r+0xb2a>
 8004cda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cdc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004f24 <_dtoa_r+0x2d4>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8552 	beq.w	800578a <_dtoa_r+0xb3a>
 8004ce6:	f10a 0303 	add.w	r3, sl, #3
 8004cea:	f000 bd4c 	b.w	8005786 <_dtoa_r+0xb36>
 8004cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cf2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f7fb fe53 	bl	80009a8 <__aeabi_dcmpeq>
 8004d02:	4607      	mov	r7, r0
 8004d04:	b158      	cbz	r0, 8004d1e <_dtoa_r+0xce>
 8004d06:	2301      	movs	r3, #1
 8004d08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d0e:	b113      	cbz	r3, 8004d16 <_dtoa_r+0xc6>
 8004d10:	4b85      	ldr	r3, [pc, #532]	@ (8004f28 <_dtoa_r+0x2d8>)
 8004d12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004f2c <_dtoa_r+0x2dc>
 8004d1a:	f000 bd36 	b.w	800578a <_dtoa_r+0xb3a>
 8004d1e:	ab14      	add	r3, sp, #80	@ 0x50
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	ab15      	add	r3, sp, #84	@ 0x54
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4658      	mov	r0, fp
 8004d28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004d2c:	f001 fa30 	bl	8006190 <__d2b>
 8004d30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004d34:	4681      	mov	r9, r0
 8004d36:	2e00      	cmp	r6, #0
 8004d38:	d077      	beq.n	8004e2a <_dtoa_r+0x1da>
 8004d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d50:	9712      	str	r7, [sp, #72]	@ 0x48
 8004d52:	4619      	mov	r1, r3
 8004d54:	2200      	movs	r2, #0
 8004d56:	4b76      	ldr	r3, [pc, #472]	@ (8004f30 <_dtoa_r+0x2e0>)
 8004d58:	f7fb fa06 	bl	8000168 <__aeabi_dsub>
 8004d5c:	a368      	add	r3, pc, #416	@ (adr r3, 8004f00 <_dtoa_r+0x2b0>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb fbb9 	bl	80004d8 <__aeabi_dmul>
 8004d66:	a368      	add	r3, pc, #416	@ (adr r3, 8004f08 <_dtoa_r+0x2b8>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb f9fe 	bl	800016c <__adddf3>
 8004d70:	4604      	mov	r4, r0
 8004d72:	4630      	mov	r0, r6
 8004d74:	460d      	mov	r5, r1
 8004d76:	f7fb fb45 	bl	8000404 <__aeabi_i2d>
 8004d7a:	a365      	add	r3, pc, #404	@ (adr r3, 8004f10 <_dtoa_r+0x2c0>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fbaa 	bl	80004d8 <__aeabi_dmul>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4620      	mov	r0, r4
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f7fb f9ee 	bl	800016c <__adddf3>
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	f7fb fe50 	bl	8000a38 <__aeabi_d2iz>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4607      	mov	r7, r0
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7fb fe0b 	bl	80009bc <__aeabi_dcmplt>
 8004da6:	b140      	cbz	r0, 8004dba <_dtoa_r+0x16a>
 8004da8:	4638      	mov	r0, r7
 8004daa:	f7fb fb2b 	bl	8000404 <__aeabi_i2d>
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	f7fb fdf9 	bl	80009a8 <__aeabi_dcmpeq>
 8004db6:	b900      	cbnz	r0, 8004dba <_dtoa_r+0x16a>
 8004db8:	3f01      	subs	r7, #1
 8004dba:	2f16      	cmp	r7, #22
 8004dbc:	d853      	bhi.n	8004e66 <_dtoa_r+0x216>
 8004dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f34 <_dtoa_r+0x2e4>)
 8004dc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f7fb fdf6 	bl	80009bc <__aeabi_dcmplt>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d04a      	beq.n	8004e6a <_dtoa_r+0x21a>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	3f01      	subs	r7, #1
 8004dd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004dda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ddc:	1b9b      	subs	r3, r3, r6
 8004dde:	1e5a      	subs	r2, r3, #1
 8004de0:	bf46      	itte	mi
 8004de2:	f1c3 0801 	rsbmi	r8, r3, #1
 8004de6:	2300      	movmi	r3, #0
 8004de8:	f04f 0800 	movpl.w	r8, #0
 8004dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dee:	bf48      	it	mi
 8004df0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004df2:	2f00      	cmp	r7, #0
 8004df4:	db3b      	blt.n	8004e6e <_dtoa_r+0x21e>
 8004df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df8:	970e      	str	r7, [sp, #56]	@ 0x38
 8004dfa:	443b      	add	r3, r7
 8004dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dfe:	2300      	movs	r3, #0
 8004e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e04:	2b09      	cmp	r3, #9
 8004e06:	d866      	bhi.n	8004ed6 <_dtoa_r+0x286>
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	bfc4      	itt	gt
 8004e0c:	3b04      	subgt	r3, #4
 8004e0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004e10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e12:	bfc8      	it	gt
 8004e14:	2400      	movgt	r4, #0
 8004e16:	f1a3 0302 	sub.w	r3, r3, #2
 8004e1a:	bfd8      	it	le
 8004e1c:	2401      	movle	r4, #1
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d864      	bhi.n	8004eec <_dtoa_r+0x29c>
 8004e22:	e8df f003 	tbb	[pc, r3]
 8004e26:	382b      	.short	0x382b
 8004e28:	5636      	.short	0x5636
 8004e2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004e2e:	441e      	add	r6, r3
 8004e30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	bfc1      	itttt	gt
 8004e38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004e3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004e40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004e44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e48:	bfd6      	itet	le
 8004e4a:	f1c3 0320 	rsble	r3, r3, #32
 8004e4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004e52:	fa04 f003 	lslle.w	r0, r4, r3
 8004e56:	f7fb fac5 	bl	80003e4 <__aeabi_ui2d>
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e60:	3e01      	subs	r6, #1
 8004e62:	9212      	str	r2, [sp, #72]	@ 0x48
 8004e64:	e775      	b.n	8004d52 <_dtoa_r+0x102>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e7b6      	b.n	8004dd8 <_dtoa_r+0x188>
 8004e6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e6c:	e7b5      	b.n	8004dda <_dtoa_r+0x18a>
 8004e6e:	427b      	negs	r3, r7
 8004e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e72:	2300      	movs	r3, #0
 8004e74:	eba8 0807 	sub.w	r8, r8, r7
 8004e78:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e7a:	e7c2      	b.n	8004e02 <_dtoa_r+0x1b2>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	dc35      	bgt.n	8004ef2 <_dtoa_r+0x2a2>
 8004e86:	2301      	movs	r3, #1
 8004e88:	461a      	mov	r2, r3
 8004e8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e8e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004e90:	e00b      	b.n	8004eaa <_dtoa_r+0x25a>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e7f3      	b.n	8004e7e <_dtoa_r+0x22e>
 8004e96:	2300      	movs	r3, #0
 8004e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	9308      	str	r3, [sp, #32]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	9307      	str	r3, [sp, #28]
 8004ea6:	bfb8      	it	lt
 8004ea8:	2301      	movlt	r3, #1
 8004eaa:	2100      	movs	r1, #0
 8004eac:	2204      	movs	r2, #4
 8004eae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004eb2:	f102 0514 	add.w	r5, r2, #20
 8004eb6:	429d      	cmp	r5, r3
 8004eb8:	d91f      	bls.n	8004efa <_dtoa_r+0x2aa>
 8004eba:	6041      	str	r1, [r0, #4]
 8004ebc:	4658      	mov	r0, fp
 8004ebe:	f000 fd8d 	bl	80059dc <_Balloc>
 8004ec2:	4682      	mov	sl, r0
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d139      	bne.n	8004f3c <_dtoa_r+0x2ec>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ece:	4b1a      	ldr	r3, [pc, #104]	@ (8004f38 <_dtoa_r+0x2e8>)
 8004ed0:	e6d2      	b.n	8004c78 <_dtoa_r+0x28>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e7e0      	b.n	8004e98 <_dtoa_r+0x248>
 8004ed6:	2401      	movs	r4, #1
 8004ed8:	2300      	movs	r3, #0
 8004eda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004edc:	9320      	str	r3, [sp, #128]	@ 0x80
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ee8:	2312      	movs	r3, #18
 8004eea:	e7d0      	b.n	8004e8e <_dtoa_r+0x23e>
 8004eec:	2301      	movs	r3, #1
 8004eee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ef0:	e7f5      	b.n	8004ede <_dtoa_r+0x28e>
 8004ef2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ef4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ef8:	e7d7      	b.n	8004eaa <_dtoa_r+0x25a>
 8004efa:	3101      	adds	r1, #1
 8004efc:	0052      	lsls	r2, r2, #1
 8004efe:	e7d8      	b.n	8004eb2 <_dtoa_r+0x262>
 8004f00:	636f4361 	.word	0x636f4361
 8004f04:	3fd287a7 	.word	0x3fd287a7
 8004f08:	8b60c8b3 	.word	0x8b60c8b3
 8004f0c:	3fc68a28 	.word	0x3fc68a28
 8004f10:	509f79fb 	.word	0x509f79fb
 8004f14:	3fd34413 	.word	0x3fd34413
 8004f18:	080083cc 	.word	0x080083cc
 8004f1c:	080083e3 	.word	0x080083e3
 8004f20:	7ff00000 	.word	0x7ff00000
 8004f24:	080083c8 	.word	0x080083c8
 8004f28:	08008397 	.word	0x08008397
 8004f2c:	08008396 	.word	0x08008396
 8004f30:	3ff80000 	.word	0x3ff80000
 8004f34:	080084e0 	.word	0x080084e0
 8004f38:	0800843b 	.word	0x0800843b
 8004f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f40:	6018      	str	r0, [r3, #0]
 8004f42:	9b07      	ldr	r3, [sp, #28]
 8004f44:	2b0e      	cmp	r3, #14
 8004f46:	f200 80a4 	bhi.w	8005092 <_dtoa_r+0x442>
 8004f4a:	2c00      	cmp	r4, #0
 8004f4c:	f000 80a1 	beq.w	8005092 <_dtoa_r+0x442>
 8004f50:	2f00      	cmp	r7, #0
 8004f52:	dd33      	ble.n	8004fbc <_dtoa_r+0x36c>
 8004f54:	4b86      	ldr	r3, [pc, #536]	@ (8005170 <_dtoa_r+0x520>)
 8004f56:	f007 020f 	and.w	r2, r7, #15
 8004f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f5e:	05f8      	lsls	r0, r7, #23
 8004f60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004f6c:	d516      	bpl.n	8004f9c <_dtoa_r+0x34c>
 8004f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f72:	4b80      	ldr	r3, [pc, #512]	@ (8005174 <_dtoa_r+0x524>)
 8004f74:	2603      	movs	r6, #3
 8004f76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f7a:	f7fb fbd7 	bl	800072c <__aeabi_ddiv>
 8004f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f82:	f004 040f 	and.w	r4, r4, #15
 8004f86:	4d7b      	ldr	r5, [pc, #492]	@ (8005174 <_dtoa_r+0x524>)
 8004f88:	b954      	cbnz	r4, 8004fa0 <_dtoa_r+0x350>
 8004f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f92:	f7fb fbcb 	bl	800072c <__aeabi_ddiv>
 8004f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9a:	e028      	b.n	8004fee <_dtoa_r+0x39e>
 8004f9c:	2602      	movs	r6, #2
 8004f9e:	e7f2      	b.n	8004f86 <_dtoa_r+0x336>
 8004fa0:	07e1      	lsls	r1, r4, #31
 8004fa2:	d508      	bpl.n	8004fb6 <_dtoa_r+0x366>
 8004fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fac:	f7fb fa94 	bl	80004d8 <__aeabi_dmul>
 8004fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	1064      	asrs	r4, r4, #1
 8004fb8:	3508      	adds	r5, #8
 8004fba:	e7e5      	b.n	8004f88 <_dtoa_r+0x338>
 8004fbc:	f000 80d2 	beq.w	8005164 <_dtoa_r+0x514>
 8004fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fc4:	427c      	negs	r4, r7
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <_dtoa_r+0x520>)
 8004fc8:	f004 020f 	and.w	r2, r4, #15
 8004fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb fa80 	bl	80004d8 <__aeabi_dmul>
 8004fd8:	2602      	movs	r6, #2
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe0:	4d64      	ldr	r5, [pc, #400]	@ (8005174 <_dtoa_r+0x524>)
 8004fe2:	1124      	asrs	r4, r4, #4
 8004fe4:	2c00      	cmp	r4, #0
 8004fe6:	f040 80b2 	bne.w	800514e <_dtoa_r+0x4fe>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1d3      	bne.n	8004f96 <_dtoa_r+0x346>
 8004fee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ff2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80b7 	beq.w	8005168 <_dtoa_r+0x518>
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	4629      	mov	r1, r5
 8005000:	4b5d      	ldr	r3, [pc, #372]	@ (8005178 <_dtoa_r+0x528>)
 8005002:	f7fb fcdb 	bl	80009bc <__aeabi_dcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	f000 80ae 	beq.w	8005168 <_dtoa_r+0x518>
 800500c:	9b07      	ldr	r3, [sp, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80aa 	beq.w	8005168 <_dtoa_r+0x518>
 8005014:	9b08      	ldr	r3, [sp, #32]
 8005016:	2b00      	cmp	r3, #0
 8005018:	dd37      	ble.n	800508a <_dtoa_r+0x43a>
 800501a:	1e7b      	subs	r3, r7, #1
 800501c:	4620      	mov	r0, r4
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	2200      	movs	r2, #0
 8005022:	4629      	mov	r1, r5
 8005024:	4b55      	ldr	r3, [pc, #340]	@ (800517c <_dtoa_r+0x52c>)
 8005026:	f7fb fa57 	bl	80004d8 <__aeabi_dmul>
 800502a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800502e:	9c08      	ldr	r4, [sp, #32]
 8005030:	3601      	adds	r6, #1
 8005032:	4630      	mov	r0, r6
 8005034:	f7fb f9e6 	bl	8000404 <__aeabi_i2d>
 8005038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800503c:	f7fb fa4c 	bl	80004d8 <__aeabi_dmul>
 8005040:	2200      	movs	r2, #0
 8005042:	4b4f      	ldr	r3, [pc, #316]	@ (8005180 <_dtoa_r+0x530>)
 8005044:	f7fb f892 	bl	800016c <__adddf3>
 8005048:	4605      	mov	r5, r0
 800504a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800504e:	2c00      	cmp	r4, #0
 8005050:	f040 809a 	bne.w	8005188 <_dtoa_r+0x538>
 8005054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	4b4a      	ldr	r3, [pc, #296]	@ (8005184 <_dtoa_r+0x534>)
 800505c:	f7fb f884 	bl	8000168 <__aeabi_dsub>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005068:	462a      	mov	r2, r5
 800506a:	4633      	mov	r3, r6
 800506c:	f7fb fcc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005070:	2800      	cmp	r0, #0
 8005072:	f040 828e 	bne.w	8005592 <_dtoa_r+0x942>
 8005076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800507a:	462a      	mov	r2, r5
 800507c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005080:	f7fb fc9c 	bl	80009bc <__aeabi_dcmplt>
 8005084:	2800      	cmp	r0, #0
 8005086:	f040 8127 	bne.w	80052d8 <_dtoa_r+0x688>
 800508a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800508e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005092:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005094:	2b00      	cmp	r3, #0
 8005096:	f2c0 8163 	blt.w	8005360 <_dtoa_r+0x710>
 800509a:	2f0e      	cmp	r7, #14
 800509c:	f300 8160 	bgt.w	8005360 <_dtoa_r+0x710>
 80050a0:	4b33      	ldr	r3, [pc, #204]	@ (8005170 <_dtoa_r+0x520>)
 80050a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	da03      	bge.n	80050bc <_dtoa_r+0x46c>
 80050b4:	9b07      	ldr	r3, [sp, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f340 8100 	ble.w	80052bc <_dtoa_r+0x66c>
 80050bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80050c0:	4656      	mov	r6, sl
 80050c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c6:	4620      	mov	r0, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7fb fb2f 	bl	800072c <__aeabi_ddiv>
 80050ce:	f7fb fcb3 	bl	8000a38 <__aeabi_d2iz>
 80050d2:	4680      	mov	r8, r0
 80050d4:	f7fb f996 	bl	8000404 <__aeabi_i2d>
 80050d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050dc:	f7fb f9fc 	bl	80004d8 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7fb f83e 	bl	8000168 <__aeabi_dsub>
 80050ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80050f0:	9d07      	ldr	r5, [sp, #28]
 80050f2:	f806 4b01 	strb.w	r4, [r6], #1
 80050f6:	eba6 040a 	sub.w	r4, r6, sl
 80050fa:	42a5      	cmp	r5, r4
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	f040 8116 	bne.w	8005330 <_dtoa_r+0x6e0>
 8005104:	f7fb f832 	bl	800016c <__adddf3>
 8005108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800510c:	4604      	mov	r4, r0
 800510e:	460d      	mov	r5, r1
 8005110:	f7fb fc72 	bl	80009f8 <__aeabi_dcmpgt>
 8005114:	2800      	cmp	r0, #0
 8005116:	f040 80f8 	bne.w	800530a <_dtoa_r+0x6ba>
 800511a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800511e:	4620      	mov	r0, r4
 8005120:	4629      	mov	r1, r5
 8005122:	f7fb fc41 	bl	80009a8 <__aeabi_dcmpeq>
 8005126:	b118      	cbz	r0, 8005130 <_dtoa_r+0x4e0>
 8005128:	f018 0f01 	tst.w	r8, #1
 800512c:	f040 80ed 	bne.w	800530a <_dtoa_r+0x6ba>
 8005130:	4649      	mov	r1, r9
 8005132:	4658      	mov	r0, fp
 8005134:	f000 fc92 	bl	8005a5c <_Bfree>
 8005138:	2300      	movs	r3, #0
 800513a:	7033      	strb	r3, [r6, #0]
 800513c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800513e:	3701      	adds	r7, #1
 8005140:	601f      	str	r7, [r3, #0]
 8005142:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8320 	beq.w	800578a <_dtoa_r+0xb3a>
 800514a:	601e      	str	r6, [r3, #0]
 800514c:	e31d      	b.n	800578a <_dtoa_r+0xb3a>
 800514e:	07e2      	lsls	r2, r4, #31
 8005150:	d505      	bpl.n	800515e <_dtoa_r+0x50e>
 8005152:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005156:	f7fb f9bf 	bl	80004d8 <__aeabi_dmul>
 800515a:	2301      	movs	r3, #1
 800515c:	3601      	adds	r6, #1
 800515e:	1064      	asrs	r4, r4, #1
 8005160:	3508      	adds	r5, #8
 8005162:	e73f      	b.n	8004fe4 <_dtoa_r+0x394>
 8005164:	2602      	movs	r6, #2
 8005166:	e742      	b.n	8004fee <_dtoa_r+0x39e>
 8005168:	9c07      	ldr	r4, [sp, #28]
 800516a:	9704      	str	r7, [sp, #16]
 800516c:	e761      	b.n	8005032 <_dtoa_r+0x3e2>
 800516e:	bf00      	nop
 8005170:	080084e0 	.word	0x080084e0
 8005174:	080084b8 	.word	0x080084b8
 8005178:	3ff00000 	.word	0x3ff00000
 800517c:	40240000 	.word	0x40240000
 8005180:	401c0000 	.word	0x401c0000
 8005184:	40140000 	.word	0x40140000
 8005188:	4b70      	ldr	r3, [pc, #448]	@ (800534c <_dtoa_r+0x6fc>)
 800518a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800518c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005194:	4454      	add	r4, sl
 8005196:	2900      	cmp	r1, #0
 8005198:	d045      	beq.n	8005226 <_dtoa_r+0x5d6>
 800519a:	2000      	movs	r0, #0
 800519c:	496c      	ldr	r1, [pc, #432]	@ (8005350 <_dtoa_r+0x700>)
 800519e:	f7fb fac5 	bl	800072c <__aeabi_ddiv>
 80051a2:	4633      	mov	r3, r6
 80051a4:	462a      	mov	r2, r5
 80051a6:	f7fa ffdf 	bl	8000168 <__aeabi_dsub>
 80051aa:	4656      	mov	r6, sl
 80051ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b4:	f7fb fc40 	bl	8000a38 <__aeabi_d2iz>
 80051b8:	4605      	mov	r5, r0
 80051ba:	f7fb f923 	bl	8000404 <__aeabi_i2d>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c6:	f7fa ffcf 	bl	8000168 <__aeabi_dsub>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	3530      	adds	r5, #48	@ 0x30
 80051d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051d8:	f806 5b01 	strb.w	r5, [r6], #1
 80051dc:	f7fb fbee 	bl	80009bc <__aeabi_dcmplt>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d163      	bne.n	80052ac <_dtoa_r+0x65c>
 80051e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051e8:	2000      	movs	r0, #0
 80051ea:	495a      	ldr	r1, [pc, #360]	@ (8005354 <_dtoa_r+0x704>)
 80051ec:	f7fa ffbc 	bl	8000168 <__aeabi_dsub>
 80051f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051f4:	f7fb fbe2 	bl	80009bc <__aeabi_dcmplt>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f040 8087 	bne.w	800530c <_dtoa_r+0x6bc>
 80051fe:	42a6      	cmp	r6, r4
 8005200:	f43f af43 	beq.w	800508a <_dtoa_r+0x43a>
 8005204:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005208:	2200      	movs	r2, #0
 800520a:	4b53      	ldr	r3, [pc, #332]	@ (8005358 <_dtoa_r+0x708>)
 800520c:	f7fb f964 	bl	80004d8 <__aeabi_dmul>
 8005210:	2200      	movs	r2, #0
 8005212:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800521a:	4b4f      	ldr	r3, [pc, #316]	@ (8005358 <_dtoa_r+0x708>)
 800521c:	f7fb f95c 	bl	80004d8 <__aeabi_dmul>
 8005220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005224:	e7c4      	b.n	80051b0 <_dtoa_r+0x560>
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	f7fb f955 	bl	80004d8 <__aeabi_dmul>
 800522e:	4656      	mov	r6, sl
 8005230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005234:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800523a:	f7fb fbfd 	bl	8000a38 <__aeabi_d2iz>
 800523e:	4605      	mov	r5, r0
 8005240:	f7fb f8e0 	bl	8000404 <__aeabi_i2d>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800524c:	f7fa ff8c 	bl	8000168 <__aeabi_dsub>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	3530      	adds	r5, #48	@ 0x30
 8005256:	f806 5b01 	strb.w	r5, [r6], #1
 800525a:	42a6      	cmp	r6, r4
 800525c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	d124      	bne.n	80052b0 <_dtoa_r+0x660>
 8005266:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <_dtoa_r+0x700>)
 800526c:	f7fa ff7e 	bl	800016c <__adddf3>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005278:	f7fb fbbe 	bl	80009f8 <__aeabi_dcmpgt>
 800527c:	2800      	cmp	r0, #0
 800527e:	d145      	bne.n	800530c <_dtoa_r+0x6bc>
 8005280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005284:	2000      	movs	r0, #0
 8005286:	4932      	ldr	r1, [pc, #200]	@ (8005350 <_dtoa_r+0x700>)
 8005288:	f7fa ff6e 	bl	8000168 <__aeabi_dsub>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005294:	f7fb fb92 	bl	80009bc <__aeabi_dcmplt>
 8005298:	2800      	cmp	r0, #0
 800529a:	f43f aef6 	beq.w	800508a <_dtoa_r+0x43a>
 800529e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80052a0:	1e73      	subs	r3, r6, #1
 80052a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80052a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80052a8:	2b30      	cmp	r3, #48	@ 0x30
 80052aa:	d0f8      	beq.n	800529e <_dtoa_r+0x64e>
 80052ac:	9f04      	ldr	r7, [sp, #16]
 80052ae:	e73f      	b.n	8005130 <_dtoa_r+0x4e0>
 80052b0:	4b29      	ldr	r3, [pc, #164]	@ (8005358 <_dtoa_r+0x708>)
 80052b2:	f7fb f911 	bl	80004d8 <__aeabi_dmul>
 80052b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ba:	e7bc      	b.n	8005236 <_dtoa_r+0x5e6>
 80052bc:	d10c      	bne.n	80052d8 <_dtoa_r+0x688>
 80052be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c2:	2200      	movs	r2, #0
 80052c4:	4b25      	ldr	r3, [pc, #148]	@ (800535c <_dtoa_r+0x70c>)
 80052c6:	f7fb f907 	bl	80004d8 <__aeabi_dmul>
 80052ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ce:	f7fb fb89 	bl	80009e4 <__aeabi_dcmpge>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	f000 815b 	beq.w	800558e <_dtoa_r+0x93e>
 80052d8:	2400      	movs	r4, #0
 80052da:	4625      	mov	r5, r4
 80052dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052de:	4656      	mov	r6, sl
 80052e0:	43db      	mvns	r3, r3
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	2700      	movs	r7, #0
 80052e6:	4621      	mov	r1, r4
 80052e8:	4658      	mov	r0, fp
 80052ea:	f000 fbb7 	bl	8005a5c <_Bfree>
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	d0dc      	beq.n	80052ac <_dtoa_r+0x65c>
 80052f2:	b12f      	cbz	r7, 8005300 <_dtoa_r+0x6b0>
 80052f4:	42af      	cmp	r7, r5
 80052f6:	d003      	beq.n	8005300 <_dtoa_r+0x6b0>
 80052f8:	4639      	mov	r1, r7
 80052fa:	4658      	mov	r0, fp
 80052fc:	f000 fbae 	bl	8005a5c <_Bfree>
 8005300:	4629      	mov	r1, r5
 8005302:	4658      	mov	r0, fp
 8005304:	f000 fbaa 	bl	8005a5c <_Bfree>
 8005308:	e7d0      	b.n	80052ac <_dtoa_r+0x65c>
 800530a:	9704      	str	r7, [sp, #16]
 800530c:	4633      	mov	r3, r6
 800530e:	461e      	mov	r6, r3
 8005310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005314:	2a39      	cmp	r2, #57	@ 0x39
 8005316:	d107      	bne.n	8005328 <_dtoa_r+0x6d8>
 8005318:	459a      	cmp	sl, r3
 800531a:	d1f8      	bne.n	800530e <_dtoa_r+0x6be>
 800531c:	9a04      	ldr	r2, [sp, #16]
 800531e:	3201      	adds	r2, #1
 8005320:	9204      	str	r2, [sp, #16]
 8005322:	2230      	movs	r2, #48	@ 0x30
 8005324:	f88a 2000 	strb.w	r2, [sl]
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	3201      	adds	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e7bd      	b.n	80052ac <_dtoa_r+0x65c>
 8005330:	2200      	movs	r2, #0
 8005332:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <_dtoa_r+0x708>)
 8005334:	f7fb f8d0 	bl	80004d8 <__aeabi_dmul>
 8005338:	2200      	movs	r2, #0
 800533a:	2300      	movs	r3, #0
 800533c:	4604      	mov	r4, r0
 800533e:	460d      	mov	r5, r1
 8005340:	f7fb fb32 	bl	80009a8 <__aeabi_dcmpeq>
 8005344:	2800      	cmp	r0, #0
 8005346:	f43f aebc 	beq.w	80050c2 <_dtoa_r+0x472>
 800534a:	e6f1      	b.n	8005130 <_dtoa_r+0x4e0>
 800534c:	080084e0 	.word	0x080084e0
 8005350:	3fe00000 	.word	0x3fe00000
 8005354:	3ff00000 	.word	0x3ff00000
 8005358:	40240000 	.word	0x40240000
 800535c:	40140000 	.word	0x40140000
 8005360:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005362:	2a00      	cmp	r2, #0
 8005364:	f000 80db 	beq.w	800551e <_dtoa_r+0x8ce>
 8005368:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800536a:	2a01      	cmp	r2, #1
 800536c:	f300 80bf 	bgt.w	80054ee <_dtoa_r+0x89e>
 8005370:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005372:	2a00      	cmp	r2, #0
 8005374:	f000 80b7 	beq.w	80054e6 <_dtoa_r+0x896>
 8005378:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800537c:	4646      	mov	r6, r8
 800537e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005382:	2101      	movs	r1, #1
 8005384:	441a      	add	r2, r3
 8005386:	4658      	mov	r0, fp
 8005388:	4498      	add	r8, r3
 800538a:	9209      	str	r2, [sp, #36]	@ 0x24
 800538c:	f000 fc64 	bl	8005c58 <__i2b>
 8005390:	4605      	mov	r5, r0
 8005392:	b15e      	cbz	r6, 80053ac <_dtoa_r+0x75c>
 8005394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	dd08      	ble.n	80053ac <_dtoa_r+0x75c>
 800539a:	42b3      	cmp	r3, r6
 800539c:	bfa8      	it	ge
 800539e:	4633      	movge	r3, r6
 80053a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053a2:	eba8 0803 	sub.w	r8, r8, r3
 80053a6:	1af6      	subs	r6, r6, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053ae:	b1f3      	cbz	r3, 80053ee <_dtoa_r+0x79e>
 80053b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80b7 	beq.w	8005526 <_dtoa_r+0x8d6>
 80053b8:	b18c      	cbz	r4, 80053de <_dtoa_r+0x78e>
 80053ba:	4629      	mov	r1, r5
 80053bc:	4622      	mov	r2, r4
 80053be:	4658      	mov	r0, fp
 80053c0:	f000 fd08 	bl	8005dd4 <__pow5mult>
 80053c4:	464a      	mov	r2, r9
 80053c6:	4601      	mov	r1, r0
 80053c8:	4605      	mov	r5, r0
 80053ca:	4658      	mov	r0, fp
 80053cc:	f000 fc5a 	bl	8005c84 <__multiply>
 80053d0:	4649      	mov	r1, r9
 80053d2:	9004      	str	r0, [sp, #16]
 80053d4:	4658      	mov	r0, fp
 80053d6:	f000 fb41 	bl	8005a5c <_Bfree>
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	4699      	mov	r9, r3
 80053de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053e0:	1b1a      	subs	r2, r3, r4
 80053e2:	d004      	beq.n	80053ee <_dtoa_r+0x79e>
 80053e4:	4649      	mov	r1, r9
 80053e6:	4658      	mov	r0, fp
 80053e8:	f000 fcf4 	bl	8005dd4 <__pow5mult>
 80053ec:	4681      	mov	r9, r0
 80053ee:	2101      	movs	r1, #1
 80053f0:	4658      	mov	r0, fp
 80053f2:	f000 fc31 	bl	8005c58 <__i2b>
 80053f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053f8:	4604      	mov	r4, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 81c9 	beq.w	8005792 <_dtoa_r+0xb42>
 8005400:	461a      	mov	r2, r3
 8005402:	4601      	mov	r1, r0
 8005404:	4658      	mov	r0, fp
 8005406:	f000 fce5 	bl	8005dd4 <__pow5mult>
 800540a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800540c:	4604      	mov	r4, r0
 800540e:	2b01      	cmp	r3, #1
 8005410:	f300 808f 	bgt.w	8005532 <_dtoa_r+0x8e2>
 8005414:	9b02      	ldr	r3, [sp, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f040 8087 	bne.w	800552a <_dtoa_r+0x8da>
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 8083 	bne.w	800552e <_dtoa_r+0x8de>
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800542e:	0d1b      	lsrs	r3, r3, #20
 8005430:	051b      	lsls	r3, r3, #20
 8005432:	b12b      	cbz	r3, 8005440 <_dtoa_r+0x7f0>
 8005434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005436:	f108 0801 	add.w	r8, r8, #1
 800543a:	3301      	adds	r3, #1
 800543c:	9309      	str	r3, [sp, #36]	@ 0x24
 800543e:	2301      	movs	r3, #1
 8005440:	930a      	str	r3, [sp, #40]	@ 0x28
 8005442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 81aa 	beq.w	800579e <_dtoa_r+0xb4e>
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005450:	6918      	ldr	r0, [r3, #16]
 8005452:	f000 fbb5 	bl	8005bc0 <__hi0bits>
 8005456:	f1c0 0020 	rsb	r0, r0, #32
 800545a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545c:	4418      	add	r0, r3
 800545e:	f010 001f 	ands.w	r0, r0, #31
 8005462:	d071      	beq.n	8005548 <_dtoa_r+0x8f8>
 8005464:	f1c0 0320 	rsb	r3, r0, #32
 8005468:	2b04      	cmp	r3, #4
 800546a:	dd65      	ble.n	8005538 <_dtoa_r+0x8e8>
 800546c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546e:	f1c0 001c 	rsb	r0, r0, #28
 8005472:	4403      	add	r3, r0
 8005474:	4480      	add	r8, r0
 8005476:	4406      	add	r6, r0
 8005478:	9309      	str	r3, [sp, #36]	@ 0x24
 800547a:	f1b8 0f00 	cmp.w	r8, #0
 800547e:	dd05      	ble.n	800548c <_dtoa_r+0x83c>
 8005480:	4649      	mov	r1, r9
 8005482:	4642      	mov	r2, r8
 8005484:	4658      	mov	r0, fp
 8005486:	f000 fcff 	bl	8005e88 <__lshift>
 800548a:	4681      	mov	r9, r0
 800548c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	dd05      	ble.n	800549e <_dtoa_r+0x84e>
 8005492:	4621      	mov	r1, r4
 8005494:	461a      	mov	r2, r3
 8005496:	4658      	mov	r0, fp
 8005498:	f000 fcf6 	bl	8005e88 <__lshift>
 800549c:	4604      	mov	r4, r0
 800549e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d053      	beq.n	800554c <_dtoa_r+0x8fc>
 80054a4:	4621      	mov	r1, r4
 80054a6:	4648      	mov	r0, r9
 80054a8:	f000 fd5a 	bl	8005f60 <__mcmp>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	da4d      	bge.n	800554c <_dtoa_r+0x8fc>
 80054b0:	1e7b      	subs	r3, r7, #1
 80054b2:	4649      	mov	r1, r9
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	220a      	movs	r2, #10
 80054b8:	2300      	movs	r3, #0
 80054ba:	4658      	mov	r0, fp
 80054bc:	f000 faf0 	bl	8005aa0 <__multadd>
 80054c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054c2:	4681      	mov	r9, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 816c 	beq.w	80057a2 <_dtoa_r+0xb52>
 80054ca:	2300      	movs	r3, #0
 80054cc:	4629      	mov	r1, r5
 80054ce:	220a      	movs	r2, #10
 80054d0:	4658      	mov	r0, fp
 80054d2:	f000 fae5 	bl	8005aa0 <__multadd>
 80054d6:	9b08      	ldr	r3, [sp, #32]
 80054d8:	4605      	mov	r5, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	dc61      	bgt.n	80055a2 <_dtoa_r+0x952>
 80054de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	dc3b      	bgt.n	800555c <_dtoa_r+0x90c>
 80054e4:	e05d      	b.n	80055a2 <_dtoa_r+0x952>
 80054e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80054ec:	e746      	b.n	800537c <_dtoa_r+0x72c>
 80054ee:	9b07      	ldr	r3, [sp, #28]
 80054f0:	1e5c      	subs	r4, r3, #1
 80054f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	bfbf      	itttt	lt
 80054f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80054fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80054fc:	1ae3      	sublt	r3, r4, r3
 80054fe:	18d2      	addlt	r2, r2, r3
 8005500:	bfa8      	it	ge
 8005502:	1b1c      	subge	r4, r3, r4
 8005504:	9b07      	ldr	r3, [sp, #28]
 8005506:	bfbe      	ittt	lt
 8005508:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800550a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800550c:	2400      	movlt	r4, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	bfb5      	itete	lt
 8005512:	eba8 0603 	sublt.w	r6, r8, r3
 8005516:	4646      	movge	r6, r8
 8005518:	2300      	movlt	r3, #0
 800551a:	9b07      	ldrge	r3, [sp, #28]
 800551c:	e730      	b.n	8005380 <_dtoa_r+0x730>
 800551e:	4646      	mov	r6, r8
 8005520:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005522:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005524:	e735      	b.n	8005392 <_dtoa_r+0x742>
 8005526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005528:	e75c      	b.n	80053e4 <_dtoa_r+0x794>
 800552a:	2300      	movs	r3, #0
 800552c:	e788      	b.n	8005440 <_dtoa_r+0x7f0>
 800552e:	9b02      	ldr	r3, [sp, #8]
 8005530:	e786      	b.n	8005440 <_dtoa_r+0x7f0>
 8005532:	2300      	movs	r3, #0
 8005534:	930a      	str	r3, [sp, #40]	@ 0x28
 8005536:	e788      	b.n	800544a <_dtoa_r+0x7fa>
 8005538:	d09f      	beq.n	800547a <_dtoa_r+0x82a>
 800553a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800553c:	331c      	adds	r3, #28
 800553e:	441a      	add	r2, r3
 8005540:	4498      	add	r8, r3
 8005542:	441e      	add	r6, r3
 8005544:	9209      	str	r2, [sp, #36]	@ 0x24
 8005546:	e798      	b.n	800547a <_dtoa_r+0x82a>
 8005548:	4603      	mov	r3, r0
 800554a:	e7f6      	b.n	800553a <_dtoa_r+0x8ea>
 800554c:	9b07      	ldr	r3, [sp, #28]
 800554e:	9704      	str	r7, [sp, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	dc20      	bgt.n	8005596 <_dtoa_r+0x946>
 8005554:	9308      	str	r3, [sp, #32]
 8005556:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005558:	2b02      	cmp	r3, #2
 800555a:	dd1e      	ble.n	800559a <_dtoa_r+0x94a>
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f47f aebc 	bne.w	80052dc <_dtoa_r+0x68c>
 8005564:	4621      	mov	r1, r4
 8005566:	2205      	movs	r2, #5
 8005568:	4658      	mov	r0, fp
 800556a:	f000 fa99 	bl	8005aa0 <__multadd>
 800556e:	4601      	mov	r1, r0
 8005570:	4604      	mov	r4, r0
 8005572:	4648      	mov	r0, r9
 8005574:	f000 fcf4 	bl	8005f60 <__mcmp>
 8005578:	2800      	cmp	r0, #0
 800557a:	f77f aeaf 	ble.w	80052dc <_dtoa_r+0x68c>
 800557e:	2331      	movs	r3, #49	@ 0x31
 8005580:	4656      	mov	r6, sl
 8005582:	f806 3b01 	strb.w	r3, [r6], #1
 8005586:	9b04      	ldr	r3, [sp, #16]
 8005588:	3301      	adds	r3, #1
 800558a:	9304      	str	r3, [sp, #16]
 800558c:	e6aa      	b.n	80052e4 <_dtoa_r+0x694>
 800558e:	9c07      	ldr	r4, [sp, #28]
 8005590:	9704      	str	r7, [sp, #16]
 8005592:	4625      	mov	r5, r4
 8005594:	e7f3      	b.n	800557e <_dtoa_r+0x92e>
 8005596:	9b07      	ldr	r3, [sp, #28]
 8005598:	9308      	str	r3, [sp, #32]
 800559a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8104 	beq.w	80057aa <_dtoa_r+0xb5a>
 80055a2:	2e00      	cmp	r6, #0
 80055a4:	dd05      	ble.n	80055b2 <_dtoa_r+0x962>
 80055a6:	4629      	mov	r1, r5
 80055a8:	4632      	mov	r2, r6
 80055aa:	4658      	mov	r0, fp
 80055ac:	f000 fc6c 	bl	8005e88 <__lshift>
 80055b0:	4605      	mov	r5, r0
 80055b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d05a      	beq.n	800566e <_dtoa_r+0xa1e>
 80055b8:	4658      	mov	r0, fp
 80055ba:	6869      	ldr	r1, [r5, #4]
 80055bc:	f000 fa0e 	bl	80059dc <_Balloc>
 80055c0:	4606      	mov	r6, r0
 80055c2:	b928      	cbnz	r0, 80055d0 <_dtoa_r+0x980>
 80055c4:	4602      	mov	r2, r0
 80055c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80055ca:	4b83      	ldr	r3, [pc, #524]	@ (80057d8 <_dtoa_r+0xb88>)
 80055cc:	f7ff bb54 	b.w	8004c78 <_dtoa_r+0x28>
 80055d0:	692a      	ldr	r2, [r5, #16]
 80055d2:	f105 010c 	add.w	r1, r5, #12
 80055d6:	3202      	adds	r2, #2
 80055d8:	0092      	lsls	r2, r2, #2
 80055da:	300c      	adds	r0, #12
 80055dc:	f001 ff5e 	bl	800749c <memcpy>
 80055e0:	2201      	movs	r2, #1
 80055e2:	4631      	mov	r1, r6
 80055e4:	4658      	mov	r0, fp
 80055e6:	f000 fc4f 	bl	8005e88 <__lshift>
 80055ea:	462f      	mov	r7, r5
 80055ec:	4605      	mov	r5, r0
 80055ee:	f10a 0301 	add.w	r3, sl, #1
 80055f2:	9307      	str	r3, [sp, #28]
 80055f4:	9b08      	ldr	r3, [sp, #32]
 80055f6:	4453      	add	r3, sl
 80055f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055fa:	9b02      	ldr	r3, [sp, #8]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	930a      	str	r3, [sp, #40]	@ 0x28
 8005602:	9b07      	ldr	r3, [sp, #28]
 8005604:	4621      	mov	r1, r4
 8005606:	3b01      	subs	r3, #1
 8005608:	4648      	mov	r0, r9
 800560a:	9302      	str	r3, [sp, #8]
 800560c:	f7ff fa98 	bl	8004b40 <quorem>
 8005610:	4639      	mov	r1, r7
 8005612:	9008      	str	r0, [sp, #32]
 8005614:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005618:	4648      	mov	r0, r9
 800561a:	f000 fca1 	bl	8005f60 <__mcmp>
 800561e:	462a      	mov	r2, r5
 8005620:	9009      	str	r0, [sp, #36]	@ 0x24
 8005622:	4621      	mov	r1, r4
 8005624:	4658      	mov	r0, fp
 8005626:	f000 fcb7 	bl	8005f98 <__mdiff>
 800562a:	68c2      	ldr	r2, [r0, #12]
 800562c:	4606      	mov	r6, r0
 800562e:	bb02      	cbnz	r2, 8005672 <_dtoa_r+0xa22>
 8005630:	4601      	mov	r1, r0
 8005632:	4648      	mov	r0, r9
 8005634:	f000 fc94 	bl	8005f60 <__mcmp>
 8005638:	4602      	mov	r2, r0
 800563a:	4631      	mov	r1, r6
 800563c:	4658      	mov	r0, fp
 800563e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005640:	f000 fa0c 	bl	8005a5c <_Bfree>
 8005644:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005646:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005648:	9e07      	ldr	r6, [sp, #28]
 800564a:	ea43 0102 	orr.w	r1, r3, r2
 800564e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005650:	4319      	orrs	r1, r3
 8005652:	d110      	bne.n	8005676 <_dtoa_r+0xa26>
 8005654:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005658:	d029      	beq.n	80056ae <_dtoa_r+0xa5e>
 800565a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	dd02      	ble.n	8005666 <_dtoa_r+0xa16>
 8005660:	9b08      	ldr	r3, [sp, #32]
 8005662:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005666:	9b02      	ldr	r3, [sp, #8]
 8005668:	f883 8000 	strb.w	r8, [r3]
 800566c:	e63b      	b.n	80052e6 <_dtoa_r+0x696>
 800566e:	4628      	mov	r0, r5
 8005670:	e7bb      	b.n	80055ea <_dtoa_r+0x99a>
 8005672:	2201      	movs	r2, #1
 8005674:	e7e1      	b.n	800563a <_dtoa_r+0x9ea>
 8005676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	db04      	blt.n	8005686 <_dtoa_r+0xa36>
 800567c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800567e:	430b      	orrs	r3, r1
 8005680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005682:	430b      	orrs	r3, r1
 8005684:	d120      	bne.n	80056c8 <_dtoa_r+0xa78>
 8005686:	2a00      	cmp	r2, #0
 8005688:	dded      	ble.n	8005666 <_dtoa_r+0xa16>
 800568a:	4649      	mov	r1, r9
 800568c:	2201      	movs	r2, #1
 800568e:	4658      	mov	r0, fp
 8005690:	f000 fbfa 	bl	8005e88 <__lshift>
 8005694:	4621      	mov	r1, r4
 8005696:	4681      	mov	r9, r0
 8005698:	f000 fc62 	bl	8005f60 <__mcmp>
 800569c:	2800      	cmp	r0, #0
 800569e:	dc03      	bgt.n	80056a8 <_dtoa_r+0xa58>
 80056a0:	d1e1      	bne.n	8005666 <_dtoa_r+0xa16>
 80056a2:	f018 0f01 	tst.w	r8, #1
 80056a6:	d0de      	beq.n	8005666 <_dtoa_r+0xa16>
 80056a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056ac:	d1d8      	bne.n	8005660 <_dtoa_r+0xa10>
 80056ae:	2339      	movs	r3, #57	@ 0x39
 80056b0:	9a02      	ldr	r2, [sp, #8]
 80056b2:	7013      	strb	r3, [r2, #0]
 80056b4:	4633      	mov	r3, r6
 80056b6:	461e      	mov	r6, r3
 80056b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80056bc:	3b01      	subs	r3, #1
 80056be:	2a39      	cmp	r2, #57	@ 0x39
 80056c0:	d052      	beq.n	8005768 <_dtoa_r+0xb18>
 80056c2:	3201      	adds	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e60e      	b.n	80052e6 <_dtoa_r+0x696>
 80056c8:	2a00      	cmp	r2, #0
 80056ca:	dd07      	ble.n	80056dc <_dtoa_r+0xa8c>
 80056cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056d0:	d0ed      	beq.n	80056ae <_dtoa_r+0xa5e>
 80056d2:	9a02      	ldr	r2, [sp, #8]
 80056d4:	f108 0301 	add.w	r3, r8, #1
 80056d8:	7013      	strb	r3, [r2, #0]
 80056da:	e604      	b.n	80052e6 <_dtoa_r+0x696>
 80056dc:	9b07      	ldr	r3, [sp, #28]
 80056de:	9a07      	ldr	r2, [sp, #28]
 80056e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80056e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d028      	beq.n	800573c <_dtoa_r+0xaec>
 80056ea:	4649      	mov	r1, r9
 80056ec:	2300      	movs	r3, #0
 80056ee:	220a      	movs	r2, #10
 80056f0:	4658      	mov	r0, fp
 80056f2:	f000 f9d5 	bl	8005aa0 <__multadd>
 80056f6:	42af      	cmp	r7, r5
 80056f8:	4681      	mov	r9, r0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	f04f 020a 	mov.w	r2, #10
 8005702:	4639      	mov	r1, r7
 8005704:	4658      	mov	r0, fp
 8005706:	d107      	bne.n	8005718 <_dtoa_r+0xac8>
 8005708:	f000 f9ca 	bl	8005aa0 <__multadd>
 800570c:	4607      	mov	r7, r0
 800570e:	4605      	mov	r5, r0
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	9307      	str	r3, [sp, #28]
 8005716:	e774      	b.n	8005602 <_dtoa_r+0x9b2>
 8005718:	f000 f9c2 	bl	8005aa0 <__multadd>
 800571c:	4629      	mov	r1, r5
 800571e:	4607      	mov	r7, r0
 8005720:	2300      	movs	r3, #0
 8005722:	220a      	movs	r2, #10
 8005724:	4658      	mov	r0, fp
 8005726:	f000 f9bb 	bl	8005aa0 <__multadd>
 800572a:	4605      	mov	r5, r0
 800572c:	e7f0      	b.n	8005710 <_dtoa_r+0xac0>
 800572e:	9b08      	ldr	r3, [sp, #32]
 8005730:	2700      	movs	r7, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	bfcc      	ite	gt
 8005736:	461e      	movgt	r6, r3
 8005738:	2601      	movle	r6, #1
 800573a:	4456      	add	r6, sl
 800573c:	4649      	mov	r1, r9
 800573e:	2201      	movs	r2, #1
 8005740:	4658      	mov	r0, fp
 8005742:	f000 fba1 	bl	8005e88 <__lshift>
 8005746:	4621      	mov	r1, r4
 8005748:	4681      	mov	r9, r0
 800574a:	f000 fc09 	bl	8005f60 <__mcmp>
 800574e:	2800      	cmp	r0, #0
 8005750:	dcb0      	bgt.n	80056b4 <_dtoa_r+0xa64>
 8005752:	d102      	bne.n	800575a <_dtoa_r+0xb0a>
 8005754:	f018 0f01 	tst.w	r8, #1
 8005758:	d1ac      	bne.n	80056b4 <_dtoa_r+0xa64>
 800575a:	4633      	mov	r3, r6
 800575c:	461e      	mov	r6, r3
 800575e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005762:	2a30      	cmp	r2, #48	@ 0x30
 8005764:	d0fa      	beq.n	800575c <_dtoa_r+0xb0c>
 8005766:	e5be      	b.n	80052e6 <_dtoa_r+0x696>
 8005768:	459a      	cmp	sl, r3
 800576a:	d1a4      	bne.n	80056b6 <_dtoa_r+0xa66>
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	3301      	adds	r3, #1
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	2331      	movs	r3, #49	@ 0x31
 8005774:	f88a 3000 	strb.w	r3, [sl]
 8005778:	e5b5      	b.n	80052e6 <_dtoa_r+0x696>
 800577a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800577c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80057dc <_dtoa_r+0xb8c>
 8005780:	b11b      	cbz	r3, 800578a <_dtoa_r+0xb3a>
 8005782:	f10a 0308 	add.w	r3, sl, #8
 8005786:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4650      	mov	r0, sl
 800578c:	b017      	add	sp, #92	@ 0x5c
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005794:	2b01      	cmp	r3, #1
 8005796:	f77f ae3d 	ble.w	8005414 <_dtoa_r+0x7c4>
 800579a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800579c:	930a      	str	r3, [sp, #40]	@ 0x28
 800579e:	2001      	movs	r0, #1
 80057a0:	e65b      	b.n	800545a <_dtoa_r+0x80a>
 80057a2:	9b08      	ldr	r3, [sp, #32]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f77f aed6 	ble.w	8005556 <_dtoa_r+0x906>
 80057aa:	4656      	mov	r6, sl
 80057ac:	4621      	mov	r1, r4
 80057ae:	4648      	mov	r0, r9
 80057b0:	f7ff f9c6 	bl	8004b40 <quorem>
 80057b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80057b8:	9b08      	ldr	r3, [sp, #32]
 80057ba:	f806 8b01 	strb.w	r8, [r6], #1
 80057be:	eba6 020a 	sub.w	r2, r6, sl
 80057c2:	4293      	cmp	r3, r2
 80057c4:	ddb3      	ble.n	800572e <_dtoa_r+0xade>
 80057c6:	4649      	mov	r1, r9
 80057c8:	2300      	movs	r3, #0
 80057ca:	220a      	movs	r2, #10
 80057cc:	4658      	mov	r0, fp
 80057ce:	f000 f967 	bl	8005aa0 <__multadd>
 80057d2:	4681      	mov	r9, r0
 80057d4:	e7ea      	b.n	80057ac <_dtoa_r+0xb5c>
 80057d6:	bf00      	nop
 80057d8:	0800843b 	.word	0x0800843b
 80057dc:	080083bf 	.word	0x080083bf

080057e0 <_free_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4605      	mov	r5, r0
 80057e4:	2900      	cmp	r1, #0
 80057e6:	d040      	beq.n	800586a <_free_r+0x8a>
 80057e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ec:	1f0c      	subs	r4, r1, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfb8      	it	lt
 80057f2:	18e4      	addlt	r4, r4, r3
 80057f4:	f000 f8e6 	bl	80059c4 <__malloc_lock>
 80057f8:	4a1c      	ldr	r2, [pc, #112]	@ (800586c <_free_r+0x8c>)
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	b933      	cbnz	r3, 800580c <_free_r+0x2c>
 80057fe:	6063      	str	r3, [r4, #4]
 8005800:	6014      	str	r4, [r2, #0]
 8005802:	4628      	mov	r0, r5
 8005804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005808:	f000 b8e2 	b.w	80059d0 <__malloc_unlock>
 800580c:	42a3      	cmp	r3, r4
 800580e:	d908      	bls.n	8005822 <_free_r+0x42>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	1821      	adds	r1, r4, r0
 8005814:	428b      	cmp	r3, r1
 8005816:	bf01      	itttt	eq
 8005818:	6819      	ldreq	r1, [r3, #0]
 800581a:	685b      	ldreq	r3, [r3, #4]
 800581c:	1809      	addeq	r1, r1, r0
 800581e:	6021      	streq	r1, [r4, #0]
 8005820:	e7ed      	b.n	80057fe <_free_r+0x1e>
 8005822:	461a      	mov	r2, r3
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	b10b      	cbz	r3, 800582c <_free_r+0x4c>
 8005828:	42a3      	cmp	r3, r4
 800582a:	d9fa      	bls.n	8005822 <_free_r+0x42>
 800582c:	6811      	ldr	r1, [r2, #0]
 800582e:	1850      	adds	r0, r2, r1
 8005830:	42a0      	cmp	r0, r4
 8005832:	d10b      	bne.n	800584c <_free_r+0x6c>
 8005834:	6820      	ldr	r0, [r4, #0]
 8005836:	4401      	add	r1, r0
 8005838:	1850      	adds	r0, r2, r1
 800583a:	4283      	cmp	r3, r0
 800583c:	6011      	str	r1, [r2, #0]
 800583e:	d1e0      	bne.n	8005802 <_free_r+0x22>
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4408      	add	r0, r1
 8005846:	6010      	str	r0, [r2, #0]
 8005848:	6053      	str	r3, [r2, #4]
 800584a:	e7da      	b.n	8005802 <_free_r+0x22>
 800584c:	d902      	bls.n	8005854 <_free_r+0x74>
 800584e:	230c      	movs	r3, #12
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	e7d6      	b.n	8005802 <_free_r+0x22>
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	1821      	adds	r1, r4, r0
 8005858:	428b      	cmp	r3, r1
 800585a:	bf01      	itttt	eq
 800585c:	6819      	ldreq	r1, [r3, #0]
 800585e:	685b      	ldreq	r3, [r3, #4]
 8005860:	1809      	addeq	r1, r1, r0
 8005862:	6021      	streq	r1, [r4, #0]
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	6054      	str	r4, [r2, #4]
 8005868:	e7cb      	b.n	8005802 <_free_r+0x22>
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	200014d0 	.word	0x200014d0

08005870 <malloc>:
 8005870:	4b02      	ldr	r3, [pc, #8]	@ (800587c <malloc+0xc>)
 8005872:	4601      	mov	r1, r0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f000 b825 	b.w	80058c4 <_malloc_r>
 800587a:	bf00      	nop
 800587c:	2000002c 	.word	0x2000002c

08005880 <sbrk_aligned>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4e0f      	ldr	r6, [pc, #60]	@ (80058c0 <sbrk_aligned+0x40>)
 8005884:	460c      	mov	r4, r1
 8005886:	6831      	ldr	r1, [r6, #0]
 8005888:	4605      	mov	r5, r0
 800588a:	b911      	cbnz	r1, 8005892 <sbrk_aligned+0x12>
 800588c:	f001 fdf6 	bl	800747c <_sbrk_r>
 8005890:	6030      	str	r0, [r6, #0]
 8005892:	4621      	mov	r1, r4
 8005894:	4628      	mov	r0, r5
 8005896:	f001 fdf1 	bl	800747c <_sbrk_r>
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	d103      	bne.n	80058a6 <sbrk_aligned+0x26>
 800589e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80058a2:	4620      	mov	r0, r4
 80058a4:	bd70      	pop	{r4, r5, r6, pc}
 80058a6:	1cc4      	adds	r4, r0, #3
 80058a8:	f024 0403 	bic.w	r4, r4, #3
 80058ac:	42a0      	cmp	r0, r4
 80058ae:	d0f8      	beq.n	80058a2 <sbrk_aligned+0x22>
 80058b0:	1a21      	subs	r1, r4, r0
 80058b2:	4628      	mov	r0, r5
 80058b4:	f001 fde2 	bl	800747c <_sbrk_r>
 80058b8:	3001      	adds	r0, #1
 80058ba:	d1f2      	bne.n	80058a2 <sbrk_aligned+0x22>
 80058bc:	e7ef      	b.n	800589e <sbrk_aligned+0x1e>
 80058be:	bf00      	nop
 80058c0:	200014cc 	.word	0x200014cc

080058c4 <_malloc_r>:
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c8:	1ccd      	adds	r5, r1, #3
 80058ca:	f025 0503 	bic.w	r5, r5, #3
 80058ce:	3508      	adds	r5, #8
 80058d0:	2d0c      	cmp	r5, #12
 80058d2:	bf38      	it	cc
 80058d4:	250c      	movcc	r5, #12
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	4606      	mov	r6, r0
 80058da:	db01      	blt.n	80058e0 <_malloc_r+0x1c>
 80058dc:	42a9      	cmp	r1, r5
 80058de:	d904      	bls.n	80058ea <_malloc_r+0x26>
 80058e0:	230c      	movs	r3, #12
 80058e2:	6033      	str	r3, [r6, #0]
 80058e4:	2000      	movs	r0, #0
 80058e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059c0 <_malloc_r+0xfc>
 80058ee:	f000 f869 	bl	80059c4 <__malloc_lock>
 80058f2:	f8d8 3000 	ldr.w	r3, [r8]
 80058f6:	461c      	mov	r4, r3
 80058f8:	bb44      	cbnz	r4, 800594c <_malloc_r+0x88>
 80058fa:	4629      	mov	r1, r5
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff ffbf 	bl	8005880 <sbrk_aligned>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	4604      	mov	r4, r0
 8005906:	d158      	bne.n	80059ba <_malloc_r+0xf6>
 8005908:	f8d8 4000 	ldr.w	r4, [r8]
 800590c:	4627      	mov	r7, r4
 800590e:	2f00      	cmp	r7, #0
 8005910:	d143      	bne.n	800599a <_malloc_r+0xd6>
 8005912:	2c00      	cmp	r4, #0
 8005914:	d04b      	beq.n	80059ae <_malloc_r+0xea>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	4639      	mov	r1, r7
 800591a:	4630      	mov	r0, r6
 800591c:	eb04 0903 	add.w	r9, r4, r3
 8005920:	f001 fdac 	bl	800747c <_sbrk_r>
 8005924:	4581      	cmp	r9, r0
 8005926:	d142      	bne.n	80059ae <_malloc_r+0xea>
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	4630      	mov	r0, r6
 800592c:	1a6d      	subs	r5, r5, r1
 800592e:	4629      	mov	r1, r5
 8005930:	f7ff ffa6 	bl	8005880 <sbrk_aligned>
 8005934:	3001      	adds	r0, #1
 8005936:	d03a      	beq.n	80059ae <_malloc_r+0xea>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	442b      	add	r3, r5
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	f8d8 3000 	ldr.w	r3, [r8]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	bb62      	cbnz	r2, 80059a0 <_malloc_r+0xdc>
 8005946:	f8c8 7000 	str.w	r7, [r8]
 800594a:	e00f      	b.n	800596c <_malloc_r+0xa8>
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	1b52      	subs	r2, r2, r5
 8005950:	d420      	bmi.n	8005994 <_malloc_r+0xd0>
 8005952:	2a0b      	cmp	r2, #11
 8005954:	d917      	bls.n	8005986 <_malloc_r+0xc2>
 8005956:	1961      	adds	r1, r4, r5
 8005958:	42a3      	cmp	r3, r4
 800595a:	6025      	str	r5, [r4, #0]
 800595c:	bf18      	it	ne
 800595e:	6059      	strne	r1, [r3, #4]
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	bf08      	it	eq
 8005964:	f8c8 1000 	streq.w	r1, [r8]
 8005968:	5162      	str	r2, [r4, r5]
 800596a:	604b      	str	r3, [r1, #4]
 800596c:	4630      	mov	r0, r6
 800596e:	f000 f82f 	bl	80059d0 <__malloc_unlock>
 8005972:	f104 000b 	add.w	r0, r4, #11
 8005976:	1d23      	adds	r3, r4, #4
 8005978:	f020 0007 	bic.w	r0, r0, #7
 800597c:	1ac2      	subs	r2, r0, r3
 800597e:	bf1c      	itt	ne
 8005980:	1a1b      	subne	r3, r3, r0
 8005982:	50a3      	strne	r3, [r4, r2]
 8005984:	e7af      	b.n	80058e6 <_malloc_r+0x22>
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	42a3      	cmp	r3, r4
 800598a:	bf0c      	ite	eq
 800598c:	f8c8 2000 	streq.w	r2, [r8]
 8005990:	605a      	strne	r2, [r3, #4]
 8005992:	e7eb      	b.n	800596c <_malloc_r+0xa8>
 8005994:	4623      	mov	r3, r4
 8005996:	6864      	ldr	r4, [r4, #4]
 8005998:	e7ae      	b.n	80058f8 <_malloc_r+0x34>
 800599a:	463c      	mov	r4, r7
 800599c:	687f      	ldr	r7, [r7, #4]
 800599e:	e7b6      	b.n	800590e <_malloc_r+0x4a>
 80059a0:	461a      	mov	r2, r3
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	42a3      	cmp	r3, r4
 80059a6:	d1fb      	bne.n	80059a0 <_malloc_r+0xdc>
 80059a8:	2300      	movs	r3, #0
 80059aa:	6053      	str	r3, [r2, #4]
 80059ac:	e7de      	b.n	800596c <_malloc_r+0xa8>
 80059ae:	230c      	movs	r3, #12
 80059b0:	4630      	mov	r0, r6
 80059b2:	6033      	str	r3, [r6, #0]
 80059b4:	f000 f80c 	bl	80059d0 <__malloc_unlock>
 80059b8:	e794      	b.n	80058e4 <_malloc_r+0x20>
 80059ba:	6005      	str	r5, [r0, #0]
 80059bc:	e7d6      	b.n	800596c <_malloc_r+0xa8>
 80059be:	bf00      	nop
 80059c0:	200014d0 	.word	0x200014d0

080059c4 <__malloc_lock>:
 80059c4:	4801      	ldr	r0, [pc, #4]	@ (80059cc <__malloc_lock+0x8>)
 80059c6:	f7ff b8a6 	b.w	8004b16 <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	200014c8 	.word	0x200014c8

080059d0 <__malloc_unlock>:
 80059d0:	4801      	ldr	r0, [pc, #4]	@ (80059d8 <__malloc_unlock+0x8>)
 80059d2:	f7ff b8a1 	b.w	8004b18 <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	200014c8 	.word	0x200014c8

080059dc <_Balloc>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	69c6      	ldr	r6, [r0, #28]
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	b976      	cbnz	r6, 8005a04 <_Balloc+0x28>
 80059e6:	2010      	movs	r0, #16
 80059e8:	f7ff ff42 	bl	8005870 <malloc>
 80059ec:	4602      	mov	r2, r0
 80059ee:	61e0      	str	r0, [r4, #28]
 80059f0:	b920      	cbnz	r0, 80059fc <_Balloc+0x20>
 80059f2:	216b      	movs	r1, #107	@ 0x6b
 80059f4:	4b17      	ldr	r3, [pc, #92]	@ (8005a54 <_Balloc+0x78>)
 80059f6:	4818      	ldr	r0, [pc, #96]	@ (8005a58 <_Balloc+0x7c>)
 80059f8:	f001 fd64 	bl	80074c4 <__assert_func>
 80059fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a00:	6006      	str	r6, [r0, #0]
 8005a02:	60c6      	str	r6, [r0, #12]
 8005a04:	69e6      	ldr	r6, [r4, #28]
 8005a06:	68f3      	ldr	r3, [r6, #12]
 8005a08:	b183      	cbz	r3, 8005a2c <_Balloc+0x50>
 8005a0a:	69e3      	ldr	r3, [r4, #28]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a12:	b9b8      	cbnz	r0, 8005a44 <_Balloc+0x68>
 8005a14:	2101      	movs	r1, #1
 8005a16:	fa01 f605 	lsl.w	r6, r1, r5
 8005a1a:	1d72      	adds	r2, r6, #5
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	0092      	lsls	r2, r2, #2
 8005a20:	f001 fd6e 	bl	8007500 <_calloc_r>
 8005a24:	b160      	cbz	r0, 8005a40 <_Balloc+0x64>
 8005a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a2a:	e00e      	b.n	8005a4a <_Balloc+0x6e>
 8005a2c:	2221      	movs	r2, #33	@ 0x21
 8005a2e:	2104      	movs	r1, #4
 8005a30:	4620      	mov	r0, r4
 8005a32:	f001 fd65 	bl	8007500 <_calloc_r>
 8005a36:	69e3      	ldr	r3, [r4, #28]
 8005a38:	60f0      	str	r0, [r6, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e4      	bne.n	8005a0a <_Balloc+0x2e>
 8005a40:	2000      	movs	r0, #0
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	6802      	ldr	r2, [r0, #0]
 8005a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a50:	e7f7      	b.n	8005a42 <_Balloc+0x66>
 8005a52:	bf00      	nop
 8005a54:	080083cc 	.word	0x080083cc
 8005a58:	0800844c 	.word	0x0800844c

08005a5c <_Bfree>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	69c6      	ldr	r6, [r0, #28]
 8005a60:	4605      	mov	r5, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	b976      	cbnz	r6, 8005a84 <_Bfree+0x28>
 8005a66:	2010      	movs	r0, #16
 8005a68:	f7ff ff02 	bl	8005870 <malloc>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	61e8      	str	r0, [r5, #28]
 8005a70:	b920      	cbnz	r0, 8005a7c <_Bfree+0x20>
 8005a72:	218f      	movs	r1, #143	@ 0x8f
 8005a74:	4b08      	ldr	r3, [pc, #32]	@ (8005a98 <_Bfree+0x3c>)
 8005a76:	4809      	ldr	r0, [pc, #36]	@ (8005a9c <_Bfree+0x40>)
 8005a78:	f001 fd24 	bl	80074c4 <__assert_func>
 8005a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a80:	6006      	str	r6, [r0, #0]
 8005a82:	60c6      	str	r6, [r0, #12]
 8005a84:	b13c      	cbz	r4, 8005a96 <_Bfree+0x3a>
 8005a86:	69eb      	ldr	r3, [r5, #28]
 8005a88:	6862      	ldr	r2, [r4, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a90:	6021      	str	r1, [r4, #0]
 8005a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
 8005a98:	080083cc 	.word	0x080083cc
 8005a9c:	0800844c 	.word	0x0800844c

08005aa0 <__multadd>:
 8005aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	461e      	mov	r6, r3
 8005aaa:	2000      	movs	r0, #0
 8005aac:	690d      	ldr	r5, [r1, #16]
 8005aae:	f101 0c14 	add.w	ip, r1, #20
 8005ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	b299      	uxth	r1, r3
 8005aba:	fb02 6101 	mla	r1, r2, r1, r6
 8005abe:	0c1e      	lsrs	r6, r3, #16
 8005ac0:	0c0b      	lsrs	r3, r1, #16
 8005ac2:	fb02 3306 	mla	r3, r2, r6, r3
 8005ac6:	b289      	uxth	r1, r1
 8005ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005acc:	4285      	cmp	r5, r0
 8005ace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8005ad6:	dcec      	bgt.n	8005ab2 <__multadd+0x12>
 8005ad8:	b30e      	cbz	r6, 8005b1e <__multadd+0x7e>
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	dc19      	bgt.n	8005b14 <__multadd+0x74>
 8005ae0:	6861      	ldr	r1, [r4, #4]
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	3101      	adds	r1, #1
 8005ae6:	f7ff ff79 	bl	80059dc <_Balloc>
 8005aea:	4680      	mov	r8, r0
 8005aec:	b928      	cbnz	r0, 8005afa <__multadd+0x5a>
 8005aee:	4602      	mov	r2, r0
 8005af0:	21ba      	movs	r1, #186	@ 0xba
 8005af2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <__multadd+0x84>)
 8005af4:	480c      	ldr	r0, [pc, #48]	@ (8005b28 <__multadd+0x88>)
 8005af6:	f001 fce5 	bl	80074c4 <__assert_func>
 8005afa:	6922      	ldr	r2, [r4, #16]
 8005afc:	f104 010c 	add.w	r1, r4, #12
 8005b00:	3202      	adds	r2, #2
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	300c      	adds	r0, #12
 8005b06:	f001 fcc9 	bl	800749c <memcpy>
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f7ff ffa5 	bl	8005a5c <_Bfree>
 8005b12:	4644      	mov	r4, r8
 8005b14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b18:	3501      	adds	r5, #1
 8005b1a:	615e      	str	r6, [r3, #20]
 8005b1c:	6125      	str	r5, [r4, #16]
 8005b1e:	4620      	mov	r0, r4
 8005b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b24:	0800843b 	.word	0x0800843b
 8005b28:	0800844c 	.word	0x0800844c

08005b2c <__s2b>:
 8005b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b30:	4615      	mov	r5, r2
 8005b32:	2209      	movs	r2, #9
 8005b34:	461f      	mov	r7, r3
 8005b36:	3308      	adds	r3, #8
 8005b38:	460c      	mov	r4, r1
 8005b3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b3e:	4606      	mov	r6, r0
 8005b40:	2201      	movs	r2, #1
 8005b42:	2100      	movs	r1, #0
 8005b44:	429a      	cmp	r2, r3
 8005b46:	db09      	blt.n	8005b5c <__s2b+0x30>
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7ff ff47 	bl	80059dc <_Balloc>
 8005b4e:	b940      	cbnz	r0, 8005b62 <__s2b+0x36>
 8005b50:	4602      	mov	r2, r0
 8005b52:	21d3      	movs	r1, #211	@ 0xd3
 8005b54:	4b18      	ldr	r3, [pc, #96]	@ (8005bb8 <__s2b+0x8c>)
 8005b56:	4819      	ldr	r0, [pc, #100]	@ (8005bbc <__s2b+0x90>)
 8005b58:	f001 fcb4 	bl	80074c4 <__assert_func>
 8005b5c:	0052      	lsls	r2, r2, #1
 8005b5e:	3101      	adds	r1, #1
 8005b60:	e7f0      	b.n	8005b44 <__s2b+0x18>
 8005b62:	9b08      	ldr	r3, [sp, #32]
 8005b64:	2d09      	cmp	r5, #9
 8005b66:	6143      	str	r3, [r0, #20]
 8005b68:	f04f 0301 	mov.w	r3, #1
 8005b6c:	6103      	str	r3, [r0, #16]
 8005b6e:	dd16      	ble.n	8005b9e <__s2b+0x72>
 8005b70:	f104 0909 	add.w	r9, r4, #9
 8005b74:	46c8      	mov	r8, r9
 8005b76:	442c      	add	r4, r5
 8005b78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b7c:	4601      	mov	r1, r0
 8005b7e:	220a      	movs	r2, #10
 8005b80:	4630      	mov	r0, r6
 8005b82:	3b30      	subs	r3, #48	@ 0x30
 8005b84:	f7ff ff8c 	bl	8005aa0 <__multadd>
 8005b88:	45a0      	cmp	r8, r4
 8005b8a:	d1f5      	bne.n	8005b78 <__s2b+0x4c>
 8005b8c:	f1a5 0408 	sub.w	r4, r5, #8
 8005b90:	444c      	add	r4, r9
 8005b92:	1b2d      	subs	r5, r5, r4
 8005b94:	1963      	adds	r3, r4, r5
 8005b96:	42bb      	cmp	r3, r7
 8005b98:	db04      	blt.n	8005ba4 <__s2b+0x78>
 8005b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	2509      	movs	r5, #9
 8005ba0:	340a      	adds	r4, #10
 8005ba2:	e7f6      	b.n	8005b92 <__s2b+0x66>
 8005ba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ba8:	4601      	mov	r1, r0
 8005baa:	220a      	movs	r2, #10
 8005bac:	4630      	mov	r0, r6
 8005bae:	3b30      	subs	r3, #48	@ 0x30
 8005bb0:	f7ff ff76 	bl	8005aa0 <__multadd>
 8005bb4:	e7ee      	b.n	8005b94 <__s2b+0x68>
 8005bb6:	bf00      	nop
 8005bb8:	0800843b 	.word	0x0800843b
 8005bbc:	0800844c 	.word	0x0800844c

08005bc0 <__hi0bits>:
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005bc6:	bf3a      	itte	cc
 8005bc8:	0403      	lslcc	r3, r0, #16
 8005bca:	2010      	movcc	r0, #16
 8005bcc:	2000      	movcs	r0, #0
 8005bce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bd2:	bf3c      	itt	cc
 8005bd4:	021b      	lslcc	r3, r3, #8
 8005bd6:	3008      	addcc	r0, #8
 8005bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bdc:	bf3c      	itt	cc
 8005bde:	011b      	lslcc	r3, r3, #4
 8005be0:	3004      	addcc	r0, #4
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be6:	bf3c      	itt	cc
 8005be8:	009b      	lslcc	r3, r3, #2
 8005bea:	3002      	addcc	r0, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db05      	blt.n	8005bfc <__hi0bits+0x3c>
 8005bf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005bf4:	f100 0001 	add.w	r0, r0, #1
 8005bf8:	bf08      	it	eq
 8005bfa:	2020      	moveq	r0, #32
 8005bfc:	4770      	bx	lr

08005bfe <__lo0bits>:
 8005bfe:	6803      	ldr	r3, [r0, #0]
 8005c00:	4602      	mov	r2, r0
 8005c02:	f013 0007 	ands.w	r0, r3, #7
 8005c06:	d00b      	beq.n	8005c20 <__lo0bits+0x22>
 8005c08:	07d9      	lsls	r1, r3, #31
 8005c0a:	d421      	bmi.n	8005c50 <__lo0bits+0x52>
 8005c0c:	0798      	lsls	r0, r3, #30
 8005c0e:	bf49      	itett	mi
 8005c10:	085b      	lsrmi	r3, r3, #1
 8005c12:	089b      	lsrpl	r3, r3, #2
 8005c14:	2001      	movmi	r0, #1
 8005c16:	6013      	strmi	r3, [r2, #0]
 8005c18:	bf5c      	itt	pl
 8005c1a:	2002      	movpl	r0, #2
 8005c1c:	6013      	strpl	r3, [r2, #0]
 8005c1e:	4770      	bx	lr
 8005c20:	b299      	uxth	r1, r3
 8005c22:	b909      	cbnz	r1, 8005c28 <__lo0bits+0x2a>
 8005c24:	2010      	movs	r0, #16
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	b2d9      	uxtb	r1, r3
 8005c2a:	b909      	cbnz	r1, 8005c30 <__lo0bits+0x32>
 8005c2c:	3008      	adds	r0, #8
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	0719      	lsls	r1, r3, #28
 8005c32:	bf04      	itt	eq
 8005c34:	091b      	lsreq	r3, r3, #4
 8005c36:	3004      	addeq	r0, #4
 8005c38:	0799      	lsls	r1, r3, #30
 8005c3a:	bf04      	itt	eq
 8005c3c:	089b      	lsreq	r3, r3, #2
 8005c3e:	3002      	addeq	r0, #2
 8005c40:	07d9      	lsls	r1, r3, #31
 8005c42:	d403      	bmi.n	8005c4c <__lo0bits+0x4e>
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	f100 0001 	add.w	r0, r0, #1
 8005c4a:	d003      	beq.n	8005c54 <__lo0bits+0x56>
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	4770      	bx	lr
 8005c50:	2000      	movs	r0, #0
 8005c52:	4770      	bx	lr
 8005c54:	2020      	movs	r0, #32
 8005c56:	4770      	bx	lr

08005c58 <__i2b>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	f7ff febd 	bl	80059dc <_Balloc>
 8005c62:	4602      	mov	r2, r0
 8005c64:	b928      	cbnz	r0, 8005c72 <__i2b+0x1a>
 8005c66:	f240 1145 	movw	r1, #325	@ 0x145
 8005c6a:	4b04      	ldr	r3, [pc, #16]	@ (8005c7c <__i2b+0x24>)
 8005c6c:	4804      	ldr	r0, [pc, #16]	@ (8005c80 <__i2b+0x28>)
 8005c6e:	f001 fc29 	bl	80074c4 <__assert_func>
 8005c72:	2301      	movs	r3, #1
 8005c74:	6144      	str	r4, [r0, #20]
 8005c76:	6103      	str	r3, [r0, #16]
 8005c78:	bd10      	pop	{r4, pc}
 8005c7a:	bf00      	nop
 8005c7c:	0800843b 	.word	0x0800843b
 8005c80:	0800844c 	.word	0x0800844c

08005c84 <__multiply>:
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	4614      	mov	r4, r2
 8005c8a:	690a      	ldr	r2, [r1, #16]
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	460f      	mov	r7, r1
 8005c90:	429a      	cmp	r2, r3
 8005c92:	bfa2      	ittt	ge
 8005c94:	4623      	movge	r3, r4
 8005c96:	460c      	movge	r4, r1
 8005c98:	461f      	movge	r7, r3
 8005c9a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005c9e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005ca2:	68a3      	ldr	r3, [r4, #8]
 8005ca4:	6861      	ldr	r1, [r4, #4]
 8005ca6:	eb0a 0609 	add.w	r6, sl, r9
 8005caa:	42b3      	cmp	r3, r6
 8005cac:	b085      	sub	sp, #20
 8005cae:	bfb8      	it	lt
 8005cb0:	3101      	addlt	r1, #1
 8005cb2:	f7ff fe93 	bl	80059dc <_Balloc>
 8005cb6:	b930      	cbnz	r0, 8005cc6 <__multiply+0x42>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005cbe:	4b43      	ldr	r3, [pc, #268]	@ (8005dcc <__multiply+0x148>)
 8005cc0:	4843      	ldr	r0, [pc, #268]	@ (8005dd0 <__multiply+0x14c>)
 8005cc2:	f001 fbff 	bl	80074c4 <__assert_func>
 8005cc6:	f100 0514 	add.w	r5, r0, #20
 8005cca:	462b      	mov	r3, r5
 8005ccc:	2200      	movs	r2, #0
 8005cce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cd2:	4543      	cmp	r3, r8
 8005cd4:	d321      	bcc.n	8005d1a <__multiply+0x96>
 8005cd6:	f107 0114 	add.w	r1, r7, #20
 8005cda:	f104 0214 	add.w	r2, r4, #20
 8005cde:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005ce2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005ce6:	9302      	str	r3, [sp, #8]
 8005ce8:	1b13      	subs	r3, r2, r4
 8005cea:	3b15      	subs	r3, #21
 8005cec:	f023 0303 	bic.w	r3, r3, #3
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	f104 0715 	add.w	r7, r4, #21
 8005cf6:	42ba      	cmp	r2, r7
 8005cf8:	bf38      	it	cc
 8005cfa:	2304      	movcc	r3, #4
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	9b02      	ldr	r3, [sp, #8]
 8005d00:	9103      	str	r1, [sp, #12]
 8005d02:	428b      	cmp	r3, r1
 8005d04:	d80c      	bhi.n	8005d20 <__multiply+0x9c>
 8005d06:	2e00      	cmp	r6, #0
 8005d08:	dd03      	ble.n	8005d12 <__multiply+0x8e>
 8005d0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d05a      	beq.n	8005dc8 <__multiply+0x144>
 8005d12:	6106      	str	r6, [r0, #16]
 8005d14:	b005      	add	sp, #20
 8005d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1a:	f843 2b04 	str.w	r2, [r3], #4
 8005d1e:	e7d8      	b.n	8005cd2 <__multiply+0x4e>
 8005d20:	f8b1 a000 	ldrh.w	sl, [r1]
 8005d24:	f1ba 0f00 	cmp.w	sl, #0
 8005d28:	d023      	beq.n	8005d72 <__multiply+0xee>
 8005d2a:	46a9      	mov	r9, r5
 8005d2c:	f04f 0c00 	mov.w	ip, #0
 8005d30:	f104 0e14 	add.w	lr, r4, #20
 8005d34:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d38:	f8d9 3000 	ldr.w	r3, [r9]
 8005d3c:	fa1f fb87 	uxth.w	fp, r7
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d46:	4463      	add	r3, ip
 8005d48:	f8d9 c000 	ldr.w	ip, [r9]
 8005d4c:	0c3f      	lsrs	r7, r7, #16
 8005d4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d52:	fb0a c707 	mla	r7, sl, r7, ip
 8005d56:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d60:	4572      	cmp	r2, lr
 8005d62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d66:	f849 3b04 	str.w	r3, [r9], #4
 8005d6a:	d8e3      	bhi.n	8005d34 <__multiply+0xb0>
 8005d6c:	9b01      	ldr	r3, [sp, #4]
 8005d6e:	f845 c003 	str.w	ip, [r5, r3]
 8005d72:	9b03      	ldr	r3, [sp, #12]
 8005d74:	3104      	adds	r1, #4
 8005d76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d7a:	f1b9 0f00 	cmp.w	r9, #0
 8005d7e:	d021      	beq.n	8005dc4 <__multiply+0x140>
 8005d80:	46ae      	mov	lr, r5
 8005d82:	f04f 0a00 	mov.w	sl, #0
 8005d86:	682b      	ldr	r3, [r5, #0]
 8005d88:	f104 0c14 	add.w	ip, r4, #20
 8005d8c:	f8bc b000 	ldrh.w	fp, [ip]
 8005d90:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	fb09 770b 	mla	r7, r9, fp, r7
 8005d9a:	4457      	add	r7, sl
 8005d9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005da0:	f84e 3b04 	str.w	r3, [lr], #4
 8005da4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005da8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dac:	f8be 3000 	ldrh.w	r3, [lr]
 8005db0:	4562      	cmp	r2, ip
 8005db2:	fb09 330a 	mla	r3, r9, sl, r3
 8005db6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005dba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dbe:	d8e5      	bhi.n	8005d8c <__multiply+0x108>
 8005dc0:	9f01      	ldr	r7, [sp, #4]
 8005dc2:	51eb      	str	r3, [r5, r7]
 8005dc4:	3504      	adds	r5, #4
 8005dc6:	e79a      	b.n	8005cfe <__multiply+0x7a>
 8005dc8:	3e01      	subs	r6, #1
 8005dca:	e79c      	b.n	8005d06 <__multiply+0x82>
 8005dcc:	0800843b 	.word	0x0800843b
 8005dd0:	0800844c 	.word	0x0800844c

08005dd4 <__pow5mult>:
 8005dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	4615      	mov	r5, r2
 8005dda:	f012 0203 	ands.w	r2, r2, #3
 8005dde:	4607      	mov	r7, r0
 8005de0:	460e      	mov	r6, r1
 8005de2:	d007      	beq.n	8005df4 <__pow5mult+0x20>
 8005de4:	4c25      	ldr	r4, [pc, #148]	@ (8005e7c <__pow5mult+0xa8>)
 8005de6:	3a01      	subs	r2, #1
 8005de8:	2300      	movs	r3, #0
 8005dea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dee:	f7ff fe57 	bl	8005aa0 <__multadd>
 8005df2:	4606      	mov	r6, r0
 8005df4:	10ad      	asrs	r5, r5, #2
 8005df6:	d03d      	beq.n	8005e74 <__pow5mult+0xa0>
 8005df8:	69fc      	ldr	r4, [r7, #28]
 8005dfa:	b97c      	cbnz	r4, 8005e1c <__pow5mult+0x48>
 8005dfc:	2010      	movs	r0, #16
 8005dfe:	f7ff fd37 	bl	8005870 <malloc>
 8005e02:	4602      	mov	r2, r0
 8005e04:	61f8      	str	r0, [r7, #28]
 8005e06:	b928      	cbnz	r0, 8005e14 <__pow5mult+0x40>
 8005e08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8005e80 <__pow5mult+0xac>)
 8005e0e:	481d      	ldr	r0, [pc, #116]	@ (8005e84 <__pow5mult+0xb0>)
 8005e10:	f001 fb58 	bl	80074c4 <__assert_func>
 8005e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e18:	6004      	str	r4, [r0, #0]
 8005e1a:	60c4      	str	r4, [r0, #12]
 8005e1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e24:	b94c      	cbnz	r4, 8005e3a <__pow5mult+0x66>
 8005e26:	f240 2171 	movw	r1, #625	@ 0x271
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	f7ff ff14 	bl	8005c58 <__i2b>
 8005e30:	2300      	movs	r3, #0
 8005e32:	4604      	mov	r4, r0
 8005e34:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e38:	6003      	str	r3, [r0, #0]
 8005e3a:	f04f 0900 	mov.w	r9, #0
 8005e3e:	07eb      	lsls	r3, r5, #31
 8005e40:	d50a      	bpl.n	8005e58 <__pow5mult+0x84>
 8005e42:	4631      	mov	r1, r6
 8005e44:	4622      	mov	r2, r4
 8005e46:	4638      	mov	r0, r7
 8005e48:	f7ff ff1c 	bl	8005c84 <__multiply>
 8005e4c:	4680      	mov	r8, r0
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff fe03 	bl	8005a5c <_Bfree>
 8005e56:	4646      	mov	r6, r8
 8005e58:	106d      	asrs	r5, r5, #1
 8005e5a:	d00b      	beq.n	8005e74 <__pow5mult+0xa0>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	b938      	cbnz	r0, 8005e70 <__pow5mult+0x9c>
 8005e60:	4622      	mov	r2, r4
 8005e62:	4621      	mov	r1, r4
 8005e64:	4638      	mov	r0, r7
 8005e66:	f7ff ff0d 	bl	8005c84 <__multiply>
 8005e6a:	6020      	str	r0, [r4, #0]
 8005e6c:	f8c0 9000 	str.w	r9, [r0]
 8005e70:	4604      	mov	r4, r0
 8005e72:	e7e4      	b.n	8005e3e <__pow5mult+0x6a>
 8005e74:	4630      	mov	r0, r6
 8005e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7a:	bf00      	nop
 8005e7c:	080084a8 	.word	0x080084a8
 8005e80:	080083cc 	.word	0x080083cc
 8005e84:	0800844c 	.word	0x0800844c

08005e88 <__lshift>:
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	4607      	mov	r7, r0
 8005e90:	4691      	mov	r9, r2
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	6849      	ldr	r1, [r1, #4]
 8005e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ea0:	f108 0601 	add.w	r6, r8, #1
 8005ea4:	42b3      	cmp	r3, r6
 8005ea6:	db0b      	blt.n	8005ec0 <__lshift+0x38>
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7ff fd97 	bl	80059dc <_Balloc>
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b948      	cbnz	r0, 8005ec6 <__lshift+0x3e>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005eb8:	4b27      	ldr	r3, [pc, #156]	@ (8005f58 <__lshift+0xd0>)
 8005eba:	4828      	ldr	r0, [pc, #160]	@ (8005f5c <__lshift+0xd4>)
 8005ebc:	f001 fb02 	bl	80074c4 <__assert_func>
 8005ec0:	3101      	adds	r1, #1
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__lshift+0x1c>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f100 0114 	add.w	r1, r0, #20
 8005ecc:	f100 0210 	add.w	r2, r0, #16
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	4553      	cmp	r3, sl
 8005ed4:	db33      	blt.n	8005f3e <__lshift+0xb6>
 8005ed6:	6920      	ldr	r0, [r4, #16]
 8005ed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005edc:	f104 0314 	add.w	r3, r4, #20
 8005ee0:	f019 091f 	ands.w	r9, r9, #31
 8005ee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ee8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005eec:	d02b      	beq.n	8005f46 <__lshift+0xbe>
 8005eee:	468a      	mov	sl, r1
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	fa00 f009 	lsl.w	r0, r0, r9
 8005efc:	4310      	orrs	r0, r2
 8005efe:	f84a 0b04 	str.w	r0, [sl], #4
 8005f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f06:	459c      	cmp	ip, r3
 8005f08:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f0c:	d8f3      	bhi.n	8005ef6 <__lshift+0x6e>
 8005f0e:	ebac 0304 	sub.w	r3, ip, r4
 8005f12:	3b15      	subs	r3, #21
 8005f14:	f023 0303 	bic.w	r3, r3, #3
 8005f18:	3304      	adds	r3, #4
 8005f1a:	f104 0015 	add.w	r0, r4, #21
 8005f1e:	4584      	cmp	ip, r0
 8005f20:	bf38      	it	cc
 8005f22:	2304      	movcc	r3, #4
 8005f24:	50ca      	str	r2, [r1, r3]
 8005f26:	b10a      	cbz	r2, 8005f2c <__lshift+0xa4>
 8005f28:	f108 0602 	add.w	r6, r8, #2
 8005f2c:	3e01      	subs	r6, #1
 8005f2e:	4638      	mov	r0, r7
 8005f30:	4621      	mov	r1, r4
 8005f32:	612e      	str	r6, [r5, #16]
 8005f34:	f7ff fd92 	bl	8005a5c <_Bfree>
 8005f38:	4628      	mov	r0, r5
 8005f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f42:	3301      	adds	r3, #1
 8005f44:	e7c5      	b.n	8005ed2 <__lshift+0x4a>
 8005f46:	3904      	subs	r1, #4
 8005f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f4c:	459c      	cmp	ip, r3
 8005f4e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f52:	d8f9      	bhi.n	8005f48 <__lshift+0xc0>
 8005f54:	e7ea      	b.n	8005f2c <__lshift+0xa4>
 8005f56:	bf00      	nop
 8005f58:	0800843b 	.word	0x0800843b
 8005f5c:	0800844c 	.word	0x0800844c

08005f60 <__mcmp>:
 8005f60:	4603      	mov	r3, r0
 8005f62:	690a      	ldr	r2, [r1, #16]
 8005f64:	6900      	ldr	r0, [r0, #16]
 8005f66:	b530      	push	{r4, r5, lr}
 8005f68:	1a80      	subs	r0, r0, r2
 8005f6a:	d10e      	bne.n	8005f8a <__mcmp+0x2a>
 8005f6c:	3314      	adds	r3, #20
 8005f6e:	3114      	adds	r1, #20
 8005f70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f80:	4295      	cmp	r5, r2
 8005f82:	d003      	beq.n	8005f8c <__mcmp+0x2c>
 8005f84:	d205      	bcs.n	8005f92 <__mcmp+0x32>
 8005f86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f8a:	bd30      	pop	{r4, r5, pc}
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	d3f3      	bcc.n	8005f78 <__mcmp+0x18>
 8005f90:	e7fb      	b.n	8005f8a <__mcmp+0x2a>
 8005f92:	2001      	movs	r0, #1
 8005f94:	e7f9      	b.n	8005f8a <__mcmp+0x2a>
	...

08005f98 <__mdiff>:
 8005f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	4689      	mov	r9, r1
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4648      	mov	r0, r9
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	f7ff ffdb 	bl	8005f60 <__mcmp>
 8005faa:	1e05      	subs	r5, r0, #0
 8005fac:	d112      	bne.n	8005fd4 <__mdiff+0x3c>
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f7ff fd13 	bl	80059dc <_Balloc>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <__mdiff+0x2e>
 8005fba:	f240 2137 	movw	r1, #567	@ 0x237
 8005fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80060b8 <__mdiff+0x120>)
 8005fc0:	483e      	ldr	r0, [pc, #248]	@ (80060bc <__mdiff+0x124>)
 8005fc2:	f001 fa7f 	bl	80074c4 <__assert_func>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fcc:	4610      	mov	r0, r2
 8005fce:	b003      	add	sp, #12
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	bfbc      	itt	lt
 8005fd6:	464b      	movlt	r3, r9
 8005fd8:	46a1      	movlt	r9, r4
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005fe0:	bfba      	itte	lt
 8005fe2:	461c      	movlt	r4, r3
 8005fe4:	2501      	movlt	r5, #1
 8005fe6:	2500      	movge	r5, #0
 8005fe8:	f7ff fcf8 	bl	80059dc <_Balloc>
 8005fec:	4602      	mov	r2, r0
 8005fee:	b918      	cbnz	r0, 8005ff8 <__mdiff+0x60>
 8005ff0:	f240 2145 	movw	r1, #581	@ 0x245
 8005ff4:	4b30      	ldr	r3, [pc, #192]	@ (80060b8 <__mdiff+0x120>)
 8005ff6:	e7e3      	b.n	8005fc0 <__mdiff+0x28>
 8005ff8:	f100 0b14 	add.w	fp, r0, #20
 8005ffc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006000:	f109 0310 	add.w	r3, r9, #16
 8006004:	60c5      	str	r5, [r0, #12]
 8006006:	f04f 0c00 	mov.w	ip, #0
 800600a:	f109 0514 	add.w	r5, r9, #20
 800600e:	46d9      	mov	r9, fp
 8006010:	6926      	ldr	r6, [r4, #16]
 8006012:	f104 0e14 	add.w	lr, r4, #20
 8006016:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800601a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	9b01      	ldr	r3, [sp, #4]
 8006022:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006026:	f853 af04 	ldr.w	sl, [r3, #4]!
 800602a:	b281      	uxth	r1, r0
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	fa1f f38a 	uxth.w	r3, sl
 8006032:	1a5b      	subs	r3, r3, r1
 8006034:	0c00      	lsrs	r0, r0, #16
 8006036:	4463      	add	r3, ip
 8006038:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800603c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006046:	4576      	cmp	r6, lr
 8006048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800604c:	f849 3b04 	str.w	r3, [r9], #4
 8006050:	d8e6      	bhi.n	8006020 <__mdiff+0x88>
 8006052:	1b33      	subs	r3, r6, r4
 8006054:	3b15      	subs	r3, #21
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	3415      	adds	r4, #21
 800605c:	3304      	adds	r3, #4
 800605e:	42a6      	cmp	r6, r4
 8006060:	bf38      	it	cc
 8006062:	2304      	movcc	r3, #4
 8006064:	441d      	add	r5, r3
 8006066:	445b      	add	r3, fp
 8006068:	461e      	mov	r6, r3
 800606a:	462c      	mov	r4, r5
 800606c:	4544      	cmp	r4, r8
 800606e:	d30e      	bcc.n	800608e <__mdiff+0xf6>
 8006070:	f108 0103 	add.w	r1, r8, #3
 8006074:	1b49      	subs	r1, r1, r5
 8006076:	f021 0103 	bic.w	r1, r1, #3
 800607a:	3d03      	subs	r5, #3
 800607c:	45a8      	cmp	r8, r5
 800607e:	bf38      	it	cc
 8006080:	2100      	movcc	r1, #0
 8006082:	440b      	add	r3, r1
 8006084:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006088:	b199      	cbz	r1, 80060b2 <__mdiff+0x11a>
 800608a:	6117      	str	r7, [r2, #16]
 800608c:	e79e      	b.n	8005fcc <__mdiff+0x34>
 800608e:	46e6      	mov	lr, ip
 8006090:	f854 1b04 	ldr.w	r1, [r4], #4
 8006094:	fa1f fc81 	uxth.w	ip, r1
 8006098:	44f4      	add	ip, lr
 800609a:	0c08      	lsrs	r0, r1, #16
 800609c:	4471      	add	r1, lr
 800609e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80060a2:	b289      	uxth	r1, r1
 80060a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80060a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060ac:	f846 1b04 	str.w	r1, [r6], #4
 80060b0:	e7dc      	b.n	800606c <__mdiff+0xd4>
 80060b2:	3f01      	subs	r7, #1
 80060b4:	e7e6      	b.n	8006084 <__mdiff+0xec>
 80060b6:	bf00      	nop
 80060b8:	0800843b 	.word	0x0800843b
 80060bc:	0800844c 	.word	0x0800844c

080060c0 <__ulp>:
 80060c0:	4b0e      	ldr	r3, [pc, #56]	@ (80060fc <__ulp+0x3c>)
 80060c2:	400b      	ands	r3, r1
 80060c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dc08      	bgt.n	80060de <__ulp+0x1e>
 80060cc:	425b      	negs	r3, r3
 80060ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80060d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80060d6:	da04      	bge.n	80060e2 <__ulp+0x22>
 80060d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80060dc:	4113      	asrs	r3, r2
 80060de:	2200      	movs	r2, #0
 80060e0:	e008      	b.n	80060f4 <__ulp+0x34>
 80060e2:	f1a2 0314 	sub.w	r3, r2, #20
 80060e6:	2b1e      	cmp	r3, #30
 80060e8:	bfd6      	itet	le
 80060ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80060ee:	2201      	movgt	r2, #1
 80060f0:	40da      	lsrle	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	7ff00000 	.word	0x7ff00000

08006100 <__b2d>:
 8006100:	6902      	ldr	r2, [r0, #16]
 8006102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006104:	f100 0614 	add.w	r6, r0, #20
 8006108:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800610c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006110:	4f1e      	ldr	r7, [pc, #120]	@ (800618c <__b2d+0x8c>)
 8006112:	4620      	mov	r0, r4
 8006114:	f7ff fd54 	bl	8005bc0 <__hi0bits>
 8006118:	4603      	mov	r3, r0
 800611a:	f1c0 0020 	rsb	r0, r0, #32
 800611e:	2b0a      	cmp	r3, #10
 8006120:	f1a2 0504 	sub.w	r5, r2, #4
 8006124:	6008      	str	r0, [r1, #0]
 8006126:	dc12      	bgt.n	800614e <__b2d+0x4e>
 8006128:	42ae      	cmp	r6, r5
 800612a:	bf2c      	ite	cs
 800612c:	2200      	movcs	r2, #0
 800612e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006132:	f1c3 0c0b 	rsb	ip, r3, #11
 8006136:	3315      	adds	r3, #21
 8006138:	fa24 fe0c 	lsr.w	lr, r4, ip
 800613c:	fa04 f303 	lsl.w	r3, r4, r3
 8006140:	fa22 f20c 	lsr.w	r2, r2, ip
 8006144:	ea4e 0107 	orr.w	r1, lr, r7
 8006148:	431a      	orrs	r2, r3
 800614a:	4610      	mov	r0, r2
 800614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800614e:	42ae      	cmp	r6, r5
 8006150:	bf36      	itet	cc
 8006152:	f1a2 0508 	subcc.w	r5, r2, #8
 8006156:	2200      	movcs	r2, #0
 8006158:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800615c:	3b0b      	subs	r3, #11
 800615e:	d012      	beq.n	8006186 <__b2d+0x86>
 8006160:	f1c3 0720 	rsb	r7, r3, #32
 8006164:	fa22 f107 	lsr.w	r1, r2, r7
 8006168:	409c      	lsls	r4, r3
 800616a:	430c      	orrs	r4, r1
 800616c:	42b5      	cmp	r5, r6
 800616e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006172:	bf94      	ite	ls
 8006174:	2400      	movls	r4, #0
 8006176:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800617a:	409a      	lsls	r2, r3
 800617c:	40fc      	lsrs	r4, r7
 800617e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006182:	4322      	orrs	r2, r4
 8006184:	e7e1      	b.n	800614a <__b2d+0x4a>
 8006186:	ea44 0107 	orr.w	r1, r4, r7
 800618a:	e7de      	b.n	800614a <__b2d+0x4a>
 800618c:	3ff00000 	.word	0x3ff00000

08006190 <__d2b>:
 8006190:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006194:	2101      	movs	r1, #1
 8006196:	4690      	mov	r8, r2
 8006198:	4699      	mov	r9, r3
 800619a:	9e08      	ldr	r6, [sp, #32]
 800619c:	f7ff fc1e 	bl	80059dc <_Balloc>
 80061a0:	4604      	mov	r4, r0
 80061a2:	b930      	cbnz	r0, 80061b2 <__d2b+0x22>
 80061a4:	4602      	mov	r2, r0
 80061a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80061aa:	4b23      	ldr	r3, [pc, #140]	@ (8006238 <__d2b+0xa8>)
 80061ac:	4823      	ldr	r0, [pc, #140]	@ (800623c <__d2b+0xac>)
 80061ae:	f001 f989 	bl	80074c4 <__assert_func>
 80061b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80061b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061ba:	b10d      	cbz	r5, 80061c0 <__d2b+0x30>
 80061bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	f1b8 0300 	subs.w	r3, r8, #0
 80061c6:	d024      	beq.n	8006212 <__d2b+0x82>
 80061c8:	4668      	mov	r0, sp
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	f7ff fd17 	bl	8005bfe <__lo0bits>
 80061d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80061d4:	b1d8      	cbz	r0, 800620e <__d2b+0x7e>
 80061d6:	f1c0 0320 	rsb	r3, r0, #32
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	430b      	orrs	r3, r1
 80061e0:	40c2      	lsrs	r2, r0
 80061e2:	6163      	str	r3, [r4, #20]
 80061e4:	9201      	str	r2, [sp, #4]
 80061e6:	9b01      	ldr	r3, [sp, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bf0c      	ite	eq
 80061ec:	2201      	moveq	r2, #1
 80061ee:	2202      	movne	r2, #2
 80061f0:	61a3      	str	r3, [r4, #24]
 80061f2:	6122      	str	r2, [r4, #16]
 80061f4:	b1ad      	cbz	r5, 8006222 <__d2b+0x92>
 80061f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80061fa:	4405      	add	r5, r0
 80061fc:	6035      	str	r5, [r6, #0]
 80061fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006204:	6018      	str	r0, [r3, #0]
 8006206:	4620      	mov	r0, r4
 8006208:	b002      	add	sp, #8
 800620a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800620e:	6161      	str	r1, [r4, #20]
 8006210:	e7e9      	b.n	80061e6 <__d2b+0x56>
 8006212:	a801      	add	r0, sp, #4
 8006214:	f7ff fcf3 	bl	8005bfe <__lo0bits>
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	6163      	str	r3, [r4, #20]
 800621e:	3020      	adds	r0, #32
 8006220:	e7e7      	b.n	80061f2 <__d2b+0x62>
 8006222:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006226:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800622a:	6030      	str	r0, [r6, #0]
 800622c:	6918      	ldr	r0, [r3, #16]
 800622e:	f7ff fcc7 	bl	8005bc0 <__hi0bits>
 8006232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006236:	e7e4      	b.n	8006202 <__d2b+0x72>
 8006238:	0800843b 	.word	0x0800843b
 800623c:	0800844c 	.word	0x0800844c

08006240 <__ratio>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	b085      	sub	sp, #20
 8006246:	e9cd 1000 	strd	r1, r0, [sp]
 800624a:	a902      	add	r1, sp, #8
 800624c:	f7ff ff58 	bl	8006100 <__b2d>
 8006250:	468b      	mov	fp, r1
 8006252:	4606      	mov	r6, r0
 8006254:	460f      	mov	r7, r1
 8006256:	9800      	ldr	r0, [sp, #0]
 8006258:	a903      	add	r1, sp, #12
 800625a:	f7ff ff51 	bl	8006100 <__b2d>
 800625e:	460d      	mov	r5, r1
 8006260:	9b01      	ldr	r3, [sp, #4]
 8006262:	4689      	mov	r9, r1
 8006264:	6919      	ldr	r1, [r3, #16]
 8006266:	9b00      	ldr	r3, [sp, #0]
 8006268:	4604      	mov	r4, r0
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	4630      	mov	r0, r6
 800626e:	1ac9      	subs	r1, r1, r3
 8006270:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800627a:	2b00      	cmp	r3, #0
 800627c:	bfcd      	iteet	gt
 800627e:	463a      	movgt	r2, r7
 8006280:	462a      	movle	r2, r5
 8006282:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006286:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800628a:	bfd8      	it	le
 800628c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006290:	464b      	mov	r3, r9
 8006292:	4622      	mov	r2, r4
 8006294:	4659      	mov	r1, fp
 8006296:	f7fa fa49 	bl	800072c <__aeabi_ddiv>
 800629a:	b005      	add	sp, #20
 800629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062a0 <__copybits>:
 80062a0:	3901      	subs	r1, #1
 80062a2:	b570      	push	{r4, r5, r6, lr}
 80062a4:	1149      	asrs	r1, r1, #5
 80062a6:	6914      	ldr	r4, [r2, #16]
 80062a8:	3101      	adds	r1, #1
 80062aa:	f102 0314 	add.w	r3, r2, #20
 80062ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80062b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062b6:	1f05      	subs	r5, r0, #4
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d30c      	bcc.n	80062d6 <__copybits+0x36>
 80062bc:	1aa3      	subs	r3, r4, r2
 80062be:	3b11      	subs	r3, #17
 80062c0:	f023 0303 	bic.w	r3, r3, #3
 80062c4:	3211      	adds	r2, #17
 80062c6:	42a2      	cmp	r2, r4
 80062c8:	bf88      	it	hi
 80062ca:	2300      	movhi	r3, #0
 80062cc:	4418      	add	r0, r3
 80062ce:	2300      	movs	r3, #0
 80062d0:	4288      	cmp	r0, r1
 80062d2:	d305      	bcc.n	80062e0 <__copybits+0x40>
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80062da:	f845 6f04 	str.w	r6, [r5, #4]!
 80062de:	e7eb      	b.n	80062b8 <__copybits+0x18>
 80062e0:	f840 3b04 	str.w	r3, [r0], #4
 80062e4:	e7f4      	b.n	80062d0 <__copybits+0x30>

080062e6 <__any_on>:
 80062e6:	f100 0214 	add.w	r2, r0, #20
 80062ea:	6900      	ldr	r0, [r0, #16]
 80062ec:	114b      	asrs	r3, r1, #5
 80062ee:	4298      	cmp	r0, r3
 80062f0:	b510      	push	{r4, lr}
 80062f2:	db11      	blt.n	8006318 <__any_on+0x32>
 80062f4:	dd0a      	ble.n	800630c <__any_on+0x26>
 80062f6:	f011 011f 	ands.w	r1, r1, #31
 80062fa:	d007      	beq.n	800630c <__any_on+0x26>
 80062fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006300:	fa24 f001 	lsr.w	r0, r4, r1
 8006304:	fa00 f101 	lsl.w	r1, r0, r1
 8006308:	428c      	cmp	r4, r1
 800630a:	d10b      	bne.n	8006324 <__any_on+0x3e>
 800630c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006310:	4293      	cmp	r3, r2
 8006312:	d803      	bhi.n	800631c <__any_on+0x36>
 8006314:	2000      	movs	r0, #0
 8006316:	bd10      	pop	{r4, pc}
 8006318:	4603      	mov	r3, r0
 800631a:	e7f7      	b.n	800630c <__any_on+0x26>
 800631c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006320:	2900      	cmp	r1, #0
 8006322:	d0f5      	beq.n	8006310 <__any_on+0x2a>
 8006324:	2001      	movs	r0, #1
 8006326:	e7f6      	b.n	8006316 <__any_on+0x30>

08006328 <sulp>:
 8006328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632c:	460f      	mov	r7, r1
 800632e:	4690      	mov	r8, r2
 8006330:	f7ff fec6 	bl	80060c0 <__ulp>
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	f1b8 0f00 	cmp.w	r8, #0
 800633c:	d011      	beq.n	8006362 <sulp+0x3a>
 800633e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006342:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006346:	2b00      	cmp	r3, #0
 8006348:	dd0b      	ble.n	8006362 <sulp+0x3a>
 800634a:	2400      	movs	r4, #0
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006352:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	f7fa f8bd 	bl	80004d8 <__aeabi_dmul>
 800635e:	4604      	mov	r4, r0
 8006360:	460d      	mov	r5, r1
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800636a:	0000      	movs	r0, r0
 800636c:	0000      	movs	r0, r0
	...

08006370 <_strtod_l>:
 8006370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	b09f      	sub	sp, #124	@ 0x7c
 8006376:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006378:	2200      	movs	r2, #0
 800637a:	460c      	mov	r4, r1
 800637c:	921a      	str	r2, [sp, #104]	@ 0x68
 800637e:	f04f 0a00 	mov.w	sl, #0
 8006382:	f04f 0b00 	mov.w	fp, #0
 8006386:	460a      	mov	r2, r1
 8006388:	9005      	str	r0, [sp, #20]
 800638a:	9219      	str	r2, [sp, #100]	@ 0x64
 800638c:	7811      	ldrb	r1, [r2, #0]
 800638e:	292b      	cmp	r1, #43	@ 0x2b
 8006390:	d048      	beq.n	8006424 <_strtod_l+0xb4>
 8006392:	d836      	bhi.n	8006402 <_strtod_l+0x92>
 8006394:	290d      	cmp	r1, #13
 8006396:	d830      	bhi.n	80063fa <_strtod_l+0x8a>
 8006398:	2908      	cmp	r1, #8
 800639a:	d830      	bhi.n	80063fe <_strtod_l+0x8e>
 800639c:	2900      	cmp	r1, #0
 800639e:	d039      	beq.n	8006414 <_strtod_l+0xa4>
 80063a0:	2200      	movs	r2, #0
 80063a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80063a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80063a6:	782a      	ldrb	r2, [r5, #0]
 80063a8:	2a30      	cmp	r2, #48	@ 0x30
 80063aa:	f040 80b1 	bne.w	8006510 <_strtod_l+0x1a0>
 80063ae:	786a      	ldrb	r2, [r5, #1]
 80063b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80063b4:	2a58      	cmp	r2, #88	@ 0x58
 80063b6:	d16c      	bne.n	8006492 <_strtod_l+0x122>
 80063b8:	9302      	str	r3, [sp, #8]
 80063ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063bc:	4a8e      	ldr	r2, [pc, #568]	@ (80065f8 <_strtod_l+0x288>)
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	ab1a      	add	r3, sp, #104	@ 0x68
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	9805      	ldr	r0, [sp, #20]
 80063c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80063c8:	a919      	add	r1, sp, #100	@ 0x64
 80063ca:	f001 f915 	bl	80075f8 <__gethex>
 80063ce:	f010 060f 	ands.w	r6, r0, #15
 80063d2:	4604      	mov	r4, r0
 80063d4:	d005      	beq.n	80063e2 <_strtod_l+0x72>
 80063d6:	2e06      	cmp	r6, #6
 80063d8:	d126      	bne.n	8006428 <_strtod_l+0xb8>
 80063da:	2300      	movs	r3, #0
 80063dc:	3501      	adds	r5, #1
 80063de:	9519      	str	r5, [sp, #100]	@ 0x64
 80063e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 8584 	bne.w	8006ef2 <_strtod_l+0xb82>
 80063ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063ec:	b1bb      	cbz	r3, 800641e <_strtod_l+0xae>
 80063ee:	4650      	mov	r0, sl
 80063f0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80063f4:	b01f      	add	sp, #124	@ 0x7c
 80063f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fa:	2920      	cmp	r1, #32
 80063fc:	d1d0      	bne.n	80063a0 <_strtod_l+0x30>
 80063fe:	3201      	adds	r2, #1
 8006400:	e7c3      	b.n	800638a <_strtod_l+0x1a>
 8006402:	292d      	cmp	r1, #45	@ 0x2d
 8006404:	d1cc      	bne.n	80063a0 <_strtod_l+0x30>
 8006406:	2101      	movs	r1, #1
 8006408:	910b      	str	r1, [sp, #44]	@ 0x2c
 800640a:	1c51      	adds	r1, r2, #1
 800640c:	9119      	str	r1, [sp, #100]	@ 0x64
 800640e:	7852      	ldrb	r2, [r2, #1]
 8006410:	2a00      	cmp	r2, #0
 8006412:	d1c7      	bne.n	80063a4 <_strtod_l+0x34>
 8006414:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006416:	9419      	str	r4, [sp, #100]	@ 0x64
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 8568 	bne.w	8006eee <_strtod_l+0xb7e>
 800641e:	4650      	mov	r0, sl
 8006420:	4659      	mov	r1, fp
 8006422:	e7e7      	b.n	80063f4 <_strtod_l+0x84>
 8006424:	2100      	movs	r1, #0
 8006426:	e7ef      	b.n	8006408 <_strtod_l+0x98>
 8006428:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800642a:	b13a      	cbz	r2, 800643c <_strtod_l+0xcc>
 800642c:	2135      	movs	r1, #53	@ 0x35
 800642e:	a81c      	add	r0, sp, #112	@ 0x70
 8006430:	f7ff ff36 	bl	80062a0 <__copybits>
 8006434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006436:	9805      	ldr	r0, [sp, #20]
 8006438:	f7ff fb10 	bl	8005a5c <_Bfree>
 800643c:	3e01      	subs	r6, #1
 800643e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006440:	2e04      	cmp	r6, #4
 8006442:	d806      	bhi.n	8006452 <_strtod_l+0xe2>
 8006444:	e8df f006 	tbb	[pc, r6]
 8006448:	201d0314 	.word	0x201d0314
 800644c:	14          	.byte	0x14
 800644d:	00          	.byte	0x00
 800644e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006452:	05e1      	lsls	r1, r4, #23
 8006454:	bf48      	it	mi
 8006456:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800645a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800645e:	0d1b      	lsrs	r3, r3, #20
 8006460:	051b      	lsls	r3, r3, #20
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1bd      	bne.n	80063e2 <_strtod_l+0x72>
 8006466:	f7fe fb2b 	bl	8004ac0 <__errno>
 800646a:	2322      	movs	r3, #34	@ 0x22
 800646c:	6003      	str	r3, [r0, #0]
 800646e:	e7b8      	b.n	80063e2 <_strtod_l+0x72>
 8006470:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006474:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006478:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800647c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006480:	e7e7      	b.n	8006452 <_strtod_l+0xe2>
 8006482:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80065fc <_strtod_l+0x28c>
 8006486:	e7e4      	b.n	8006452 <_strtod_l+0xe2>
 8006488:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800648c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006490:	e7df      	b.n	8006452 <_strtod_l+0xe2>
 8006492:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	9219      	str	r2, [sp, #100]	@ 0x64
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b30      	cmp	r3, #48	@ 0x30
 800649c:	d0f9      	beq.n	8006492 <_strtod_l+0x122>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d09f      	beq.n	80063e2 <_strtod_l+0x72>
 80064a2:	2301      	movs	r3, #1
 80064a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80064a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064a8:	220a      	movs	r2, #10
 80064aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80064ac:	2300      	movs	r3, #0
 80064ae:	461f      	mov	r7, r3
 80064b0:	9308      	str	r3, [sp, #32]
 80064b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80064b4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80064b6:	7805      	ldrb	r5, [r0, #0]
 80064b8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80064bc:	b2d9      	uxtb	r1, r3
 80064be:	2909      	cmp	r1, #9
 80064c0:	d928      	bls.n	8006514 <_strtod_l+0x1a4>
 80064c2:	2201      	movs	r2, #1
 80064c4:	494e      	ldr	r1, [pc, #312]	@ (8006600 <_strtod_l+0x290>)
 80064c6:	f000 ffc7 	bl	8007458 <strncmp>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d032      	beq.n	8006534 <_strtod_l+0x1c4>
 80064ce:	2000      	movs	r0, #0
 80064d0:	462a      	mov	r2, r5
 80064d2:	4681      	mov	r9, r0
 80064d4:	463d      	mov	r5, r7
 80064d6:	4603      	mov	r3, r0
 80064d8:	2a65      	cmp	r2, #101	@ 0x65
 80064da:	d001      	beq.n	80064e0 <_strtod_l+0x170>
 80064dc:	2a45      	cmp	r2, #69	@ 0x45
 80064de:	d114      	bne.n	800650a <_strtod_l+0x19a>
 80064e0:	b91d      	cbnz	r5, 80064ea <_strtod_l+0x17a>
 80064e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064e4:	4302      	orrs	r2, r0
 80064e6:	d095      	beq.n	8006414 <_strtod_l+0xa4>
 80064e8:	2500      	movs	r5, #0
 80064ea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80064ec:	1c62      	adds	r2, r4, #1
 80064ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80064f0:	7862      	ldrb	r2, [r4, #1]
 80064f2:	2a2b      	cmp	r2, #43	@ 0x2b
 80064f4:	d077      	beq.n	80065e6 <_strtod_l+0x276>
 80064f6:	2a2d      	cmp	r2, #45	@ 0x2d
 80064f8:	d07b      	beq.n	80065f2 <_strtod_l+0x282>
 80064fa:	f04f 0c00 	mov.w	ip, #0
 80064fe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006502:	2909      	cmp	r1, #9
 8006504:	f240 8082 	bls.w	800660c <_strtod_l+0x29c>
 8006508:	9419      	str	r4, [sp, #100]	@ 0x64
 800650a:	f04f 0800 	mov.w	r8, #0
 800650e:	e0a2      	b.n	8006656 <_strtod_l+0x2e6>
 8006510:	2300      	movs	r3, #0
 8006512:	e7c7      	b.n	80064a4 <_strtod_l+0x134>
 8006514:	2f08      	cmp	r7, #8
 8006516:	bfd5      	itete	le
 8006518:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800651a:	9908      	ldrgt	r1, [sp, #32]
 800651c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006520:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006524:	f100 0001 	add.w	r0, r0, #1
 8006528:	bfd4      	ite	le
 800652a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800652c:	9308      	strgt	r3, [sp, #32]
 800652e:	3701      	adds	r7, #1
 8006530:	9019      	str	r0, [sp, #100]	@ 0x64
 8006532:	e7bf      	b.n	80064b4 <_strtod_l+0x144>
 8006534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	9219      	str	r2, [sp, #100]	@ 0x64
 800653a:	785a      	ldrb	r2, [r3, #1]
 800653c:	b37f      	cbz	r7, 800659e <_strtod_l+0x22e>
 800653e:	4681      	mov	r9, r0
 8006540:	463d      	mov	r5, r7
 8006542:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006546:	2b09      	cmp	r3, #9
 8006548:	d912      	bls.n	8006570 <_strtod_l+0x200>
 800654a:	2301      	movs	r3, #1
 800654c:	e7c4      	b.n	80064d8 <_strtod_l+0x168>
 800654e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006550:	3001      	adds	r0, #1
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	9219      	str	r2, [sp, #100]	@ 0x64
 8006556:	785a      	ldrb	r2, [r3, #1]
 8006558:	2a30      	cmp	r2, #48	@ 0x30
 800655a:	d0f8      	beq.n	800654e <_strtod_l+0x1de>
 800655c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006560:	2b08      	cmp	r3, #8
 8006562:	f200 84cb 	bhi.w	8006efc <_strtod_l+0xb8c>
 8006566:	4681      	mov	r9, r0
 8006568:	2000      	movs	r0, #0
 800656a:	4605      	mov	r5, r0
 800656c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800656e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006570:	3a30      	subs	r2, #48	@ 0x30
 8006572:	f100 0301 	add.w	r3, r0, #1
 8006576:	d02a      	beq.n	80065ce <_strtod_l+0x25e>
 8006578:	4499      	add	r9, r3
 800657a:	210a      	movs	r1, #10
 800657c:	462b      	mov	r3, r5
 800657e:	eb00 0c05 	add.w	ip, r0, r5
 8006582:	4563      	cmp	r3, ip
 8006584:	d10d      	bne.n	80065a2 <_strtod_l+0x232>
 8006586:	1c69      	adds	r1, r5, #1
 8006588:	4401      	add	r1, r0
 800658a:	4428      	add	r0, r5
 800658c:	2808      	cmp	r0, #8
 800658e:	dc16      	bgt.n	80065be <_strtod_l+0x24e>
 8006590:	230a      	movs	r3, #10
 8006592:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006594:	fb03 2300 	mla	r3, r3, r0, r2
 8006598:	930a      	str	r3, [sp, #40]	@ 0x28
 800659a:	2300      	movs	r3, #0
 800659c:	e018      	b.n	80065d0 <_strtod_l+0x260>
 800659e:	4638      	mov	r0, r7
 80065a0:	e7da      	b.n	8006558 <_strtod_l+0x1e8>
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	f103 0301 	add.w	r3, r3, #1
 80065a8:	dc03      	bgt.n	80065b2 <_strtod_l+0x242>
 80065aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80065ac:	434e      	muls	r6, r1
 80065ae:	960a      	str	r6, [sp, #40]	@ 0x28
 80065b0:	e7e7      	b.n	8006582 <_strtod_l+0x212>
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	bfde      	ittt	le
 80065b6:	9e08      	ldrle	r6, [sp, #32]
 80065b8:	434e      	mulle	r6, r1
 80065ba:	9608      	strle	r6, [sp, #32]
 80065bc:	e7e1      	b.n	8006582 <_strtod_l+0x212>
 80065be:	280f      	cmp	r0, #15
 80065c0:	dceb      	bgt.n	800659a <_strtod_l+0x22a>
 80065c2:	230a      	movs	r3, #10
 80065c4:	9808      	ldr	r0, [sp, #32]
 80065c6:	fb03 2300 	mla	r3, r3, r0, r2
 80065ca:	9308      	str	r3, [sp, #32]
 80065cc:	e7e5      	b.n	800659a <_strtod_l+0x22a>
 80065ce:	4629      	mov	r1, r5
 80065d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065d2:	460d      	mov	r5, r1
 80065d4:	1c50      	adds	r0, r2, #1
 80065d6:	9019      	str	r0, [sp, #100]	@ 0x64
 80065d8:	7852      	ldrb	r2, [r2, #1]
 80065da:	4618      	mov	r0, r3
 80065dc:	e7b1      	b.n	8006542 <_strtod_l+0x1d2>
 80065de:	f04f 0900 	mov.w	r9, #0
 80065e2:	2301      	movs	r3, #1
 80065e4:	e77d      	b.n	80064e2 <_strtod_l+0x172>
 80065e6:	f04f 0c00 	mov.w	ip, #0
 80065ea:	1ca2      	adds	r2, r4, #2
 80065ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80065ee:	78a2      	ldrb	r2, [r4, #2]
 80065f0:	e785      	b.n	80064fe <_strtod_l+0x18e>
 80065f2:	f04f 0c01 	mov.w	ip, #1
 80065f6:	e7f8      	b.n	80065ea <_strtod_l+0x27a>
 80065f8:	080085c0 	.word	0x080085c0
 80065fc:	7ff00000 	.word	0x7ff00000
 8006600:	080085a8 	.word	0x080085a8
 8006604:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006606:	1c51      	adds	r1, r2, #1
 8006608:	9119      	str	r1, [sp, #100]	@ 0x64
 800660a:	7852      	ldrb	r2, [r2, #1]
 800660c:	2a30      	cmp	r2, #48	@ 0x30
 800660e:	d0f9      	beq.n	8006604 <_strtod_l+0x294>
 8006610:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006614:	2908      	cmp	r1, #8
 8006616:	f63f af78 	bhi.w	800650a <_strtod_l+0x19a>
 800661a:	f04f 080a 	mov.w	r8, #10
 800661e:	3a30      	subs	r2, #48	@ 0x30
 8006620:	920e      	str	r2, [sp, #56]	@ 0x38
 8006622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006624:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006626:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006628:	1c56      	adds	r6, r2, #1
 800662a:	9619      	str	r6, [sp, #100]	@ 0x64
 800662c:	7852      	ldrb	r2, [r2, #1]
 800662e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006632:	f1be 0f09 	cmp.w	lr, #9
 8006636:	d939      	bls.n	80066ac <_strtod_l+0x33c>
 8006638:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800663a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800663e:	1a76      	subs	r6, r6, r1
 8006640:	2e08      	cmp	r6, #8
 8006642:	dc03      	bgt.n	800664c <_strtod_l+0x2dc>
 8006644:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006646:	4588      	cmp	r8, r1
 8006648:	bfa8      	it	ge
 800664a:	4688      	movge	r8, r1
 800664c:	f1bc 0f00 	cmp.w	ip, #0
 8006650:	d001      	beq.n	8006656 <_strtod_l+0x2e6>
 8006652:	f1c8 0800 	rsb	r8, r8, #0
 8006656:	2d00      	cmp	r5, #0
 8006658:	d14e      	bne.n	80066f8 <_strtod_l+0x388>
 800665a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800665c:	4308      	orrs	r0, r1
 800665e:	f47f aec0 	bne.w	80063e2 <_strtod_l+0x72>
 8006662:	2b00      	cmp	r3, #0
 8006664:	f47f aed6 	bne.w	8006414 <_strtod_l+0xa4>
 8006668:	2a69      	cmp	r2, #105	@ 0x69
 800666a:	d028      	beq.n	80066be <_strtod_l+0x34e>
 800666c:	dc25      	bgt.n	80066ba <_strtod_l+0x34a>
 800666e:	2a49      	cmp	r2, #73	@ 0x49
 8006670:	d025      	beq.n	80066be <_strtod_l+0x34e>
 8006672:	2a4e      	cmp	r2, #78	@ 0x4e
 8006674:	f47f aece 	bne.w	8006414 <_strtod_l+0xa4>
 8006678:	499a      	ldr	r1, [pc, #616]	@ (80068e4 <_strtod_l+0x574>)
 800667a:	a819      	add	r0, sp, #100	@ 0x64
 800667c:	f001 f9de 	bl	8007a3c <__match>
 8006680:	2800      	cmp	r0, #0
 8006682:	f43f aec7 	beq.w	8006414 <_strtod_l+0xa4>
 8006686:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b28      	cmp	r3, #40	@ 0x28
 800668c:	d12e      	bne.n	80066ec <_strtod_l+0x37c>
 800668e:	4996      	ldr	r1, [pc, #600]	@ (80068e8 <_strtod_l+0x578>)
 8006690:	aa1c      	add	r2, sp, #112	@ 0x70
 8006692:	a819      	add	r0, sp, #100	@ 0x64
 8006694:	f001 f9e6 	bl	8007a64 <__hexnan>
 8006698:	2805      	cmp	r0, #5
 800669a:	d127      	bne.n	80066ec <_strtod_l+0x37c>
 800669c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800669e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80066a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80066a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80066aa:	e69a      	b.n	80063e2 <_strtod_l+0x72>
 80066ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80066ae:	fb08 2101 	mla	r1, r8, r1, r2
 80066b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80066b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80066b8:	e7b5      	b.n	8006626 <_strtod_l+0x2b6>
 80066ba:	2a6e      	cmp	r2, #110	@ 0x6e
 80066bc:	e7da      	b.n	8006674 <_strtod_l+0x304>
 80066be:	498b      	ldr	r1, [pc, #556]	@ (80068ec <_strtod_l+0x57c>)
 80066c0:	a819      	add	r0, sp, #100	@ 0x64
 80066c2:	f001 f9bb 	bl	8007a3c <__match>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f43f aea4 	beq.w	8006414 <_strtod_l+0xa4>
 80066cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066ce:	4988      	ldr	r1, [pc, #544]	@ (80068f0 <_strtod_l+0x580>)
 80066d0:	3b01      	subs	r3, #1
 80066d2:	a819      	add	r0, sp, #100	@ 0x64
 80066d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80066d6:	f001 f9b1 	bl	8007a3c <__match>
 80066da:	b910      	cbnz	r0, 80066e2 <_strtod_l+0x372>
 80066dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066de:	3301      	adds	r3, #1
 80066e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80066e2:	f04f 0a00 	mov.w	sl, #0
 80066e6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80068f4 <_strtod_l+0x584>
 80066ea:	e67a      	b.n	80063e2 <_strtod_l+0x72>
 80066ec:	4882      	ldr	r0, [pc, #520]	@ (80068f8 <_strtod_l+0x588>)
 80066ee:	f000 fee3 	bl	80074b8 <nan>
 80066f2:	4682      	mov	sl, r0
 80066f4:	468b      	mov	fp, r1
 80066f6:	e674      	b.n	80063e2 <_strtod_l+0x72>
 80066f8:	eba8 0309 	sub.w	r3, r8, r9
 80066fc:	2f00      	cmp	r7, #0
 80066fe:	bf08      	it	eq
 8006700:	462f      	moveq	r7, r5
 8006702:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006704:	2d10      	cmp	r5, #16
 8006706:	462c      	mov	r4, r5
 8006708:	9309      	str	r3, [sp, #36]	@ 0x24
 800670a:	bfa8      	it	ge
 800670c:	2410      	movge	r4, #16
 800670e:	f7f9 fe69 	bl	80003e4 <__aeabi_ui2d>
 8006712:	2d09      	cmp	r5, #9
 8006714:	4682      	mov	sl, r0
 8006716:	468b      	mov	fp, r1
 8006718:	dc11      	bgt.n	800673e <_strtod_l+0x3ce>
 800671a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800671c:	2b00      	cmp	r3, #0
 800671e:	f43f ae60 	beq.w	80063e2 <_strtod_l+0x72>
 8006722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006724:	dd76      	ble.n	8006814 <_strtod_l+0x4a4>
 8006726:	2b16      	cmp	r3, #22
 8006728:	dc5d      	bgt.n	80067e6 <_strtod_l+0x476>
 800672a:	4974      	ldr	r1, [pc, #464]	@ (80068fc <_strtod_l+0x58c>)
 800672c:	4652      	mov	r2, sl
 800672e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006732:	465b      	mov	r3, fp
 8006734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006738:	f7f9 fece 	bl	80004d8 <__aeabi_dmul>
 800673c:	e7d9      	b.n	80066f2 <_strtod_l+0x382>
 800673e:	4b6f      	ldr	r3, [pc, #444]	@ (80068fc <_strtod_l+0x58c>)
 8006740:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006744:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006748:	f7f9 fec6 	bl	80004d8 <__aeabi_dmul>
 800674c:	4682      	mov	sl, r0
 800674e:	9808      	ldr	r0, [sp, #32]
 8006750:	468b      	mov	fp, r1
 8006752:	f7f9 fe47 	bl	80003e4 <__aeabi_ui2d>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4650      	mov	r0, sl
 800675c:	4659      	mov	r1, fp
 800675e:	f7f9 fd05 	bl	800016c <__adddf3>
 8006762:	2d0f      	cmp	r5, #15
 8006764:	4682      	mov	sl, r0
 8006766:	468b      	mov	fp, r1
 8006768:	ddd7      	ble.n	800671a <_strtod_l+0x3aa>
 800676a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676c:	1b2c      	subs	r4, r5, r4
 800676e:	441c      	add	r4, r3
 8006770:	2c00      	cmp	r4, #0
 8006772:	f340 8096 	ble.w	80068a2 <_strtod_l+0x532>
 8006776:	f014 030f 	ands.w	r3, r4, #15
 800677a:	d00a      	beq.n	8006792 <_strtod_l+0x422>
 800677c:	495f      	ldr	r1, [pc, #380]	@ (80068fc <_strtod_l+0x58c>)
 800677e:	4652      	mov	r2, sl
 8006780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006788:	465b      	mov	r3, fp
 800678a:	f7f9 fea5 	bl	80004d8 <__aeabi_dmul>
 800678e:	4682      	mov	sl, r0
 8006790:	468b      	mov	fp, r1
 8006792:	f034 040f 	bics.w	r4, r4, #15
 8006796:	d073      	beq.n	8006880 <_strtod_l+0x510>
 8006798:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800679c:	dd48      	ble.n	8006830 <_strtod_l+0x4c0>
 800679e:	2400      	movs	r4, #0
 80067a0:	46a0      	mov	r8, r4
 80067a2:	46a1      	mov	r9, r4
 80067a4:	940a      	str	r4, [sp, #40]	@ 0x28
 80067a6:	2322      	movs	r3, #34	@ 0x22
 80067a8:	f04f 0a00 	mov.w	sl, #0
 80067ac:	9a05      	ldr	r2, [sp, #20]
 80067ae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80068f4 <_strtod_l+0x584>
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f43f ae13 	beq.w	80063e2 <_strtod_l+0x72>
 80067bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067be:	9805      	ldr	r0, [sp, #20]
 80067c0:	f7ff f94c 	bl	8005a5c <_Bfree>
 80067c4:	4649      	mov	r1, r9
 80067c6:	9805      	ldr	r0, [sp, #20]
 80067c8:	f7ff f948 	bl	8005a5c <_Bfree>
 80067cc:	4641      	mov	r1, r8
 80067ce:	9805      	ldr	r0, [sp, #20]
 80067d0:	f7ff f944 	bl	8005a5c <_Bfree>
 80067d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067d6:	9805      	ldr	r0, [sp, #20]
 80067d8:	f7ff f940 	bl	8005a5c <_Bfree>
 80067dc:	4621      	mov	r1, r4
 80067de:	9805      	ldr	r0, [sp, #20]
 80067e0:	f7ff f93c 	bl	8005a5c <_Bfree>
 80067e4:	e5fd      	b.n	80063e2 <_strtod_l+0x72>
 80067e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80067ec:	4293      	cmp	r3, r2
 80067ee:	dbbc      	blt.n	800676a <_strtod_l+0x3fa>
 80067f0:	4c42      	ldr	r4, [pc, #264]	@ (80068fc <_strtod_l+0x58c>)
 80067f2:	f1c5 050f 	rsb	r5, r5, #15
 80067f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80067fa:	4652      	mov	r2, sl
 80067fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006800:	465b      	mov	r3, fp
 8006802:	f7f9 fe69 	bl	80004d8 <__aeabi_dmul>
 8006806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006808:	1b5d      	subs	r5, r3, r5
 800680a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800680e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006812:	e791      	b.n	8006738 <_strtod_l+0x3c8>
 8006814:	3316      	adds	r3, #22
 8006816:	dba8      	blt.n	800676a <_strtod_l+0x3fa>
 8006818:	4b38      	ldr	r3, [pc, #224]	@ (80068fc <_strtod_l+0x58c>)
 800681a:	eba9 0808 	sub.w	r8, r9, r8
 800681e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006822:	4650      	mov	r0, sl
 8006824:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006828:	4659      	mov	r1, fp
 800682a:	f7f9 ff7f 	bl	800072c <__aeabi_ddiv>
 800682e:	e760      	b.n	80066f2 <_strtod_l+0x382>
 8006830:	4b33      	ldr	r3, [pc, #204]	@ (8006900 <_strtod_l+0x590>)
 8006832:	4650      	mov	r0, sl
 8006834:	9308      	str	r3, [sp, #32]
 8006836:	2300      	movs	r3, #0
 8006838:	4659      	mov	r1, fp
 800683a:	461e      	mov	r6, r3
 800683c:	1124      	asrs	r4, r4, #4
 800683e:	2c01      	cmp	r4, #1
 8006840:	dc21      	bgt.n	8006886 <_strtod_l+0x516>
 8006842:	b10b      	cbz	r3, 8006848 <_strtod_l+0x4d8>
 8006844:	4682      	mov	sl, r0
 8006846:	468b      	mov	fp, r1
 8006848:	492d      	ldr	r1, [pc, #180]	@ (8006900 <_strtod_l+0x590>)
 800684a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800684e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006852:	4652      	mov	r2, sl
 8006854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006858:	465b      	mov	r3, fp
 800685a:	f7f9 fe3d 	bl	80004d8 <__aeabi_dmul>
 800685e:	4b25      	ldr	r3, [pc, #148]	@ (80068f4 <_strtod_l+0x584>)
 8006860:	460a      	mov	r2, r1
 8006862:	400b      	ands	r3, r1
 8006864:	4927      	ldr	r1, [pc, #156]	@ (8006904 <_strtod_l+0x594>)
 8006866:	4682      	mov	sl, r0
 8006868:	428b      	cmp	r3, r1
 800686a:	d898      	bhi.n	800679e <_strtod_l+0x42e>
 800686c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006870:	428b      	cmp	r3, r1
 8006872:	bf86      	itte	hi
 8006874:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006878:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006908 <_strtod_l+0x598>
 800687c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006880:	2300      	movs	r3, #0
 8006882:	9308      	str	r3, [sp, #32]
 8006884:	e07a      	b.n	800697c <_strtod_l+0x60c>
 8006886:	07e2      	lsls	r2, r4, #31
 8006888:	d505      	bpl.n	8006896 <_strtod_l+0x526>
 800688a:	9b08      	ldr	r3, [sp, #32]
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f7f9 fe22 	bl	80004d8 <__aeabi_dmul>
 8006894:	2301      	movs	r3, #1
 8006896:	9a08      	ldr	r2, [sp, #32]
 8006898:	3601      	adds	r6, #1
 800689a:	3208      	adds	r2, #8
 800689c:	1064      	asrs	r4, r4, #1
 800689e:	9208      	str	r2, [sp, #32]
 80068a0:	e7cd      	b.n	800683e <_strtod_l+0x4ce>
 80068a2:	d0ed      	beq.n	8006880 <_strtod_l+0x510>
 80068a4:	4264      	negs	r4, r4
 80068a6:	f014 020f 	ands.w	r2, r4, #15
 80068aa:	d00a      	beq.n	80068c2 <_strtod_l+0x552>
 80068ac:	4b13      	ldr	r3, [pc, #76]	@ (80068fc <_strtod_l+0x58c>)
 80068ae:	4650      	mov	r0, sl
 80068b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b4:	4659      	mov	r1, fp
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f7f9 ff37 	bl	800072c <__aeabi_ddiv>
 80068be:	4682      	mov	sl, r0
 80068c0:	468b      	mov	fp, r1
 80068c2:	1124      	asrs	r4, r4, #4
 80068c4:	d0dc      	beq.n	8006880 <_strtod_l+0x510>
 80068c6:	2c1f      	cmp	r4, #31
 80068c8:	dd20      	ble.n	800690c <_strtod_l+0x59c>
 80068ca:	2400      	movs	r4, #0
 80068cc:	46a0      	mov	r8, r4
 80068ce:	46a1      	mov	r9, r4
 80068d0:	940a      	str	r4, [sp, #40]	@ 0x28
 80068d2:	2322      	movs	r3, #34	@ 0x22
 80068d4:	9a05      	ldr	r2, [sp, #20]
 80068d6:	f04f 0a00 	mov.w	sl, #0
 80068da:	f04f 0b00 	mov.w	fp, #0
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	e768      	b.n	80067b4 <_strtod_l+0x444>
 80068e2:	bf00      	nop
 80068e4:	08008393 	.word	0x08008393
 80068e8:	080085ac 	.word	0x080085ac
 80068ec:	0800838b 	.word	0x0800838b
 80068f0:	080083c2 	.word	0x080083c2
 80068f4:	7ff00000 	.word	0x7ff00000
 80068f8:	08008755 	.word	0x08008755
 80068fc:	080084e0 	.word	0x080084e0
 8006900:	080084b8 	.word	0x080084b8
 8006904:	7ca00000 	.word	0x7ca00000
 8006908:	7fefffff 	.word	0x7fefffff
 800690c:	f014 0310 	ands.w	r3, r4, #16
 8006910:	bf18      	it	ne
 8006912:	236a      	movne	r3, #106	@ 0x6a
 8006914:	4650      	mov	r0, sl
 8006916:	9308      	str	r3, [sp, #32]
 8006918:	4659      	mov	r1, fp
 800691a:	2300      	movs	r3, #0
 800691c:	4ea9      	ldr	r6, [pc, #676]	@ (8006bc4 <_strtod_l+0x854>)
 800691e:	07e2      	lsls	r2, r4, #31
 8006920:	d504      	bpl.n	800692c <_strtod_l+0x5bc>
 8006922:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006926:	f7f9 fdd7 	bl	80004d8 <__aeabi_dmul>
 800692a:	2301      	movs	r3, #1
 800692c:	1064      	asrs	r4, r4, #1
 800692e:	f106 0608 	add.w	r6, r6, #8
 8006932:	d1f4      	bne.n	800691e <_strtod_l+0x5ae>
 8006934:	b10b      	cbz	r3, 800693a <_strtod_l+0x5ca>
 8006936:	4682      	mov	sl, r0
 8006938:	468b      	mov	fp, r1
 800693a:	9b08      	ldr	r3, [sp, #32]
 800693c:	b1b3      	cbz	r3, 800696c <_strtod_l+0x5fc>
 800693e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006942:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006946:	2b00      	cmp	r3, #0
 8006948:	4659      	mov	r1, fp
 800694a:	dd0f      	ble.n	800696c <_strtod_l+0x5fc>
 800694c:	2b1f      	cmp	r3, #31
 800694e:	dd57      	ble.n	8006a00 <_strtod_l+0x690>
 8006950:	2b34      	cmp	r3, #52	@ 0x34
 8006952:	bfd8      	it	le
 8006954:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006958:	f04f 0a00 	mov.w	sl, #0
 800695c:	bfcf      	iteee	gt
 800695e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006962:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006966:	4093      	lslle	r3, r2
 8006968:	ea03 0b01 	andle.w	fp, r3, r1
 800696c:	2200      	movs	r2, #0
 800696e:	2300      	movs	r3, #0
 8006970:	4650      	mov	r0, sl
 8006972:	4659      	mov	r1, fp
 8006974:	f7fa f818 	bl	80009a8 <__aeabi_dcmpeq>
 8006978:	2800      	cmp	r0, #0
 800697a:	d1a6      	bne.n	80068ca <_strtod_l+0x55a>
 800697c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800697e:	463a      	mov	r2, r7
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006984:	462b      	mov	r3, r5
 8006986:	9805      	ldr	r0, [sp, #20]
 8006988:	f7ff f8d0 	bl	8005b2c <__s2b>
 800698c:	900a      	str	r0, [sp, #40]	@ 0x28
 800698e:	2800      	cmp	r0, #0
 8006990:	f43f af05 	beq.w	800679e <_strtod_l+0x42e>
 8006994:	2400      	movs	r4, #0
 8006996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006998:	eba9 0308 	sub.w	r3, r9, r8
 800699c:	2a00      	cmp	r2, #0
 800699e:	bfa8      	it	ge
 80069a0:	2300      	movge	r3, #0
 80069a2:	46a0      	mov	r8, r4
 80069a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80069a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80069aa:	9316      	str	r3, [sp, #88]	@ 0x58
 80069ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ae:	9805      	ldr	r0, [sp, #20]
 80069b0:	6859      	ldr	r1, [r3, #4]
 80069b2:	f7ff f813 	bl	80059dc <_Balloc>
 80069b6:	4681      	mov	r9, r0
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f43f aef4 	beq.w	80067a6 <_strtod_l+0x436>
 80069be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069c0:	300c      	adds	r0, #12
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	f103 010c 	add.w	r1, r3, #12
 80069c8:	3202      	adds	r2, #2
 80069ca:	0092      	lsls	r2, r2, #2
 80069cc:	f000 fd66 	bl	800749c <memcpy>
 80069d0:	ab1c      	add	r3, sp, #112	@ 0x70
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	4652      	mov	r2, sl
 80069da:	465b      	mov	r3, fp
 80069dc:	9805      	ldr	r0, [sp, #20]
 80069de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80069e2:	f7ff fbd5 	bl	8006190 <__d2b>
 80069e6:	901a      	str	r0, [sp, #104]	@ 0x68
 80069e8:	2800      	cmp	r0, #0
 80069ea:	f43f aedc 	beq.w	80067a6 <_strtod_l+0x436>
 80069ee:	2101      	movs	r1, #1
 80069f0:	9805      	ldr	r0, [sp, #20]
 80069f2:	f7ff f931 	bl	8005c58 <__i2b>
 80069f6:	4680      	mov	r8, r0
 80069f8:	b948      	cbnz	r0, 8006a0e <_strtod_l+0x69e>
 80069fa:	f04f 0800 	mov.w	r8, #0
 80069fe:	e6d2      	b.n	80067a6 <_strtod_l+0x436>
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	ea03 0a0a 	and.w	sl, r3, sl
 8006a0c:	e7ae      	b.n	800696c <_strtod_l+0x5fc>
 8006a0e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006a10:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	bfab      	itete	ge
 8006a16:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006a18:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006a1a:	18ef      	addge	r7, r5, r3
 8006a1c:	1b5e      	sublt	r6, r3, r5
 8006a1e:	9b08      	ldr	r3, [sp, #32]
 8006a20:	bfa8      	it	ge
 8006a22:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006a24:	eba5 0503 	sub.w	r5, r5, r3
 8006a28:	4415      	add	r5, r2
 8006a2a:	4b67      	ldr	r3, [pc, #412]	@ (8006bc8 <_strtod_l+0x858>)
 8006a2c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8006a30:	bfb8      	it	lt
 8006a32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006a34:	429d      	cmp	r5, r3
 8006a36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006a3a:	da50      	bge.n	8006ade <_strtod_l+0x76e>
 8006a3c:	1b5b      	subs	r3, r3, r5
 8006a3e:	2b1f      	cmp	r3, #31
 8006a40:	f04f 0101 	mov.w	r1, #1
 8006a44:	eba2 0203 	sub.w	r2, r2, r3
 8006a48:	dc3d      	bgt.n	8006ac6 <_strtod_l+0x756>
 8006a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a50:	2300      	movs	r3, #0
 8006a52:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a54:	18bd      	adds	r5, r7, r2
 8006a56:	9b08      	ldr	r3, [sp, #32]
 8006a58:	42af      	cmp	r7, r5
 8006a5a:	4416      	add	r6, r2
 8006a5c:	441e      	add	r6, r3
 8006a5e:	463b      	mov	r3, r7
 8006a60:	bfa8      	it	ge
 8006a62:	462b      	movge	r3, r5
 8006a64:	42b3      	cmp	r3, r6
 8006a66:	bfa8      	it	ge
 8006a68:	4633      	movge	r3, r6
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bfc2      	ittt	gt
 8006a6e:	1aed      	subgt	r5, r5, r3
 8006a70:	1af6      	subgt	r6, r6, r3
 8006a72:	1aff      	subgt	r7, r7, r3
 8006a74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dd16      	ble.n	8006aa8 <_strtod_l+0x738>
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	9805      	ldr	r0, [sp, #20]
 8006a80:	f7ff f9a8 	bl	8005dd4 <__pow5mult>
 8006a84:	4680      	mov	r8, r0
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0b7      	beq.n	80069fa <_strtod_l+0x68a>
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a8e:	9805      	ldr	r0, [sp, #20]
 8006a90:	f7ff f8f8 	bl	8005c84 <__multiply>
 8006a94:	900e      	str	r0, [sp, #56]	@ 0x38
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f43f ae85 	beq.w	80067a6 <_strtod_l+0x436>
 8006a9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a9e:	9805      	ldr	r0, [sp, #20]
 8006aa0:	f7fe ffdc 	bl	8005a5c <_Bfree>
 8006aa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	dc1d      	bgt.n	8006ae8 <_strtod_l+0x778>
 8006aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dd23      	ble.n	8006afa <_strtod_l+0x78a>
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006ab6:	9805      	ldr	r0, [sp, #20]
 8006ab8:	f7ff f98c 	bl	8005dd4 <__pow5mult>
 8006abc:	4681      	mov	r9, r0
 8006abe:	b9e0      	cbnz	r0, 8006afa <_strtod_l+0x78a>
 8006ac0:	f04f 0900 	mov.w	r9, #0
 8006ac4:	e66f      	b.n	80067a6 <_strtod_l+0x436>
 8006ac6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006aca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006ace:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006ad2:	35e2      	adds	r5, #226	@ 0xe2
 8006ad4:	fa01 f305 	lsl.w	r3, r1, r5
 8006ad8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ada:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006adc:	e7ba      	b.n	8006a54 <_strtod_l+0x6e4>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ae6:	e7b5      	b.n	8006a54 <_strtod_l+0x6e4>
 8006ae8:	462a      	mov	r2, r5
 8006aea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006aec:	9805      	ldr	r0, [sp, #20]
 8006aee:	f7ff f9cb 	bl	8005e88 <__lshift>
 8006af2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d1d9      	bne.n	8006aac <_strtod_l+0x73c>
 8006af8:	e655      	b.n	80067a6 <_strtod_l+0x436>
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	dd07      	ble.n	8006b0e <_strtod_l+0x79e>
 8006afe:	4649      	mov	r1, r9
 8006b00:	4632      	mov	r2, r6
 8006b02:	9805      	ldr	r0, [sp, #20]
 8006b04:	f7ff f9c0 	bl	8005e88 <__lshift>
 8006b08:	4681      	mov	r9, r0
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d0d8      	beq.n	8006ac0 <_strtod_l+0x750>
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	dd08      	ble.n	8006b24 <_strtod_l+0x7b4>
 8006b12:	4641      	mov	r1, r8
 8006b14:	463a      	mov	r2, r7
 8006b16:	9805      	ldr	r0, [sp, #20]
 8006b18:	f7ff f9b6 	bl	8005e88 <__lshift>
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f43f ae41 	beq.w	80067a6 <_strtod_l+0x436>
 8006b24:	464a      	mov	r2, r9
 8006b26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b28:	9805      	ldr	r0, [sp, #20]
 8006b2a:	f7ff fa35 	bl	8005f98 <__mdiff>
 8006b2e:	4604      	mov	r4, r0
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f43f ae38 	beq.w	80067a6 <_strtod_l+0x436>
 8006b36:	68c3      	ldr	r3, [r0, #12]
 8006b38:	4641      	mov	r1, r8
 8006b3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60c3      	str	r3, [r0, #12]
 8006b40:	f7ff fa0e 	bl	8005f60 <__mcmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	da45      	bge.n	8006bd4 <_strtod_l+0x864>
 8006b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b4a:	ea53 030a 	orrs.w	r3, r3, sl
 8006b4e:	d16b      	bne.n	8006c28 <_strtod_l+0x8b8>
 8006b50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d167      	bne.n	8006c28 <_strtod_l+0x8b8>
 8006b58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b5c:	0d1b      	lsrs	r3, r3, #20
 8006b5e:	051b      	lsls	r3, r3, #20
 8006b60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b64:	d960      	bls.n	8006c28 <_strtod_l+0x8b8>
 8006b66:	6963      	ldr	r3, [r4, #20]
 8006b68:	b913      	cbnz	r3, 8006b70 <_strtod_l+0x800>
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	dd5b      	ble.n	8006c28 <_strtod_l+0x8b8>
 8006b70:	4621      	mov	r1, r4
 8006b72:	2201      	movs	r2, #1
 8006b74:	9805      	ldr	r0, [sp, #20]
 8006b76:	f7ff f987 	bl	8005e88 <__lshift>
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	f7ff f9ef 	bl	8005f60 <__mcmp>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	dd50      	ble.n	8006c28 <_strtod_l+0x8b8>
 8006b86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b8a:	9a08      	ldr	r2, [sp, #32]
 8006b8c:	0d1b      	lsrs	r3, r3, #20
 8006b8e:	051b      	lsls	r3, r3, #20
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	d06a      	beq.n	8006c6a <_strtod_l+0x8fa>
 8006b94:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b98:	d867      	bhi.n	8006c6a <_strtod_l+0x8fa>
 8006b9a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006b9e:	f67f ae98 	bls.w	80068d2 <_strtod_l+0x562>
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	4b09      	ldr	r3, [pc, #36]	@ (8006bcc <_strtod_l+0x85c>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f7f9 fc95 	bl	80004d8 <__aeabi_dmul>
 8006bae:	4b08      	ldr	r3, [pc, #32]	@ (8006bd0 <_strtod_l+0x860>)
 8006bb0:	4682      	mov	sl, r0
 8006bb2:	400b      	ands	r3, r1
 8006bb4:	468b      	mov	fp, r1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f47f ae00 	bne.w	80067bc <_strtod_l+0x44c>
 8006bbc:	2322      	movs	r3, #34	@ 0x22
 8006bbe:	9a05      	ldr	r2, [sp, #20]
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e5fb      	b.n	80067bc <_strtod_l+0x44c>
 8006bc4:	080085d8 	.word	0x080085d8
 8006bc8:	fffffc02 	.word	0xfffffc02
 8006bcc:	39500000 	.word	0x39500000
 8006bd0:	7ff00000 	.word	0x7ff00000
 8006bd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006bd8:	d165      	bne.n	8006ca6 <_strtod_l+0x936>
 8006bda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006be0:	b35a      	cbz	r2, 8006c3a <_strtod_l+0x8ca>
 8006be2:	4a99      	ldr	r2, [pc, #612]	@ (8006e48 <_strtod_l+0xad8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d12b      	bne.n	8006c40 <_strtod_l+0x8d0>
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	4651      	mov	r1, sl
 8006bec:	b303      	cbz	r3, 8006c30 <_strtod_l+0x8c0>
 8006bee:	465a      	mov	r2, fp
 8006bf0:	4b96      	ldr	r3, [pc, #600]	@ (8006e4c <_strtod_l+0xadc>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006bf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bfc:	d81b      	bhi.n	8006c36 <_strtod_l+0x8c6>
 8006bfe:	0d1b      	lsrs	r3, r3, #20
 8006c00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	4299      	cmp	r1, r3
 8006c0a:	d119      	bne.n	8006c40 <_strtod_l+0x8d0>
 8006c0c:	4b90      	ldr	r3, [pc, #576]	@ (8006e50 <_strtod_l+0xae0>)
 8006c0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d102      	bne.n	8006c1a <_strtod_l+0x8aa>
 8006c14:	3101      	adds	r1, #1
 8006c16:	f43f adc6 	beq.w	80067a6 <_strtod_l+0x436>
 8006c1a:	f04f 0a00 	mov.w	sl, #0
 8006c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8006e4c <_strtod_l+0xadc>)
 8006c20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c22:	401a      	ands	r2, r3
 8006c24:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006c28:	9b08      	ldr	r3, [sp, #32]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1b9      	bne.n	8006ba2 <_strtod_l+0x832>
 8006c2e:	e5c5      	b.n	80067bc <_strtod_l+0x44c>
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c34:	e7e8      	b.n	8006c08 <_strtod_l+0x898>
 8006c36:	4613      	mov	r3, r2
 8006c38:	e7e6      	b.n	8006c08 <_strtod_l+0x898>
 8006c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8006c3e:	d0a2      	beq.n	8006b86 <_strtod_l+0x816>
 8006c40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c42:	b1db      	cbz	r3, 8006c7c <_strtod_l+0x90c>
 8006c44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c46:	4213      	tst	r3, r2
 8006c48:	d0ee      	beq.n	8006c28 <_strtod_l+0x8b8>
 8006c4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	4659      	mov	r1, fp
 8006c50:	9a08      	ldr	r2, [sp, #32]
 8006c52:	b1bb      	cbz	r3, 8006c84 <_strtod_l+0x914>
 8006c54:	f7ff fb68 	bl	8006328 <sulp>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c60:	f7f9 fa84 	bl	800016c <__adddf3>
 8006c64:	4682      	mov	sl, r0
 8006c66:	468b      	mov	fp, r1
 8006c68:	e7de      	b.n	8006c28 <_strtod_l+0x8b8>
 8006c6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006c6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006c72:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006c76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006c7a:	e7d5      	b.n	8006c28 <_strtod_l+0x8b8>
 8006c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c7e:	ea13 0f0a 	tst.w	r3, sl
 8006c82:	e7e1      	b.n	8006c48 <_strtod_l+0x8d8>
 8006c84:	f7ff fb50 	bl	8006328 <sulp>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c90:	f7f9 fa6a 	bl	8000168 <__aeabi_dsub>
 8006c94:	2200      	movs	r2, #0
 8006c96:	2300      	movs	r3, #0
 8006c98:	4682      	mov	sl, r0
 8006c9a:	468b      	mov	fp, r1
 8006c9c:	f7f9 fe84 	bl	80009a8 <__aeabi_dcmpeq>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d0c1      	beq.n	8006c28 <_strtod_l+0x8b8>
 8006ca4:	e615      	b.n	80068d2 <_strtod_l+0x562>
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff fac9 	bl	8006240 <__ratio>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	f7f9 fe8a 	bl	80009d0 <__aeabi_dcmple>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d06d      	beq.n	8006d9c <_strtod_l+0xa2c>
 8006cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d178      	bne.n	8006db8 <_strtod_l+0xa48>
 8006cc6:	f1ba 0f00 	cmp.w	sl, #0
 8006cca:	d156      	bne.n	8006d7a <_strtod_l+0xa0a>
 8006ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d158      	bne.n	8006d88 <_strtod_l+0xa18>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4630      	mov	r0, r6
 8006cda:	4639      	mov	r1, r7
 8006cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8006e54 <_strtod_l+0xae4>)
 8006cde:	f7f9 fe6d 	bl	80009bc <__aeabi_dcmplt>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d157      	bne.n	8006d96 <_strtod_l+0xa26>
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	2200      	movs	r2, #0
 8006cec:	4b5a      	ldr	r3, [pc, #360]	@ (8006e58 <_strtod_l+0xae8>)
 8006cee:	f7f9 fbf3 	bl	80004d8 <__aeabi_dmul>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460f      	mov	r7, r1
 8006cf6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006cfa:	9606      	str	r6, [sp, #24]
 8006cfc:	9307      	str	r3, [sp, #28]
 8006cfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d02:	4d52      	ldr	r5, [pc, #328]	@ (8006e4c <_strtod_l+0xadc>)
 8006d04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d0a:	401d      	ands	r5, r3
 8006d0c:	4b53      	ldr	r3, [pc, #332]	@ (8006e5c <_strtod_l+0xaec>)
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	f040 80aa 	bne.w	8006e68 <_strtod_l+0xaf8>
 8006d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d16:	4650      	mov	r0, sl
 8006d18:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	f7ff f9cf 	bl	80060c0 <__ulp>
 8006d22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d26:	f7f9 fbd7 	bl	80004d8 <__aeabi_dmul>
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	465b      	mov	r3, fp
 8006d2e:	f7f9 fa1d 	bl	800016c <__adddf3>
 8006d32:	460b      	mov	r3, r1
 8006d34:	4945      	ldr	r1, [pc, #276]	@ (8006e4c <_strtod_l+0xadc>)
 8006d36:	4a4a      	ldr	r2, [pc, #296]	@ (8006e60 <_strtod_l+0xaf0>)
 8006d38:	4019      	ands	r1, r3
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	4682      	mov	sl, r0
 8006d3e:	d942      	bls.n	8006dc6 <_strtod_l+0xa56>
 8006d40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d42:	4b43      	ldr	r3, [pc, #268]	@ (8006e50 <_strtod_l+0xae0>)
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d103      	bne.n	8006d50 <_strtod_l+0x9e0>
 8006d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	f43f ad2b 	beq.w	80067a6 <_strtod_l+0x436>
 8006d50:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006d54:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006e50 <_strtod_l+0xae0>
 8006d58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d5a:	9805      	ldr	r0, [sp, #20]
 8006d5c:	f7fe fe7e 	bl	8005a5c <_Bfree>
 8006d60:	4649      	mov	r1, r9
 8006d62:	9805      	ldr	r0, [sp, #20]
 8006d64:	f7fe fe7a 	bl	8005a5c <_Bfree>
 8006d68:	4641      	mov	r1, r8
 8006d6a:	9805      	ldr	r0, [sp, #20]
 8006d6c:	f7fe fe76 	bl	8005a5c <_Bfree>
 8006d70:	4621      	mov	r1, r4
 8006d72:	9805      	ldr	r0, [sp, #20]
 8006d74:	f7fe fe72 	bl	8005a5c <_Bfree>
 8006d78:	e618      	b.n	80069ac <_strtod_l+0x63c>
 8006d7a:	f1ba 0f01 	cmp.w	sl, #1
 8006d7e:	d103      	bne.n	8006d88 <_strtod_l+0xa18>
 8006d80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f43f ada5 	beq.w	80068d2 <_strtod_l+0x562>
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4b36      	ldr	r3, [pc, #216]	@ (8006e64 <_strtod_l+0xaf4>)
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d92:	4f30      	ldr	r7, [pc, #192]	@ (8006e54 <_strtod_l+0xae4>)
 8006d94:	e7b3      	b.n	8006cfe <_strtod_l+0x98e>
 8006d96:	2600      	movs	r6, #0
 8006d98:	4f2f      	ldr	r7, [pc, #188]	@ (8006e58 <_strtod_l+0xae8>)
 8006d9a:	e7ac      	b.n	8006cf6 <_strtod_l+0x986>
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	4639      	mov	r1, r7
 8006da0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e58 <_strtod_l+0xae8>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	f7f9 fb98 	bl	80004d8 <__aeabi_dmul>
 8006da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006daa:	4606      	mov	r6, r0
 8006dac:	460f      	mov	r7, r1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0a1      	beq.n	8006cf6 <_strtod_l+0x986>
 8006db2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006db6:	e7a2      	b.n	8006cfe <_strtod_l+0x98e>
 8006db8:	2200      	movs	r2, #0
 8006dba:	4b26      	ldr	r3, [pc, #152]	@ (8006e54 <_strtod_l+0xae4>)
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dc4:	e79b      	b.n	8006cfe <_strtod_l+0x98e>
 8006dc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006dca:	9b08      	ldr	r3, [sp, #32]
 8006dcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1c1      	bne.n	8006d58 <_strtod_l+0x9e8>
 8006dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006dd8:	0d1b      	lsrs	r3, r3, #20
 8006dda:	051b      	lsls	r3, r3, #20
 8006ddc:	429d      	cmp	r5, r3
 8006dde:	d1bb      	bne.n	8006d58 <_strtod_l+0x9e8>
 8006de0:	4630      	mov	r0, r6
 8006de2:	4639      	mov	r1, r7
 8006de4:	f7f9 fec0 	bl	8000b68 <__aeabi_d2lz>
 8006de8:	f7f9 fb48 	bl	800047c <__aeabi_l2d>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 f9b8 	bl	8000168 <__aeabi_dsub>
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006e00:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e06:	ea46 060a 	orr.w	r6, r6, sl
 8006e0a:	431e      	orrs	r6, r3
 8006e0c:	d069      	beq.n	8006ee2 <_strtod_l+0xb72>
 8006e0e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006e38 <_strtod_l+0xac8>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f7f9 fdd2 	bl	80009bc <__aeabi_dcmplt>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f47f accf 	bne.w	80067bc <_strtod_l+0x44c>
 8006e1e:	a308      	add	r3, pc, #32	@ (adr r3, 8006e40 <_strtod_l+0xad0>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e28:	f7f9 fde6 	bl	80009f8 <__aeabi_dcmpgt>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d093      	beq.n	8006d58 <_strtod_l+0x9e8>
 8006e30:	e4c4      	b.n	80067bc <_strtod_l+0x44c>
 8006e32:	bf00      	nop
 8006e34:	f3af 8000 	nop.w
 8006e38:	94a03595 	.word	0x94a03595
 8006e3c:	3fdfffff 	.word	0x3fdfffff
 8006e40:	35afe535 	.word	0x35afe535
 8006e44:	3fe00000 	.word	0x3fe00000
 8006e48:	000fffff 	.word	0x000fffff
 8006e4c:	7ff00000 	.word	0x7ff00000
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	3ff00000 	.word	0x3ff00000
 8006e58:	3fe00000 	.word	0x3fe00000
 8006e5c:	7fe00000 	.word	0x7fe00000
 8006e60:	7c9fffff 	.word	0x7c9fffff
 8006e64:	bff00000 	.word	0xbff00000
 8006e68:	9b08      	ldr	r3, [sp, #32]
 8006e6a:	b323      	cbz	r3, 8006eb6 <_strtod_l+0xb46>
 8006e6c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006e70:	d821      	bhi.n	8006eb6 <_strtod_l+0xb46>
 8006e72:	a327      	add	r3, pc, #156	@ (adr r3, 8006f10 <_strtod_l+0xba0>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fda8 	bl	80009d0 <__aeabi_dcmple>
 8006e80:	b1a0      	cbz	r0, 8006eac <_strtod_l+0xb3c>
 8006e82:	4639      	mov	r1, r7
 8006e84:	4630      	mov	r0, r6
 8006e86:	f7f9 fdff 	bl	8000a88 <__aeabi_d2uiz>
 8006e8a:	2801      	cmp	r0, #1
 8006e8c:	bf38      	it	cc
 8006e8e:	2001      	movcc	r0, #1
 8006e90:	f7f9 faa8 	bl	80003e4 <__aeabi_ui2d>
 8006e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e96:	4606      	mov	r6, r0
 8006e98:	460f      	mov	r7, r1
 8006e9a:	b9fb      	cbnz	r3, 8006edc <_strtod_l+0xb6c>
 8006e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ea0:	9014      	str	r0, [sp, #80]	@ 0x50
 8006ea2:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006ea8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006eac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006eae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006eb2:	1b5b      	subs	r3, r3, r5
 8006eb4:	9311      	str	r3, [sp, #68]	@ 0x44
 8006eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006ebe:	f7ff f8ff 	bl	80060c0 <__ulp>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	4659      	mov	r1, fp
 8006eca:	f7f9 fb05 	bl	80004d8 <__aeabi_dmul>
 8006ece:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006ed2:	f7f9 f94b 	bl	800016c <__adddf3>
 8006ed6:	4682      	mov	sl, r0
 8006ed8:	468b      	mov	fp, r1
 8006eda:	e776      	b.n	8006dca <_strtod_l+0xa5a>
 8006edc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006ee0:	e7e0      	b.n	8006ea4 <_strtod_l+0xb34>
 8006ee2:	a30d      	add	r3, pc, #52	@ (adr r3, 8006f18 <_strtod_l+0xba8>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	f7f9 fd68 	bl	80009bc <__aeabi_dcmplt>
 8006eec:	e79e      	b.n	8006e2c <_strtod_l+0xabc>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ef4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	f7ff ba77 	b.w	80063ea <_strtod_l+0x7a>
 8006efc:	2a65      	cmp	r2, #101	@ 0x65
 8006efe:	f43f ab6e 	beq.w	80065de <_strtod_l+0x26e>
 8006f02:	2a45      	cmp	r2, #69	@ 0x45
 8006f04:	f43f ab6b 	beq.w	80065de <_strtod_l+0x26e>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f7ff bba6 	b.w	800665a <_strtod_l+0x2ea>
 8006f0e:	bf00      	nop
 8006f10:	ffc00000 	.word	0xffc00000
 8006f14:	41dfffff 	.word	0x41dfffff
 8006f18:	94a03595 	.word	0x94a03595
 8006f1c:	3fcfffff 	.word	0x3fcfffff

08006f20 <_strtod_r>:
 8006f20:	4b01      	ldr	r3, [pc, #4]	@ (8006f28 <_strtod_r+0x8>)
 8006f22:	f7ff ba25 	b.w	8006370 <_strtod_l>
 8006f26:	bf00      	nop
 8006f28:	2000007c 	.word	0x2000007c

08006f2c <_strtol_l.constprop.0>:
 8006f2c:	2b24      	cmp	r3, #36	@ 0x24
 8006f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f32:	4686      	mov	lr, r0
 8006f34:	4690      	mov	r8, r2
 8006f36:	d801      	bhi.n	8006f3c <_strtol_l.constprop.0+0x10>
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d106      	bne.n	8006f4a <_strtol_l.constprop.0+0x1e>
 8006f3c:	f7fd fdc0 	bl	8004ac0 <__errno>
 8006f40:	2316      	movs	r3, #22
 8006f42:	6003      	str	r3, [r0, #0]
 8006f44:	2000      	movs	r0, #0
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	4833      	ldr	r0, [pc, #204]	@ (800701c <_strtol_l.constprop.0+0xf0>)
 8006f4e:	462a      	mov	r2, r5
 8006f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f54:	5d06      	ldrb	r6, [r0, r4]
 8006f56:	f016 0608 	ands.w	r6, r6, #8
 8006f5a:	d1f8      	bne.n	8006f4e <_strtol_l.constprop.0+0x22>
 8006f5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f5e:	d12d      	bne.n	8006fbc <_strtol_l.constprop.0+0x90>
 8006f60:	2601      	movs	r6, #1
 8006f62:	782c      	ldrb	r4, [r5, #0]
 8006f64:	1c95      	adds	r5, r2, #2
 8006f66:	f033 0210 	bics.w	r2, r3, #16
 8006f6a:	d109      	bne.n	8006f80 <_strtol_l.constprop.0+0x54>
 8006f6c:	2c30      	cmp	r4, #48	@ 0x30
 8006f6e:	d12a      	bne.n	8006fc6 <_strtol_l.constprop.0+0x9a>
 8006f70:	782a      	ldrb	r2, [r5, #0]
 8006f72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f76:	2a58      	cmp	r2, #88	@ 0x58
 8006f78:	d125      	bne.n	8006fc6 <_strtol_l.constprop.0+0x9a>
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	786c      	ldrb	r4, [r5, #1]
 8006f7e:	3502      	adds	r5, #2
 8006f80:	2200      	movs	r2, #0
 8006f82:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006f86:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006f8a:	fbbc f9f3 	udiv	r9, ip, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006f98:	2f09      	cmp	r7, #9
 8006f9a:	d81b      	bhi.n	8006fd4 <_strtol_l.constprop.0+0xa8>
 8006f9c:	463c      	mov	r4, r7
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	dd27      	ble.n	8006ff2 <_strtol_l.constprop.0+0xc6>
 8006fa2:	1c57      	adds	r7, r2, #1
 8006fa4:	d007      	beq.n	8006fb6 <_strtol_l.constprop.0+0x8a>
 8006fa6:	4581      	cmp	r9, r0
 8006fa8:	d320      	bcc.n	8006fec <_strtol_l.constprop.0+0xc0>
 8006faa:	d101      	bne.n	8006fb0 <_strtol_l.constprop.0+0x84>
 8006fac:	45a2      	cmp	sl, r4
 8006fae:	db1d      	blt.n	8006fec <_strtol_l.constprop.0+0xc0>
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	fb00 4003 	mla	r0, r0, r3, r4
 8006fb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fba:	e7eb      	b.n	8006f94 <_strtol_l.constprop.0+0x68>
 8006fbc:	2c2b      	cmp	r4, #43	@ 0x2b
 8006fbe:	bf04      	itt	eq
 8006fc0:	782c      	ldrbeq	r4, [r5, #0]
 8006fc2:	1c95      	addeq	r5, r2, #2
 8006fc4:	e7cf      	b.n	8006f66 <_strtol_l.constprop.0+0x3a>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1da      	bne.n	8006f80 <_strtol_l.constprop.0+0x54>
 8006fca:	2c30      	cmp	r4, #48	@ 0x30
 8006fcc:	bf0c      	ite	eq
 8006fce:	2308      	moveq	r3, #8
 8006fd0:	230a      	movne	r3, #10
 8006fd2:	e7d5      	b.n	8006f80 <_strtol_l.constprop.0+0x54>
 8006fd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006fd8:	2f19      	cmp	r7, #25
 8006fda:	d801      	bhi.n	8006fe0 <_strtol_l.constprop.0+0xb4>
 8006fdc:	3c37      	subs	r4, #55	@ 0x37
 8006fde:	e7de      	b.n	8006f9e <_strtol_l.constprop.0+0x72>
 8006fe0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006fe4:	2f19      	cmp	r7, #25
 8006fe6:	d804      	bhi.n	8006ff2 <_strtol_l.constprop.0+0xc6>
 8006fe8:	3c57      	subs	r4, #87	@ 0x57
 8006fea:	e7d8      	b.n	8006f9e <_strtol_l.constprop.0+0x72>
 8006fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ff0:	e7e1      	b.n	8006fb6 <_strtol_l.constprop.0+0x8a>
 8006ff2:	1c53      	adds	r3, r2, #1
 8006ff4:	d108      	bne.n	8007008 <_strtol_l.constprop.0+0xdc>
 8006ff6:	2322      	movs	r3, #34	@ 0x22
 8006ff8:	4660      	mov	r0, ip
 8006ffa:	f8ce 3000 	str.w	r3, [lr]
 8006ffe:	f1b8 0f00 	cmp.w	r8, #0
 8007002:	d0a0      	beq.n	8006f46 <_strtol_l.constprop.0+0x1a>
 8007004:	1e69      	subs	r1, r5, #1
 8007006:	e006      	b.n	8007016 <_strtol_l.constprop.0+0xea>
 8007008:	b106      	cbz	r6, 800700c <_strtol_l.constprop.0+0xe0>
 800700a:	4240      	negs	r0, r0
 800700c:	f1b8 0f00 	cmp.w	r8, #0
 8007010:	d099      	beq.n	8006f46 <_strtol_l.constprop.0+0x1a>
 8007012:	2a00      	cmp	r2, #0
 8007014:	d1f6      	bne.n	8007004 <_strtol_l.constprop.0+0xd8>
 8007016:	f8c8 1000 	str.w	r1, [r8]
 800701a:	e794      	b.n	8006f46 <_strtol_l.constprop.0+0x1a>
 800701c:	08008601 	.word	0x08008601

08007020 <_strtol_r>:
 8007020:	f7ff bf84 	b.w	8006f2c <_strtol_l.constprop.0>

08007024 <__ssputs_r>:
 8007024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007028:	461f      	mov	r7, r3
 800702a:	688e      	ldr	r6, [r1, #8]
 800702c:	4682      	mov	sl, r0
 800702e:	42be      	cmp	r6, r7
 8007030:	460c      	mov	r4, r1
 8007032:	4690      	mov	r8, r2
 8007034:	680b      	ldr	r3, [r1, #0]
 8007036:	d82d      	bhi.n	8007094 <__ssputs_r+0x70>
 8007038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800703c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007040:	d026      	beq.n	8007090 <__ssputs_r+0x6c>
 8007042:	6965      	ldr	r5, [r4, #20]
 8007044:	6909      	ldr	r1, [r1, #16]
 8007046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800704a:	eba3 0901 	sub.w	r9, r3, r1
 800704e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007052:	1c7b      	adds	r3, r7, #1
 8007054:	444b      	add	r3, r9
 8007056:	106d      	asrs	r5, r5, #1
 8007058:	429d      	cmp	r5, r3
 800705a:	bf38      	it	cc
 800705c:	461d      	movcc	r5, r3
 800705e:	0553      	lsls	r3, r2, #21
 8007060:	d527      	bpl.n	80070b2 <__ssputs_r+0x8e>
 8007062:	4629      	mov	r1, r5
 8007064:	f7fe fc2e 	bl	80058c4 <_malloc_r>
 8007068:	4606      	mov	r6, r0
 800706a:	b360      	cbz	r0, 80070c6 <__ssputs_r+0xa2>
 800706c:	464a      	mov	r2, r9
 800706e:	6921      	ldr	r1, [r4, #16]
 8007070:	f000 fa14 	bl	800749c <memcpy>
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800707a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707e:	81a3      	strh	r3, [r4, #12]
 8007080:	6126      	str	r6, [r4, #16]
 8007082:	444e      	add	r6, r9
 8007084:	6026      	str	r6, [r4, #0]
 8007086:	463e      	mov	r6, r7
 8007088:	6165      	str	r5, [r4, #20]
 800708a:	eba5 0509 	sub.w	r5, r5, r9
 800708e:	60a5      	str	r5, [r4, #8]
 8007090:	42be      	cmp	r6, r7
 8007092:	d900      	bls.n	8007096 <__ssputs_r+0x72>
 8007094:	463e      	mov	r6, r7
 8007096:	4632      	mov	r2, r6
 8007098:	4641      	mov	r1, r8
 800709a:	6820      	ldr	r0, [r4, #0]
 800709c:	f000 f9c2 	bl	8007424 <memmove>
 80070a0:	2000      	movs	r0, #0
 80070a2:	68a3      	ldr	r3, [r4, #8]
 80070a4:	1b9b      	subs	r3, r3, r6
 80070a6:	60a3      	str	r3, [r4, #8]
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	4433      	add	r3, r6
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b2:	462a      	mov	r2, r5
 80070b4:	f000 fd83 	bl	8007bbe <_realloc_r>
 80070b8:	4606      	mov	r6, r0
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d1e0      	bne.n	8007080 <__ssputs_r+0x5c>
 80070be:	4650      	mov	r0, sl
 80070c0:	6921      	ldr	r1, [r4, #16]
 80070c2:	f7fe fb8d 	bl	80057e0 <_free_r>
 80070c6:	230c      	movs	r3, #12
 80070c8:	f8ca 3000 	str.w	r3, [sl]
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	e7e9      	b.n	80070ae <__ssputs_r+0x8a>
	...

080070dc <_svfiprintf_r>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	4698      	mov	r8, r3
 80070e2:	898b      	ldrh	r3, [r1, #12]
 80070e4:	4607      	mov	r7, r0
 80070e6:	061b      	lsls	r3, r3, #24
 80070e8:	460d      	mov	r5, r1
 80070ea:	4614      	mov	r4, r2
 80070ec:	b09d      	sub	sp, #116	@ 0x74
 80070ee:	d510      	bpl.n	8007112 <_svfiprintf_r+0x36>
 80070f0:	690b      	ldr	r3, [r1, #16]
 80070f2:	b973      	cbnz	r3, 8007112 <_svfiprintf_r+0x36>
 80070f4:	2140      	movs	r1, #64	@ 0x40
 80070f6:	f7fe fbe5 	bl	80058c4 <_malloc_r>
 80070fa:	6028      	str	r0, [r5, #0]
 80070fc:	6128      	str	r0, [r5, #16]
 80070fe:	b930      	cbnz	r0, 800710e <_svfiprintf_r+0x32>
 8007100:	230c      	movs	r3, #12
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007108:	b01d      	add	sp, #116	@ 0x74
 800710a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710e:	2340      	movs	r3, #64	@ 0x40
 8007110:	616b      	str	r3, [r5, #20]
 8007112:	2300      	movs	r3, #0
 8007114:	9309      	str	r3, [sp, #36]	@ 0x24
 8007116:	2320      	movs	r3, #32
 8007118:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800711c:	2330      	movs	r3, #48	@ 0x30
 800711e:	f04f 0901 	mov.w	r9, #1
 8007122:	f8cd 800c 	str.w	r8, [sp, #12]
 8007126:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80072c0 <_svfiprintf_r+0x1e4>
 800712a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800712e:	4623      	mov	r3, r4
 8007130:	469a      	mov	sl, r3
 8007132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007136:	b10a      	cbz	r2, 800713c <_svfiprintf_r+0x60>
 8007138:	2a25      	cmp	r2, #37	@ 0x25
 800713a:	d1f9      	bne.n	8007130 <_svfiprintf_r+0x54>
 800713c:	ebba 0b04 	subs.w	fp, sl, r4
 8007140:	d00b      	beq.n	800715a <_svfiprintf_r+0x7e>
 8007142:	465b      	mov	r3, fp
 8007144:	4622      	mov	r2, r4
 8007146:	4629      	mov	r1, r5
 8007148:	4638      	mov	r0, r7
 800714a:	f7ff ff6b 	bl	8007024 <__ssputs_r>
 800714e:	3001      	adds	r0, #1
 8007150:	f000 80a7 	beq.w	80072a2 <_svfiprintf_r+0x1c6>
 8007154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007156:	445a      	add	r2, fp
 8007158:	9209      	str	r2, [sp, #36]	@ 0x24
 800715a:	f89a 3000 	ldrb.w	r3, [sl]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 809f 	beq.w	80072a2 <_svfiprintf_r+0x1c6>
 8007164:	2300      	movs	r3, #0
 8007166:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800716a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800716e:	f10a 0a01 	add.w	sl, sl, #1
 8007172:	9304      	str	r3, [sp, #16]
 8007174:	9307      	str	r3, [sp, #28]
 8007176:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800717a:	931a      	str	r3, [sp, #104]	@ 0x68
 800717c:	4654      	mov	r4, sl
 800717e:	2205      	movs	r2, #5
 8007180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007184:	484e      	ldr	r0, [pc, #312]	@ (80072c0 <_svfiprintf_r+0x1e4>)
 8007186:	f7fd fcc8 	bl	8004b1a <memchr>
 800718a:	9a04      	ldr	r2, [sp, #16]
 800718c:	b9d8      	cbnz	r0, 80071c6 <_svfiprintf_r+0xea>
 800718e:	06d0      	lsls	r0, r2, #27
 8007190:	bf44      	itt	mi
 8007192:	2320      	movmi	r3, #32
 8007194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007198:	0711      	lsls	r1, r2, #28
 800719a:	bf44      	itt	mi
 800719c:	232b      	movmi	r3, #43	@ 0x2b
 800719e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071a2:	f89a 3000 	ldrb.w	r3, [sl]
 80071a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80071a8:	d015      	beq.n	80071d6 <_svfiprintf_r+0xfa>
 80071aa:	4654      	mov	r4, sl
 80071ac:	2000      	movs	r0, #0
 80071ae:	f04f 0c0a 	mov.w	ip, #10
 80071b2:	9a07      	ldr	r2, [sp, #28]
 80071b4:	4621      	mov	r1, r4
 80071b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ba:	3b30      	subs	r3, #48	@ 0x30
 80071bc:	2b09      	cmp	r3, #9
 80071be:	d94b      	bls.n	8007258 <_svfiprintf_r+0x17c>
 80071c0:	b1b0      	cbz	r0, 80071f0 <_svfiprintf_r+0x114>
 80071c2:	9207      	str	r2, [sp, #28]
 80071c4:	e014      	b.n	80071f0 <_svfiprintf_r+0x114>
 80071c6:	eba0 0308 	sub.w	r3, r0, r8
 80071ca:	fa09 f303 	lsl.w	r3, r9, r3
 80071ce:	4313      	orrs	r3, r2
 80071d0:	46a2      	mov	sl, r4
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	e7d2      	b.n	800717c <_svfiprintf_r+0xa0>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	1d19      	adds	r1, r3, #4
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	9103      	str	r1, [sp, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bfbb      	ittet	lt
 80071e2:	425b      	neglt	r3, r3
 80071e4:	f042 0202 	orrlt.w	r2, r2, #2
 80071e8:	9307      	strge	r3, [sp, #28]
 80071ea:	9307      	strlt	r3, [sp, #28]
 80071ec:	bfb8      	it	lt
 80071ee:	9204      	strlt	r2, [sp, #16]
 80071f0:	7823      	ldrb	r3, [r4, #0]
 80071f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80071f4:	d10a      	bne.n	800720c <_svfiprintf_r+0x130>
 80071f6:	7863      	ldrb	r3, [r4, #1]
 80071f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80071fa:	d132      	bne.n	8007262 <_svfiprintf_r+0x186>
 80071fc:	9b03      	ldr	r3, [sp, #12]
 80071fe:	3402      	adds	r4, #2
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	9203      	str	r2, [sp, #12]
 8007206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800720a:	9305      	str	r3, [sp, #20]
 800720c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80072c4 <_svfiprintf_r+0x1e8>
 8007210:	2203      	movs	r2, #3
 8007212:	4650      	mov	r0, sl
 8007214:	7821      	ldrb	r1, [r4, #0]
 8007216:	f7fd fc80 	bl	8004b1a <memchr>
 800721a:	b138      	cbz	r0, 800722c <_svfiprintf_r+0x150>
 800721c:	2240      	movs	r2, #64	@ 0x40
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	eba0 000a 	sub.w	r0, r0, sl
 8007224:	4082      	lsls	r2, r0
 8007226:	4313      	orrs	r3, r2
 8007228:	3401      	adds	r4, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007230:	2206      	movs	r2, #6
 8007232:	4825      	ldr	r0, [pc, #148]	@ (80072c8 <_svfiprintf_r+0x1ec>)
 8007234:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007238:	f7fd fc6f 	bl	8004b1a <memchr>
 800723c:	2800      	cmp	r0, #0
 800723e:	d036      	beq.n	80072ae <_svfiprintf_r+0x1d2>
 8007240:	4b22      	ldr	r3, [pc, #136]	@ (80072cc <_svfiprintf_r+0x1f0>)
 8007242:	bb1b      	cbnz	r3, 800728c <_svfiprintf_r+0x1b0>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	3307      	adds	r3, #7
 8007248:	f023 0307 	bic.w	r3, r3, #7
 800724c:	3308      	adds	r3, #8
 800724e:	9303      	str	r3, [sp, #12]
 8007250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007252:	4433      	add	r3, r6
 8007254:	9309      	str	r3, [sp, #36]	@ 0x24
 8007256:	e76a      	b.n	800712e <_svfiprintf_r+0x52>
 8007258:	460c      	mov	r4, r1
 800725a:	2001      	movs	r0, #1
 800725c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007260:	e7a8      	b.n	80071b4 <_svfiprintf_r+0xd8>
 8007262:	2300      	movs	r3, #0
 8007264:	f04f 0c0a 	mov.w	ip, #10
 8007268:	4619      	mov	r1, r3
 800726a:	3401      	adds	r4, #1
 800726c:	9305      	str	r3, [sp, #20]
 800726e:	4620      	mov	r0, r4
 8007270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007274:	3a30      	subs	r2, #48	@ 0x30
 8007276:	2a09      	cmp	r2, #9
 8007278:	d903      	bls.n	8007282 <_svfiprintf_r+0x1a6>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0c6      	beq.n	800720c <_svfiprintf_r+0x130>
 800727e:	9105      	str	r1, [sp, #20]
 8007280:	e7c4      	b.n	800720c <_svfiprintf_r+0x130>
 8007282:	4604      	mov	r4, r0
 8007284:	2301      	movs	r3, #1
 8007286:	fb0c 2101 	mla	r1, ip, r1, r2
 800728a:	e7f0      	b.n	800726e <_svfiprintf_r+0x192>
 800728c:	ab03      	add	r3, sp, #12
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	462a      	mov	r2, r5
 8007292:	4638      	mov	r0, r7
 8007294:	4b0e      	ldr	r3, [pc, #56]	@ (80072d0 <_svfiprintf_r+0x1f4>)
 8007296:	a904      	add	r1, sp, #16
 8007298:	f7fc fccc 	bl	8003c34 <_printf_float>
 800729c:	1c42      	adds	r2, r0, #1
 800729e:	4606      	mov	r6, r0
 80072a0:	d1d6      	bne.n	8007250 <_svfiprintf_r+0x174>
 80072a2:	89ab      	ldrh	r3, [r5, #12]
 80072a4:	065b      	lsls	r3, r3, #25
 80072a6:	f53f af2d 	bmi.w	8007104 <_svfiprintf_r+0x28>
 80072aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072ac:	e72c      	b.n	8007108 <_svfiprintf_r+0x2c>
 80072ae:	ab03      	add	r3, sp, #12
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	462a      	mov	r2, r5
 80072b4:	4638      	mov	r0, r7
 80072b6:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <_svfiprintf_r+0x1f4>)
 80072b8:	a904      	add	r1, sp, #16
 80072ba:	f7fc ff59 	bl	8004170 <_printf_i>
 80072be:	e7ed      	b.n	800729c <_svfiprintf_r+0x1c0>
 80072c0:	08008701 	.word	0x08008701
 80072c4:	08008707 	.word	0x08008707
 80072c8:	0800870b 	.word	0x0800870b
 80072cc:	08003c35 	.word	0x08003c35
 80072d0:	08007025 	.word	0x08007025

080072d4 <__sflush_r>:
 80072d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	0716      	lsls	r6, r2, #28
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	d454      	bmi.n	800738c <__sflush_r+0xb8>
 80072e2:	684b      	ldr	r3, [r1, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	dc02      	bgt.n	80072ee <__sflush_r+0x1a>
 80072e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dd48      	ble.n	8007380 <__sflush_r+0xac>
 80072ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072f0:	2e00      	cmp	r6, #0
 80072f2:	d045      	beq.n	8007380 <__sflush_r+0xac>
 80072f4:	2300      	movs	r3, #0
 80072f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072fa:	682f      	ldr	r7, [r5, #0]
 80072fc:	6a21      	ldr	r1, [r4, #32]
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	d030      	beq.n	8007364 <__sflush_r+0x90>
 8007302:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	0759      	lsls	r1, r3, #29
 8007308:	d505      	bpl.n	8007316 <__sflush_r+0x42>
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	1ad2      	subs	r2, r2, r3
 800730e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007310:	b10b      	cbz	r3, 8007316 <__sflush_r+0x42>
 8007312:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007314:	1ad2      	subs	r2, r2, r3
 8007316:	2300      	movs	r3, #0
 8007318:	4628      	mov	r0, r5
 800731a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800731c:	6a21      	ldr	r1, [r4, #32]
 800731e:	47b0      	blx	r6
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	d106      	bne.n	8007334 <__sflush_r+0x60>
 8007326:	6829      	ldr	r1, [r5, #0]
 8007328:	291d      	cmp	r1, #29
 800732a:	d82b      	bhi.n	8007384 <__sflush_r+0xb0>
 800732c:	4a28      	ldr	r2, [pc, #160]	@ (80073d0 <__sflush_r+0xfc>)
 800732e:	410a      	asrs	r2, r1
 8007330:	07d6      	lsls	r6, r2, #31
 8007332:	d427      	bmi.n	8007384 <__sflush_r+0xb0>
 8007334:	2200      	movs	r2, #0
 8007336:	6062      	str	r2, [r4, #4]
 8007338:	6922      	ldr	r2, [r4, #16]
 800733a:	04d9      	lsls	r1, r3, #19
 800733c:	6022      	str	r2, [r4, #0]
 800733e:	d504      	bpl.n	800734a <__sflush_r+0x76>
 8007340:	1c42      	adds	r2, r0, #1
 8007342:	d101      	bne.n	8007348 <__sflush_r+0x74>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b903      	cbnz	r3, 800734a <__sflush_r+0x76>
 8007348:	6560      	str	r0, [r4, #84]	@ 0x54
 800734a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800734c:	602f      	str	r7, [r5, #0]
 800734e:	b1b9      	cbz	r1, 8007380 <__sflush_r+0xac>
 8007350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007354:	4299      	cmp	r1, r3
 8007356:	d002      	beq.n	800735e <__sflush_r+0x8a>
 8007358:	4628      	mov	r0, r5
 800735a:	f7fe fa41 	bl	80057e0 <_free_r>
 800735e:	2300      	movs	r3, #0
 8007360:	6363      	str	r3, [r4, #52]	@ 0x34
 8007362:	e00d      	b.n	8007380 <__sflush_r+0xac>
 8007364:	2301      	movs	r3, #1
 8007366:	4628      	mov	r0, r5
 8007368:	47b0      	blx	r6
 800736a:	4602      	mov	r2, r0
 800736c:	1c50      	adds	r0, r2, #1
 800736e:	d1c9      	bne.n	8007304 <__sflush_r+0x30>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0c6      	beq.n	8007304 <__sflush_r+0x30>
 8007376:	2b1d      	cmp	r3, #29
 8007378:	d001      	beq.n	800737e <__sflush_r+0xaa>
 800737a:	2b16      	cmp	r3, #22
 800737c:	d11d      	bne.n	80073ba <__sflush_r+0xe6>
 800737e:	602f      	str	r7, [r5, #0]
 8007380:	2000      	movs	r0, #0
 8007382:	e021      	b.n	80073c8 <__sflush_r+0xf4>
 8007384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007388:	b21b      	sxth	r3, r3
 800738a:	e01a      	b.n	80073c2 <__sflush_r+0xee>
 800738c:	690f      	ldr	r7, [r1, #16]
 800738e:	2f00      	cmp	r7, #0
 8007390:	d0f6      	beq.n	8007380 <__sflush_r+0xac>
 8007392:	0793      	lsls	r3, r2, #30
 8007394:	bf18      	it	ne
 8007396:	2300      	movne	r3, #0
 8007398:	680e      	ldr	r6, [r1, #0]
 800739a:	bf08      	it	eq
 800739c:	694b      	ldreq	r3, [r1, #20]
 800739e:	1bf6      	subs	r6, r6, r7
 80073a0:	600f      	str	r7, [r1, #0]
 80073a2:	608b      	str	r3, [r1, #8]
 80073a4:	2e00      	cmp	r6, #0
 80073a6:	ddeb      	ble.n	8007380 <__sflush_r+0xac>
 80073a8:	4633      	mov	r3, r6
 80073aa:	463a      	mov	r2, r7
 80073ac:	4628      	mov	r0, r5
 80073ae:	6a21      	ldr	r1, [r4, #32]
 80073b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80073b4:	47e0      	blx	ip
 80073b6:	2800      	cmp	r0, #0
 80073b8:	dc07      	bgt.n	80073ca <__sflush_r+0xf6>
 80073ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ca:	4407      	add	r7, r0
 80073cc:	1a36      	subs	r6, r6, r0
 80073ce:	e7e9      	b.n	80073a4 <__sflush_r+0xd0>
 80073d0:	dfbffffe 	.word	0xdfbffffe

080073d4 <_fflush_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	690b      	ldr	r3, [r1, #16]
 80073d8:	4605      	mov	r5, r0
 80073da:	460c      	mov	r4, r1
 80073dc:	b913      	cbnz	r3, 80073e4 <_fflush_r+0x10>
 80073de:	2500      	movs	r5, #0
 80073e0:	4628      	mov	r0, r5
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	b118      	cbz	r0, 80073ee <_fflush_r+0x1a>
 80073e6:	6a03      	ldr	r3, [r0, #32]
 80073e8:	b90b      	cbnz	r3, 80073ee <_fflush_r+0x1a>
 80073ea:	f7fd fa7d 	bl	80048e8 <__sinit>
 80073ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f3      	beq.n	80073de <_fflush_r+0xa>
 80073f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073f8:	07d0      	lsls	r0, r2, #31
 80073fa:	d404      	bmi.n	8007406 <_fflush_r+0x32>
 80073fc:	0599      	lsls	r1, r3, #22
 80073fe:	d402      	bmi.n	8007406 <_fflush_r+0x32>
 8007400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007402:	f7fd fb88 	bl	8004b16 <__retarget_lock_acquire_recursive>
 8007406:	4628      	mov	r0, r5
 8007408:	4621      	mov	r1, r4
 800740a:	f7ff ff63 	bl	80072d4 <__sflush_r>
 800740e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007410:	4605      	mov	r5, r0
 8007412:	07da      	lsls	r2, r3, #31
 8007414:	d4e4      	bmi.n	80073e0 <_fflush_r+0xc>
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	059b      	lsls	r3, r3, #22
 800741a:	d4e1      	bmi.n	80073e0 <_fflush_r+0xc>
 800741c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800741e:	f7fd fb7b 	bl	8004b18 <__retarget_lock_release_recursive>
 8007422:	e7dd      	b.n	80073e0 <_fflush_r+0xc>

08007424 <memmove>:
 8007424:	4288      	cmp	r0, r1
 8007426:	b510      	push	{r4, lr}
 8007428:	eb01 0402 	add.w	r4, r1, r2
 800742c:	d902      	bls.n	8007434 <memmove+0x10>
 800742e:	4284      	cmp	r4, r0
 8007430:	4623      	mov	r3, r4
 8007432:	d807      	bhi.n	8007444 <memmove+0x20>
 8007434:	1e43      	subs	r3, r0, #1
 8007436:	42a1      	cmp	r1, r4
 8007438:	d008      	beq.n	800744c <memmove+0x28>
 800743a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800743e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007442:	e7f8      	b.n	8007436 <memmove+0x12>
 8007444:	4601      	mov	r1, r0
 8007446:	4402      	add	r2, r0
 8007448:	428a      	cmp	r2, r1
 800744a:	d100      	bne.n	800744e <memmove+0x2a>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007456:	e7f7      	b.n	8007448 <memmove+0x24>

08007458 <strncmp>:
 8007458:	b510      	push	{r4, lr}
 800745a:	b16a      	cbz	r2, 8007478 <strncmp+0x20>
 800745c:	3901      	subs	r1, #1
 800745e:	1884      	adds	r4, r0, r2
 8007460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007464:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007468:	429a      	cmp	r2, r3
 800746a:	d103      	bne.n	8007474 <strncmp+0x1c>
 800746c:	42a0      	cmp	r0, r4
 800746e:	d001      	beq.n	8007474 <strncmp+0x1c>
 8007470:	2a00      	cmp	r2, #0
 8007472:	d1f5      	bne.n	8007460 <strncmp+0x8>
 8007474:	1ad0      	subs	r0, r2, r3
 8007476:	bd10      	pop	{r4, pc}
 8007478:	4610      	mov	r0, r2
 800747a:	e7fc      	b.n	8007476 <strncmp+0x1e>

0800747c <_sbrk_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	2300      	movs	r3, #0
 8007480:	4d05      	ldr	r5, [pc, #20]	@ (8007498 <_sbrk_r+0x1c>)
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	f7fa fc2a 	bl	8001ce0 <_sbrk>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_sbrk_r+0x1a>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_sbrk_r+0x1a>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	200014c4 	.word	0x200014c4

0800749c <memcpy>:
 800749c:	440a      	add	r2, r1
 800749e:	4291      	cmp	r1, r2
 80074a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80074a4:	d100      	bne.n	80074a8 <memcpy+0xc>
 80074a6:	4770      	bx	lr
 80074a8:	b510      	push	{r4, lr}
 80074aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ae:	4291      	cmp	r1, r2
 80074b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074b4:	d1f9      	bne.n	80074aa <memcpy+0xe>
 80074b6:	bd10      	pop	{r4, pc}

080074b8 <nan>:
 80074b8:	2000      	movs	r0, #0
 80074ba:	4901      	ldr	r1, [pc, #4]	@ (80074c0 <nan+0x8>)
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	7ff80000 	.word	0x7ff80000

080074c4 <__assert_func>:
 80074c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074c6:	4614      	mov	r4, r2
 80074c8:	461a      	mov	r2, r3
 80074ca:	4b09      	ldr	r3, [pc, #36]	@ (80074f0 <__assert_func+0x2c>)
 80074cc:	4605      	mov	r5, r0
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68d8      	ldr	r0, [r3, #12]
 80074d2:	b954      	cbnz	r4, 80074ea <__assert_func+0x26>
 80074d4:	4b07      	ldr	r3, [pc, #28]	@ (80074f4 <__assert_func+0x30>)
 80074d6:	461c      	mov	r4, r3
 80074d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074dc:	9100      	str	r1, [sp, #0]
 80074de:	462b      	mov	r3, r5
 80074e0:	4905      	ldr	r1, [pc, #20]	@ (80074f8 <__assert_func+0x34>)
 80074e2:	f000 fba7 	bl	8007c34 <fiprintf>
 80074e6:	f000 fbb7 	bl	8007c58 <abort>
 80074ea:	4b04      	ldr	r3, [pc, #16]	@ (80074fc <__assert_func+0x38>)
 80074ec:	e7f4      	b.n	80074d8 <__assert_func+0x14>
 80074ee:	bf00      	nop
 80074f0:	2000002c 	.word	0x2000002c
 80074f4:	08008755 	.word	0x08008755
 80074f8:	08008727 	.word	0x08008727
 80074fc:	0800871a 	.word	0x0800871a

08007500 <_calloc_r>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	fba1 5402 	umull	r5, r4, r1, r2
 8007506:	b93c      	cbnz	r4, 8007518 <_calloc_r+0x18>
 8007508:	4629      	mov	r1, r5
 800750a:	f7fe f9db 	bl	80058c4 <_malloc_r>
 800750e:	4606      	mov	r6, r0
 8007510:	b928      	cbnz	r0, 800751e <_calloc_r+0x1e>
 8007512:	2600      	movs	r6, #0
 8007514:	4630      	mov	r0, r6
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	220c      	movs	r2, #12
 800751a:	6002      	str	r2, [r0, #0]
 800751c:	e7f9      	b.n	8007512 <_calloc_r+0x12>
 800751e:	462a      	mov	r2, r5
 8007520:	4621      	mov	r1, r4
 8007522:	f7fd fa7a 	bl	8004a1a <memset>
 8007526:	e7f5      	b.n	8007514 <_calloc_r+0x14>

08007528 <rshift>:
 8007528:	6903      	ldr	r3, [r0, #16]
 800752a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800752e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007532:	f100 0414 	add.w	r4, r0, #20
 8007536:	ea4f 1261 	mov.w	r2, r1, asr #5
 800753a:	dd46      	ble.n	80075ca <rshift+0xa2>
 800753c:	f011 011f 	ands.w	r1, r1, #31
 8007540:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007544:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007548:	d10c      	bne.n	8007564 <rshift+0x3c>
 800754a:	4629      	mov	r1, r5
 800754c:	f100 0710 	add.w	r7, r0, #16
 8007550:	42b1      	cmp	r1, r6
 8007552:	d335      	bcc.n	80075c0 <rshift+0x98>
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	1eea      	subs	r2, r5, #3
 800755a:	4296      	cmp	r6, r2
 800755c:	bf38      	it	cc
 800755e:	2300      	movcc	r3, #0
 8007560:	4423      	add	r3, r4
 8007562:	e015      	b.n	8007590 <rshift+0x68>
 8007564:	46a1      	mov	r9, r4
 8007566:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800756a:	f1c1 0820 	rsb	r8, r1, #32
 800756e:	40cf      	lsrs	r7, r1
 8007570:	f105 0e04 	add.w	lr, r5, #4
 8007574:	4576      	cmp	r6, lr
 8007576:	46f4      	mov	ip, lr
 8007578:	d816      	bhi.n	80075a8 <rshift+0x80>
 800757a:	1a9a      	subs	r2, r3, r2
 800757c:	0092      	lsls	r2, r2, #2
 800757e:	3a04      	subs	r2, #4
 8007580:	3501      	adds	r5, #1
 8007582:	42ae      	cmp	r6, r5
 8007584:	bf38      	it	cc
 8007586:	2200      	movcc	r2, #0
 8007588:	18a3      	adds	r3, r4, r2
 800758a:	50a7      	str	r7, [r4, r2]
 800758c:	b107      	cbz	r7, 8007590 <rshift+0x68>
 800758e:	3304      	adds	r3, #4
 8007590:	42a3      	cmp	r3, r4
 8007592:	eba3 0204 	sub.w	r2, r3, r4
 8007596:	bf08      	it	eq
 8007598:	2300      	moveq	r3, #0
 800759a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800759e:	6102      	str	r2, [r0, #16]
 80075a0:	bf08      	it	eq
 80075a2:	6143      	streq	r3, [r0, #20]
 80075a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075a8:	f8dc c000 	ldr.w	ip, [ip]
 80075ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80075b0:	ea4c 0707 	orr.w	r7, ip, r7
 80075b4:	f849 7b04 	str.w	r7, [r9], #4
 80075b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075bc:	40cf      	lsrs	r7, r1
 80075be:	e7d9      	b.n	8007574 <rshift+0x4c>
 80075c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80075c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80075c8:	e7c2      	b.n	8007550 <rshift+0x28>
 80075ca:	4623      	mov	r3, r4
 80075cc:	e7e0      	b.n	8007590 <rshift+0x68>

080075ce <__hexdig_fun>:
 80075ce:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80075d2:	2b09      	cmp	r3, #9
 80075d4:	d802      	bhi.n	80075dc <__hexdig_fun+0xe>
 80075d6:	3820      	subs	r0, #32
 80075d8:	b2c0      	uxtb	r0, r0
 80075da:	4770      	bx	lr
 80075dc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80075e0:	2b05      	cmp	r3, #5
 80075e2:	d801      	bhi.n	80075e8 <__hexdig_fun+0x1a>
 80075e4:	3847      	subs	r0, #71	@ 0x47
 80075e6:	e7f7      	b.n	80075d8 <__hexdig_fun+0xa>
 80075e8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80075ec:	2b05      	cmp	r3, #5
 80075ee:	d801      	bhi.n	80075f4 <__hexdig_fun+0x26>
 80075f0:	3827      	subs	r0, #39	@ 0x27
 80075f2:	e7f1      	b.n	80075d8 <__hexdig_fun+0xa>
 80075f4:	2000      	movs	r0, #0
 80075f6:	4770      	bx	lr

080075f8 <__gethex>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	468a      	mov	sl, r1
 80075fe:	4690      	mov	r8, r2
 8007600:	b085      	sub	sp, #20
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	680b      	ldr	r3, [r1, #0]
 8007606:	9001      	str	r0, [sp, #4]
 8007608:	1c9c      	adds	r4, r3, #2
 800760a:	46a1      	mov	r9, r4
 800760c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007610:	2830      	cmp	r0, #48	@ 0x30
 8007612:	d0fa      	beq.n	800760a <__gethex+0x12>
 8007614:	eba9 0303 	sub.w	r3, r9, r3
 8007618:	f1a3 0b02 	sub.w	fp, r3, #2
 800761c:	f7ff ffd7 	bl	80075ce <__hexdig_fun>
 8007620:	4605      	mov	r5, r0
 8007622:	2800      	cmp	r0, #0
 8007624:	d168      	bne.n	80076f8 <__gethex+0x100>
 8007626:	2201      	movs	r2, #1
 8007628:	4648      	mov	r0, r9
 800762a:	499f      	ldr	r1, [pc, #636]	@ (80078a8 <__gethex+0x2b0>)
 800762c:	f7ff ff14 	bl	8007458 <strncmp>
 8007630:	4607      	mov	r7, r0
 8007632:	2800      	cmp	r0, #0
 8007634:	d167      	bne.n	8007706 <__gethex+0x10e>
 8007636:	f899 0001 	ldrb.w	r0, [r9, #1]
 800763a:	4626      	mov	r6, r4
 800763c:	f7ff ffc7 	bl	80075ce <__hexdig_fun>
 8007640:	2800      	cmp	r0, #0
 8007642:	d062      	beq.n	800770a <__gethex+0x112>
 8007644:	4623      	mov	r3, r4
 8007646:	7818      	ldrb	r0, [r3, #0]
 8007648:	4699      	mov	r9, r3
 800764a:	2830      	cmp	r0, #48	@ 0x30
 800764c:	f103 0301 	add.w	r3, r3, #1
 8007650:	d0f9      	beq.n	8007646 <__gethex+0x4e>
 8007652:	f7ff ffbc 	bl	80075ce <__hexdig_fun>
 8007656:	fab0 f580 	clz	r5, r0
 800765a:	f04f 0b01 	mov.w	fp, #1
 800765e:	096d      	lsrs	r5, r5, #5
 8007660:	464a      	mov	r2, r9
 8007662:	4616      	mov	r6, r2
 8007664:	7830      	ldrb	r0, [r6, #0]
 8007666:	3201      	adds	r2, #1
 8007668:	f7ff ffb1 	bl	80075ce <__hexdig_fun>
 800766c:	2800      	cmp	r0, #0
 800766e:	d1f8      	bne.n	8007662 <__gethex+0x6a>
 8007670:	2201      	movs	r2, #1
 8007672:	4630      	mov	r0, r6
 8007674:	498c      	ldr	r1, [pc, #560]	@ (80078a8 <__gethex+0x2b0>)
 8007676:	f7ff feef 	bl	8007458 <strncmp>
 800767a:	2800      	cmp	r0, #0
 800767c:	d13f      	bne.n	80076fe <__gethex+0x106>
 800767e:	b944      	cbnz	r4, 8007692 <__gethex+0x9a>
 8007680:	1c74      	adds	r4, r6, #1
 8007682:	4622      	mov	r2, r4
 8007684:	4616      	mov	r6, r2
 8007686:	7830      	ldrb	r0, [r6, #0]
 8007688:	3201      	adds	r2, #1
 800768a:	f7ff ffa0 	bl	80075ce <__hexdig_fun>
 800768e:	2800      	cmp	r0, #0
 8007690:	d1f8      	bne.n	8007684 <__gethex+0x8c>
 8007692:	1ba4      	subs	r4, r4, r6
 8007694:	00a7      	lsls	r7, r4, #2
 8007696:	7833      	ldrb	r3, [r6, #0]
 8007698:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800769c:	2b50      	cmp	r3, #80	@ 0x50
 800769e:	d13e      	bne.n	800771e <__gethex+0x126>
 80076a0:	7873      	ldrb	r3, [r6, #1]
 80076a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80076a4:	d033      	beq.n	800770e <__gethex+0x116>
 80076a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80076a8:	d034      	beq.n	8007714 <__gethex+0x11c>
 80076aa:	2400      	movs	r4, #0
 80076ac:	1c71      	adds	r1, r6, #1
 80076ae:	7808      	ldrb	r0, [r1, #0]
 80076b0:	f7ff ff8d 	bl	80075ce <__hexdig_fun>
 80076b4:	1e43      	subs	r3, r0, #1
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b18      	cmp	r3, #24
 80076ba:	d830      	bhi.n	800771e <__gethex+0x126>
 80076bc:	f1a0 0210 	sub.w	r2, r0, #16
 80076c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076c4:	f7ff ff83 	bl	80075ce <__hexdig_fun>
 80076c8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80076cc:	fa5f fc8c 	uxtb.w	ip, ip
 80076d0:	f1bc 0f18 	cmp.w	ip, #24
 80076d4:	f04f 030a 	mov.w	r3, #10
 80076d8:	d91e      	bls.n	8007718 <__gethex+0x120>
 80076da:	b104      	cbz	r4, 80076de <__gethex+0xe6>
 80076dc:	4252      	negs	r2, r2
 80076de:	4417      	add	r7, r2
 80076e0:	f8ca 1000 	str.w	r1, [sl]
 80076e4:	b1ed      	cbz	r5, 8007722 <__gethex+0x12a>
 80076e6:	f1bb 0f00 	cmp.w	fp, #0
 80076ea:	bf0c      	ite	eq
 80076ec:	2506      	moveq	r5, #6
 80076ee:	2500      	movne	r5, #0
 80076f0:	4628      	mov	r0, r5
 80076f2:	b005      	add	sp, #20
 80076f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	2500      	movs	r5, #0
 80076fa:	462c      	mov	r4, r5
 80076fc:	e7b0      	b.n	8007660 <__gethex+0x68>
 80076fe:	2c00      	cmp	r4, #0
 8007700:	d1c7      	bne.n	8007692 <__gethex+0x9a>
 8007702:	4627      	mov	r7, r4
 8007704:	e7c7      	b.n	8007696 <__gethex+0x9e>
 8007706:	464e      	mov	r6, r9
 8007708:	462f      	mov	r7, r5
 800770a:	2501      	movs	r5, #1
 800770c:	e7c3      	b.n	8007696 <__gethex+0x9e>
 800770e:	2400      	movs	r4, #0
 8007710:	1cb1      	adds	r1, r6, #2
 8007712:	e7cc      	b.n	80076ae <__gethex+0xb6>
 8007714:	2401      	movs	r4, #1
 8007716:	e7fb      	b.n	8007710 <__gethex+0x118>
 8007718:	fb03 0002 	mla	r0, r3, r2, r0
 800771c:	e7ce      	b.n	80076bc <__gethex+0xc4>
 800771e:	4631      	mov	r1, r6
 8007720:	e7de      	b.n	80076e0 <__gethex+0xe8>
 8007722:	4629      	mov	r1, r5
 8007724:	eba6 0309 	sub.w	r3, r6, r9
 8007728:	3b01      	subs	r3, #1
 800772a:	2b07      	cmp	r3, #7
 800772c:	dc0a      	bgt.n	8007744 <__gethex+0x14c>
 800772e:	9801      	ldr	r0, [sp, #4]
 8007730:	f7fe f954 	bl	80059dc <_Balloc>
 8007734:	4604      	mov	r4, r0
 8007736:	b940      	cbnz	r0, 800774a <__gethex+0x152>
 8007738:	4602      	mov	r2, r0
 800773a:	21e4      	movs	r1, #228	@ 0xe4
 800773c:	4b5b      	ldr	r3, [pc, #364]	@ (80078ac <__gethex+0x2b4>)
 800773e:	485c      	ldr	r0, [pc, #368]	@ (80078b0 <__gethex+0x2b8>)
 8007740:	f7ff fec0 	bl	80074c4 <__assert_func>
 8007744:	3101      	adds	r1, #1
 8007746:	105b      	asrs	r3, r3, #1
 8007748:	e7ef      	b.n	800772a <__gethex+0x132>
 800774a:	2300      	movs	r3, #0
 800774c:	f100 0a14 	add.w	sl, r0, #20
 8007750:	4655      	mov	r5, sl
 8007752:	469b      	mov	fp, r3
 8007754:	45b1      	cmp	r9, r6
 8007756:	d337      	bcc.n	80077c8 <__gethex+0x1d0>
 8007758:	f845 bb04 	str.w	fp, [r5], #4
 800775c:	eba5 050a 	sub.w	r5, r5, sl
 8007760:	10ad      	asrs	r5, r5, #2
 8007762:	6125      	str	r5, [r4, #16]
 8007764:	4658      	mov	r0, fp
 8007766:	f7fe fa2b 	bl	8005bc0 <__hi0bits>
 800776a:	016d      	lsls	r5, r5, #5
 800776c:	f8d8 6000 	ldr.w	r6, [r8]
 8007770:	1a2d      	subs	r5, r5, r0
 8007772:	42b5      	cmp	r5, r6
 8007774:	dd54      	ble.n	8007820 <__gethex+0x228>
 8007776:	1bad      	subs	r5, r5, r6
 8007778:	4629      	mov	r1, r5
 800777a:	4620      	mov	r0, r4
 800777c:	f7fe fdb3 	bl	80062e6 <__any_on>
 8007780:	4681      	mov	r9, r0
 8007782:	b178      	cbz	r0, 80077a4 <__gethex+0x1ac>
 8007784:	f04f 0901 	mov.w	r9, #1
 8007788:	1e6b      	subs	r3, r5, #1
 800778a:	1159      	asrs	r1, r3, #5
 800778c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007790:	f003 021f 	and.w	r2, r3, #31
 8007794:	fa09 f202 	lsl.w	r2, r9, r2
 8007798:	420a      	tst	r2, r1
 800779a:	d003      	beq.n	80077a4 <__gethex+0x1ac>
 800779c:	454b      	cmp	r3, r9
 800779e:	dc36      	bgt.n	800780e <__gethex+0x216>
 80077a0:	f04f 0902 	mov.w	r9, #2
 80077a4:	4629      	mov	r1, r5
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7ff febe 	bl	8007528 <rshift>
 80077ac:	442f      	add	r7, r5
 80077ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077b2:	42bb      	cmp	r3, r7
 80077b4:	da42      	bge.n	800783c <__gethex+0x244>
 80077b6:	4621      	mov	r1, r4
 80077b8:	9801      	ldr	r0, [sp, #4]
 80077ba:	f7fe f94f 	bl	8005a5c <_Bfree>
 80077be:	2300      	movs	r3, #0
 80077c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077c2:	25a3      	movs	r5, #163	@ 0xa3
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e793      	b.n	80076f0 <__gethex+0xf8>
 80077c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80077cc:	2a2e      	cmp	r2, #46	@ 0x2e
 80077ce:	d012      	beq.n	80077f6 <__gethex+0x1fe>
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d104      	bne.n	80077de <__gethex+0x1e6>
 80077d4:	f845 bb04 	str.w	fp, [r5], #4
 80077d8:	f04f 0b00 	mov.w	fp, #0
 80077dc:	465b      	mov	r3, fp
 80077de:	7830      	ldrb	r0, [r6, #0]
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	f7ff fef4 	bl	80075ce <__hexdig_fun>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	f000 000f 	and.w	r0, r0, #15
 80077ec:	4098      	lsls	r0, r3
 80077ee:	ea4b 0b00 	orr.w	fp, fp, r0
 80077f2:	3304      	adds	r3, #4
 80077f4:	e7ae      	b.n	8007754 <__gethex+0x15c>
 80077f6:	45b1      	cmp	r9, r6
 80077f8:	d8ea      	bhi.n	80077d0 <__gethex+0x1d8>
 80077fa:	2201      	movs	r2, #1
 80077fc:	4630      	mov	r0, r6
 80077fe:	492a      	ldr	r1, [pc, #168]	@ (80078a8 <__gethex+0x2b0>)
 8007800:	9303      	str	r3, [sp, #12]
 8007802:	f7ff fe29 	bl	8007458 <strncmp>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	2800      	cmp	r0, #0
 800780a:	d1e1      	bne.n	80077d0 <__gethex+0x1d8>
 800780c:	e7a2      	b.n	8007754 <__gethex+0x15c>
 800780e:	4620      	mov	r0, r4
 8007810:	1ea9      	subs	r1, r5, #2
 8007812:	f7fe fd68 	bl	80062e6 <__any_on>
 8007816:	2800      	cmp	r0, #0
 8007818:	d0c2      	beq.n	80077a0 <__gethex+0x1a8>
 800781a:	f04f 0903 	mov.w	r9, #3
 800781e:	e7c1      	b.n	80077a4 <__gethex+0x1ac>
 8007820:	da09      	bge.n	8007836 <__gethex+0x23e>
 8007822:	1b75      	subs	r5, r6, r5
 8007824:	4621      	mov	r1, r4
 8007826:	462a      	mov	r2, r5
 8007828:	9801      	ldr	r0, [sp, #4]
 800782a:	f7fe fb2d 	bl	8005e88 <__lshift>
 800782e:	4604      	mov	r4, r0
 8007830:	1b7f      	subs	r7, r7, r5
 8007832:	f100 0a14 	add.w	sl, r0, #20
 8007836:	f04f 0900 	mov.w	r9, #0
 800783a:	e7b8      	b.n	80077ae <__gethex+0x1b6>
 800783c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007840:	42bd      	cmp	r5, r7
 8007842:	dd6f      	ble.n	8007924 <__gethex+0x32c>
 8007844:	1bed      	subs	r5, r5, r7
 8007846:	42ae      	cmp	r6, r5
 8007848:	dc34      	bgt.n	80078b4 <__gethex+0x2bc>
 800784a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d022      	beq.n	8007898 <__gethex+0x2a0>
 8007852:	2b03      	cmp	r3, #3
 8007854:	d024      	beq.n	80078a0 <__gethex+0x2a8>
 8007856:	2b01      	cmp	r3, #1
 8007858:	d115      	bne.n	8007886 <__gethex+0x28e>
 800785a:	42ae      	cmp	r6, r5
 800785c:	d113      	bne.n	8007886 <__gethex+0x28e>
 800785e:	2e01      	cmp	r6, #1
 8007860:	d10b      	bne.n	800787a <__gethex+0x282>
 8007862:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007866:	9a02      	ldr	r2, [sp, #8]
 8007868:	2562      	movs	r5, #98	@ 0x62
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	2301      	movs	r3, #1
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	f8ca 3000 	str.w	r3, [sl]
 8007874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007876:	601c      	str	r4, [r3, #0]
 8007878:	e73a      	b.n	80076f0 <__gethex+0xf8>
 800787a:	4620      	mov	r0, r4
 800787c:	1e71      	subs	r1, r6, #1
 800787e:	f7fe fd32 	bl	80062e6 <__any_on>
 8007882:	2800      	cmp	r0, #0
 8007884:	d1ed      	bne.n	8007862 <__gethex+0x26a>
 8007886:	4621      	mov	r1, r4
 8007888:	9801      	ldr	r0, [sp, #4]
 800788a:	f7fe f8e7 	bl	8005a5c <_Bfree>
 800788e:	2300      	movs	r3, #0
 8007890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007892:	2550      	movs	r5, #80	@ 0x50
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	e72b      	b.n	80076f0 <__gethex+0xf8>
 8007898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f3      	bne.n	8007886 <__gethex+0x28e>
 800789e:	e7e0      	b.n	8007862 <__gethex+0x26a>
 80078a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1dd      	bne.n	8007862 <__gethex+0x26a>
 80078a6:	e7ee      	b.n	8007886 <__gethex+0x28e>
 80078a8:	080085a8 	.word	0x080085a8
 80078ac:	0800843b 	.word	0x0800843b
 80078b0:	08008756 	.word	0x08008756
 80078b4:	1e6f      	subs	r7, r5, #1
 80078b6:	f1b9 0f00 	cmp.w	r9, #0
 80078ba:	d130      	bne.n	800791e <__gethex+0x326>
 80078bc:	b127      	cbz	r7, 80078c8 <__gethex+0x2d0>
 80078be:	4639      	mov	r1, r7
 80078c0:	4620      	mov	r0, r4
 80078c2:	f7fe fd10 	bl	80062e6 <__any_on>
 80078c6:	4681      	mov	r9, r0
 80078c8:	2301      	movs	r3, #1
 80078ca:	4629      	mov	r1, r5
 80078cc:	1b76      	subs	r6, r6, r5
 80078ce:	2502      	movs	r5, #2
 80078d0:	117a      	asrs	r2, r7, #5
 80078d2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80078d6:	f007 071f 	and.w	r7, r7, #31
 80078da:	40bb      	lsls	r3, r7
 80078dc:	4213      	tst	r3, r2
 80078de:	4620      	mov	r0, r4
 80078e0:	bf18      	it	ne
 80078e2:	f049 0902 	orrne.w	r9, r9, #2
 80078e6:	f7ff fe1f 	bl	8007528 <rshift>
 80078ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80078ee:	f1b9 0f00 	cmp.w	r9, #0
 80078f2:	d047      	beq.n	8007984 <__gethex+0x38c>
 80078f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d015      	beq.n	8007928 <__gethex+0x330>
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d017      	beq.n	8007930 <__gethex+0x338>
 8007900:	2b01      	cmp	r3, #1
 8007902:	d109      	bne.n	8007918 <__gethex+0x320>
 8007904:	f019 0f02 	tst.w	r9, #2
 8007908:	d006      	beq.n	8007918 <__gethex+0x320>
 800790a:	f8da 3000 	ldr.w	r3, [sl]
 800790e:	ea49 0903 	orr.w	r9, r9, r3
 8007912:	f019 0f01 	tst.w	r9, #1
 8007916:	d10e      	bne.n	8007936 <__gethex+0x33e>
 8007918:	f045 0510 	orr.w	r5, r5, #16
 800791c:	e032      	b.n	8007984 <__gethex+0x38c>
 800791e:	f04f 0901 	mov.w	r9, #1
 8007922:	e7d1      	b.n	80078c8 <__gethex+0x2d0>
 8007924:	2501      	movs	r5, #1
 8007926:	e7e2      	b.n	80078ee <__gethex+0x2f6>
 8007928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800792a:	f1c3 0301 	rsb	r3, r3, #1
 800792e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <__gethex+0x320>
 8007936:	f04f 0c00 	mov.w	ip, #0
 800793a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800793e:	f104 0314 	add.w	r3, r4, #20
 8007942:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007946:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800794a:	4618      	mov	r0, r3
 800794c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007950:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007954:	d01b      	beq.n	800798e <__gethex+0x396>
 8007956:	3201      	adds	r2, #1
 8007958:	6002      	str	r2, [r0, #0]
 800795a:	2d02      	cmp	r5, #2
 800795c:	f104 0314 	add.w	r3, r4, #20
 8007960:	d13c      	bne.n	80079dc <__gethex+0x3e4>
 8007962:	f8d8 2000 	ldr.w	r2, [r8]
 8007966:	3a01      	subs	r2, #1
 8007968:	42b2      	cmp	r2, r6
 800796a:	d109      	bne.n	8007980 <__gethex+0x388>
 800796c:	2201      	movs	r2, #1
 800796e:	1171      	asrs	r1, r6, #5
 8007970:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007974:	f006 061f 	and.w	r6, r6, #31
 8007978:	fa02 f606 	lsl.w	r6, r2, r6
 800797c:	421e      	tst	r6, r3
 800797e:	d13a      	bne.n	80079f6 <__gethex+0x3fe>
 8007980:	f045 0520 	orr.w	r5, r5, #32
 8007984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007986:	601c      	str	r4, [r3, #0]
 8007988:	9b02      	ldr	r3, [sp, #8]
 800798a:	601f      	str	r7, [r3, #0]
 800798c:	e6b0      	b.n	80076f0 <__gethex+0xf8>
 800798e:	4299      	cmp	r1, r3
 8007990:	f843 cc04 	str.w	ip, [r3, #-4]
 8007994:	d8d9      	bhi.n	800794a <__gethex+0x352>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	459b      	cmp	fp, r3
 800799a:	db17      	blt.n	80079cc <__gethex+0x3d4>
 800799c:	6861      	ldr	r1, [r4, #4]
 800799e:	9801      	ldr	r0, [sp, #4]
 80079a0:	3101      	adds	r1, #1
 80079a2:	f7fe f81b 	bl	80059dc <_Balloc>
 80079a6:	4681      	mov	r9, r0
 80079a8:	b918      	cbnz	r0, 80079b2 <__gethex+0x3ba>
 80079aa:	4602      	mov	r2, r0
 80079ac:	2184      	movs	r1, #132	@ 0x84
 80079ae:	4b19      	ldr	r3, [pc, #100]	@ (8007a14 <__gethex+0x41c>)
 80079b0:	e6c5      	b.n	800773e <__gethex+0x146>
 80079b2:	6922      	ldr	r2, [r4, #16]
 80079b4:	f104 010c 	add.w	r1, r4, #12
 80079b8:	3202      	adds	r2, #2
 80079ba:	0092      	lsls	r2, r2, #2
 80079bc:	300c      	adds	r0, #12
 80079be:	f7ff fd6d 	bl	800749c <memcpy>
 80079c2:	4621      	mov	r1, r4
 80079c4:	9801      	ldr	r0, [sp, #4]
 80079c6:	f7fe f849 	bl	8005a5c <_Bfree>
 80079ca:	464c      	mov	r4, r9
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	6122      	str	r2, [r4, #16]
 80079d2:	2201      	movs	r2, #1
 80079d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079d8:	615a      	str	r2, [r3, #20]
 80079da:	e7be      	b.n	800795a <__gethex+0x362>
 80079dc:	6922      	ldr	r2, [r4, #16]
 80079de:	455a      	cmp	r2, fp
 80079e0:	dd0b      	ble.n	80079fa <__gethex+0x402>
 80079e2:	2101      	movs	r1, #1
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7ff fd9f 	bl	8007528 <rshift>
 80079ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079ee:	3701      	adds	r7, #1
 80079f0:	42bb      	cmp	r3, r7
 80079f2:	f6ff aee0 	blt.w	80077b6 <__gethex+0x1be>
 80079f6:	2501      	movs	r5, #1
 80079f8:	e7c2      	b.n	8007980 <__gethex+0x388>
 80079fa:	f016 061f 	ands.w	r6, r6, #31
 80079fe:	d0fa      	beq.n	80079f6 <__gethex+0x3fe>
 8007a00:	4453      	add	r3, sl
 8007a02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007a06:	f7fe f8db 	bl	8005bc0 <__hi0bits>
 8007a0a:	f1c6 0620 	rsb	r6, r6, #32
 8007a0e:	42b0      	cmp	r0, r6
 8007a10:	dbe7      	blt.n	80079e2 <__gethex+0x3ea>
 8007a12:	e7f0      	b.n	80079f6 <__gethex+0x3fe>
 8007a14:	0800843b 	.word	0x0800843b

08007a18 <L_shift>:
 8007a18:	f1c2 0208 	rsb	r2, r2, #8
 8007a1c:	0092      	lsls	r2, r2, #2
 8007a1e:	b570      	push	{r4, r5, r6, lr}
 8007a20:	f1c2 0620 	rsb	r6, r2, #32
 8007a24:	6843      	ldr	r3, [r0, #4]
 8007a26:	6804      	ldr	r4, [r0, #0]
 8007a28:	fa03 f506 	lsl.w	r5, r3, r6
 8007a2c:	432c      	orrs	r4, r5
 8007a2e:	40d3      	lsrs	r3, r2
 8007a30:	6004      	str	r4, [r0, #0]
 8007a32:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a36:	4288      	cmp	r0, r1
 8007a38:	d3f4      	bcc.n	8007a24 <L_shift+0xc>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}

08007a3c <__match>:
 8007a3c:	b530      	push	{r4, r5, lr}
 8007a3e:	6803      	ldr	r3, [r0, #0]
 8007a40:	3301      	adds	r3, #1
 8007a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a46:	b914      	cbnz	r4, 8007a4e <__match+0x12>
 8007a48:	6003      	str	r3, [r0, #0]
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	bd30      	pop	{r4, r5, pc}
 8007a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a52:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007a56:	2d19      	cmp	r5, #25
 8007a58:	bf98      	it	ls
 8007a5a:	3220      	addls	r2, #32
 8007a5c:	42a2      	cmp	r2, r4
 8007a5e:	d0f0      	beq.n	8007a42 <__match+0x6>
 8007a60:	2000      	movs	r0, #0
 8007a62:	e7f3      	b.n	8007a4c <__match+0x10>

08007a64 <__hexnan>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	2500      	movs	r5, #0
 8007a6a:	680b      	ldr	r3, [r1, #0]
 8007a6c:	4682      	mov	sl, r0
 8007a6e:	115e      	asrs	r6, r3, #5
 8007a70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a74:	f013 031f 	ands.w	r3, r3, #31
 8007a78:	bf18      	it	ne
 8007a7a:	3604      	addne	r6, #4
 8007a7c:	1f37      	subs	r7, r6, #4
 8007a7e:	4690      	mov	r8, r2
 8007a80:	46b9      	mov	r9, r7
 8007a82:	463c      	mov	r4, r7
 8007a84:	46ab      	mov	fp, r5
 8007a86:	b087      	sub	sp, #28
 8007a88:	6801      	ldr	r1, [r0, #0]
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a90:	9502      	str	r5, [sp, #8]
 8007a92:	784a      	ldrb	r2, [r1, #1]
 8007a94:	1c4b      	adds	r3, r1, #1
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	b342      	cbz	r2, 8007aec <__hexnan+0x88>
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	9105      	str	r1, [sp, #20]
 8007a9e:	9204      	str	r2, [sp, #16]
 8007aa0:	f7ff fd95 	bl	80075ce <__hexdig_fun>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d151      	bne.n	8007b4c <__hexnan+0xe8>
 8007aa8:	9a04      	ldr	r2, [sp, #16]
 8007aaa:	9905      	ldr	r1, [sp, #20]
 8007aac:	2a20      	cmp	r2, #32
 8007aae:	d818      	bhi.n	8007ae2 <__hexnan+0x7e>
 8007ab0:	9b02      	ldr	r3, [sp, #8]
 8007ab2:	459b      	cmp	fp, r3
 8007ab4:	dd13      	ble.n	8007ade <__hexnan+0x7a>
 8007ab6:	454c      	cmp	r4, r9
 8007ab8:	d206      	bcs.n	8007ac8 <__hexnan+0x64>
 8007aba:	2d07      	cmp	r5, #7
 8007abc:	dc04      	bgt.n	8007ac8 <__hexnan+0x64>
 8007abe:	462a      	mov	r2, r5
 8007ac0:	4649      	mov	r1, r9
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7ff ffa8 	bl	8007a18 <L_shift>
 8007ac8:	4544      	cmp	r4, r8
 8007aca:	d952      	bls.n	8007b72 <__hexnan+0x10e>
 8007acc:	2300      	movs	r3, #0
 8007ace:	f1a4 0904 	sub.w	r9, r4, #4
 8007ad2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ad6:	461d      	mov	r5, r3
 8007ad8:	464c      	mov	r4, r9
 8007ada:	f8cd b008 	str.w	fp, [sp, #8]
 8007ade:	9903      	ldr	r1, [sp, #12]
 8007ae0:	e7d7      	b.n	8007a92 <__hexnan+0x2e>
 8007ae2:	2a29      	cmp	r2, #41	@ 0x29
 8007ae4:	d157      	bne.n	8007b96 <__hexnan+0x132>
 8007ae6:	3102      	adds	r1, #2
 8007ae8:	f8ca 1000 	str.w	r1, [sl]
 8007aec:	f1bb 0f00 	cmp.w	fp, #0
 8007af0:	d051      	beq.n	8007b96 <__hexnan+0x132>
 8007af2:	454c      	cmp	r4, r9
 8007af4:	d206      	bcs.n	8007b04 <__hexnan+0xa0>
 8007af6:	2d07      	cmp	r5, #7
 8007af8:	dc04      	bgt.n	8007b04 <__hexnan+0xa0>
 8007afa:	462a      	mov	r2, r5
 8007afc:	4649      	mov	r1, r9
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7ff ff8a 	bl	8007a18 <L_shift>
 8007b04:	4544      	cmp	r4, r8
 8007b06:	d936      	bls.n	8007b76 <__hexnan+0x112>
 8007b08:	4623      	mov	r3, r4
 8007b0a:	f1a8 0204 	sub.w	r2, r8, #4
 8007b0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b12:	429f      	cmp	r7, r3
 8007b14:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b18:	d2f9      	bcs.n	8007b0e <__hexnan+0xaa>
 8007b1a:	1b3b      	subs	r3, r7, r4
 8007b1c:	f023 0303 	bic.w	r3, r3, #3
 8007b20:	3304      	adds	r3, #4
 8007b22:	3401      	adds	r4, #1
 8007b24:	3e03      	subs	r6, #3
 8007b26:	42b4      	cmp	r4, r6
 8007b28:	bf88      	it	hi
 8007b2a:	2304      	movhi	r3, #4
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4443      	add	r3, r8
 8007b30:	f843 2b04 	str.w	r2, [r3], #4
 8007b34:	429f      	cmp	r7, r3
 8007b36:	d2fb      	bcs.n	8007b30 <__hexnan+0xcc>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	b91b      	cbnz	r3, 8007b44 <__hexnan+0xe0>
 8007b3c:	4547      	cmp	r7, r8
 8007b3e:	d128      	bne.n	8007b92 <__hexnan+0x12e>
 8007b40:	2301      	movs	r3, #1
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	2005      	movs	r0, #5
 8007b46:	b007      	add	sp, #28
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4c:	3501      	adds	r5, #1
 8007b4e:	2d08      	cmp	r5, #8
 8007b50:	f10b 0b01 	add.w	fp, fp, #1
 8007b54:	dd06      	ble.n	8007b64 <__hexnan+0x100>
 8007b56:	4544      	cmp	r4, r8
 8007b58:	d9c1      	bls.n	8007ade <__hexnan+0x7a>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2501      	movs	r5, #1
 8007b5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b62:	3c04      	subs	r4, #4
 8007b64:	6822      	ldr	r2, [r4, #0]
 8007b66:	f000 000f 	and.w	r0, r0, #15
 8007b6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b6e:	6020      	str	r0, [r4, #0]
 8007b70:	e7b5      	b.n	8007ade <__hexnan+0x7a>
 8007b72:	2508      	movs	r5, #8
 8007b74:	e7b3      	b.n	8007ade <__hexnan+0x7a>
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0dd      	beq.n	8007b38 <__hexnan+0xd4>
 8007b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b80:	f1c3 0320 	rsb	r3, r3, #32
 8007b84:	40da      	lsrs	r2, r3
 8007b86:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007b90:	e7d2      	b.n	8007b38 <__hexnan+0xd4>
 8007b92:	3f04      	subs	r7, #4
 8007b94:	e7d0      	b.n	8007b38 <__hexnan+0xd4>
 8007b96:	2004      	movs	r0, #4
 8007b98:	e7d5      	b.n	8007b46 <__hexnan+0xe2>

08007b9a <__ascii_mbtowc>:
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	b901      	cbnz	r1, 8007ba0 <__ascii_mbtowc+0x6>
 8007b9e:	a901      	add	r1, sp, #4
 8007ba0:	b142      	cbz	r2, 8007bb4 <__ascii_mbtowc+0x1a>
 8007ba2:	b14b      	cbz	r3, 8007bb8 <__ascii_mbtowc+0x1e>
 8007ba4:	7813      	ldrb	r3, [r2, #0]
 8007ba6:	600b      	str	r3, [r1, #0]
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	1e10      	subs	r0, r2, #0
 8007bac:	bf18      	it	ne
 8007bae:	2001      	movne	r0, #1
 8007bb0:	b002      	add	sp, #8
 8007bb2:	4770      	bx	lr
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	e7fb      	b.n	8007bb0 <__ascii_mbtowc+0x16>
 8007bb8:	f06f 0001 	mvn.w	r0, #1
 8007bbc:	e7f8      	b.n	8007bb0 <__ascii_mbtowc+0x16>

08007bbe <_realloc_r>:
 8007bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	4615      	mov	r5, r2
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	b921      	cbnz	r1, 8007bd4 <_realloc_r+0x16>
 8007bca:	4611      	mov	r1, r2
 8007bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	f7fd be78 	b.w	80058c4 <_malloc_r>
 8007bd4:	b92a      	cbnz	r2, 8007be2 <_realloc_r+0x24>
 8007bd6:	f7fd fe03 	bl	80057e0 <_free_r>
 8007bda:	2400      	movs	r4, #0
 8007bdc:	4620      	mov	r0, r4
 8007bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be2:	f000 f840 	bl	8007c66 <_malloc_usable_size_r>
 8007be6:	4285      	cmp	r5, r0
 8007be8:	4606      	mov	r6, r0
 8007bea:	d802      	bhi.n	8007bf2 <_realloc_r+0x34>
 8007bec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bf0:	d8f4      	bhi.n	8007bdc <_realloc_r+0x1e>
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	f7fd fe65 	bl	80058c4 <_malloc_r>
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d0ec      	beq.n	8007bda <_realloc_r+0x1c>
 8007c00:	42b5      	cmp	r5, r6
 8007c02:	462a      	mov	r2, r5
 8007c04:	4621      	mov	r1, r4
 8007c06:	bf28      	it	cs
 8007c08:	4632      	movcs	r2, r6
 8007c0a:	f7ff fc47 	bl	800749c <memcpy>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4640      	mov	r0, r8
 8007c12:	f7fd fde5 	bl	80057e0 <_free_r>
 8007c16:	463c      	mov	r4, r7
 8007c18:	e7e0      	b.n	8007bdc <_realloc_r+0x1e>

08007c1a <__ascii_wctomb>:
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	b141      	cbz	r1, 8007c32 <__ascii_wctomb+0x18>
 8007c20:	2aff      	cmp	r2, #255	@ 0xff
 8007c22:	d904      	bls.n	8007c2e <__ascii_wctomb+0x14>
 8007c24:	228a      	movs	r2, #138	@ 0x8a
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	4770      	bx	lr
 8007c2e:	2001      	movs	r0, #1
 8007c30:	700a      	strb	r2, [r1, #0]
 8007c32:	4770      	bx	lr

08007c34 <fiprintf>:
 8007c34:	b40e      	push	{r1, r2, r3}
 8007c36:	b503      	push	{r0, r1, lr}
 8007c38:	4601      	mov	r1, r0
 8007c3a:	ab03      	add	r3, sp, #12
 8007c3c:	4805      	ldr	r0, [pc, #20]	@ (8007c54 <fiprintf+0x20>)
 8007c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c42:	6800      	ldr	r0, [r0, #0]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	f000 f83d 	bl	8007cc4 <_vfiprintf_r>
 8007c4a:	b002      	add	sp, #8
 8007c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c50:	b003      	add	sp, #12
 8007c52:	4770      	bx	lr
 8007c54:	2000002c 	.word	0x2000002c

08007c58 <abort>:
 8007c58:	2006      	movs	r0, #6
 8007c5a:	b508      	push	{r3, lr}
 8007c5c:	f000 fa06 	bl	800806c <raise>
 8007c60:	2001      	movs	r0, #1
 8007c62:	f7f9 ffc8 	bl	8001bf6 <_exit>

08007c66 <_malloc_usable_size_r>:
 8007c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6a:	1f18      	subs	r0, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bfbc      	itt	lt
 8007c70:	580b      	ldrlt	r3, [r1, r0]
 8007c72:	18c0      	addlt	r0, r0, r3
 8007c74:	4770      	bx	lr

08007c76 <__sfputc_r>:
 8007c76:	6893      	ldr	r3, [r2, #8]
 8007c78:	b410      	push	{r4}
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	6093      	str	r3, [r2, #8]
 8007c80:	da07      	bge.n	8007c92 <__sfputc_r+0x1c>
 8007c82:	6994      	ldr	r4, [r2, #24]
 8007c84:	42a3      	cmp	r3, r4
 8007c86:	db01      	blt.n	8007c8c <__sfputc_r+0x16>
 8007c88:	290a      	cmp	r1, #10
 8007c8a:	d102      	bne.n	8007c92 <__sfputc_r+0x1c>
 8007c8c:	bc10      	pop	{r4}
 8007c8e:	f000 b931 	b.w	8007ef4 <__swbuf_r>
 8007c92:	6813      	ldr	r3, [r2, #0]
 8007c94:	1c58      	adds	r0, r3, #1
 8007c96:	6010      	str	r0, [r2, #0]
 8007c98:	7019      	strb	r1, [r3, #0]
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	bc10      	pop	{r4}
 8007c9e:	4770      	bx	lr

08007ca0 <__sfputs_r>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	18d5      	adds	r5, r2, r3
 8007caa:	42ac      	cmp	r4, r5
 8007cac:	d101      	bne.n	8007cb2 <__sfputs_r+0x12>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e007      	b.n	8007cc2 <__sfputs_r+0x22>
 8007cb2:	463a      	mov	r2, r7
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cba:	f7ff ffdc 	bl	8007c76 <__sfputc_r>
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d1f3      	bne.n	8007caa <__sfputs_r+0xa>
 8007cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cc4 <_vfiprintf_r>:
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	460d      	mov	r5, r1
 8007cca:	4614      	mov	r4, r2
 8007ccc:	4698      	mov	r8, r3
 8007cce:	4606      	mov	r6, r0
 8007cd0:	b09d      	sub	sp, #116	@ 0x74
 8007cd2:	b118      	cbz	r0, 8007cdc <_vfiprintf_r+0x18>
 8007cd4:	6a03      	ldr	r3, [r0, #32]
 8007cd6:	b90b      	cbnz	r3, 8007cdc <_vfiprintf_r+0x18>
 8007cd8:	f7fc fe06 	bl	80048e8 <__sinit>
 8007cdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	d405      	bmi.n	8007cee <_vfiprintf_r+0x2a>
 8007ce2:	89ab      	ldrh	r3, [r5, #12]
 8007ce4:	059a      	lsls	r2, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_vfiprintf_r+0x2a>
 8007ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cea:	f7fc ff14 	bl	8004b16 <__retarget_lock_acquire_recursive>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	071b      	lsls	r3, r3, #28
 8007cf2:	d501      	bpl.n	8007cf8 <_vfiprintf_r+0x34>
 8007cf4:	692b      	ldr	r3, [r5, #16]
 8007cf6:	b99b      	cbnz	r3, 8007d20 <_vfiprintf_r+0x5c>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f938 	bl	8007f70 <__swsetup_r>
 8007d00:	b170      	cbz	r0, 8007d20 <_vfiprintf_r+0x5c>
 8007d02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d04:	07dc      	lsls	r4, r3, #31
 8007d06:	d504      	bpl.n	8007d12 <_vfiprintf_r+0x4e>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d0c:	b01d      	add	sp, #116	@ 0x74
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	0598      	lsls	r0, r3, #22
 8007d16:	d4f7      	bmi.n	8007d08 <_vfiprintf_r+0x44>
 8007d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d1a:	f7fc fefd 	bl	8004b18 <__retarget_lock_release_recursive>
 8007d1e:	e7f3      	b.n	8007d08 <_vfiprintf_r+0x44>
 8007d20:	2300      	movs	r3, #0
 8007d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d24:	2320      	movs	r3, #32
 8007d26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d2a:	2330      	movs	r3, #48	@ 0x30
 8007d2c:	f04f 0901 	mov.w	r9, #1
 8007d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d34:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007ee0 <_vfiprintf_r+0x21c>
 8007d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d3c:	4623      	mov	r3, r4
 8007d3e:	469a      	mov	sl, r3
 8007d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d44:	b10a      	cbz	r2, 8007d4a <_vfiprintf_r+0x86>
 8007d46:	2a25      	cmp	r2, #37	@ 0x25
 8007d48:	d1f9      	bne.n	8007d3e <_vfiprintf_r+0x7a>
 8007d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d4e:	d00b      	beq.n	8007d68 <_vfiprintf_r+0xa4>
 8007d50:	465b      	mov	r3, fp
 8007d52:	4622      	mov	r2, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff ffa2 	bl	8007ca0 <__sfputs_r>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f000 80a7 	beq.w	8007eb0 <_vfiprintf_r+0x1ec>
 8007d62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d64:	445a      	add	r2, fp
 8007d66:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d68:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 809f 	beq.w	8007eb0 <_vfiprintf_r+0x1ec>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7c:	f10a 0a01 	add.w	sl, sl, #1
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	9307      	str	r3, [sp, #28]
 8007d84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d88:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d8a:	4654      	mov	r4, sl
 8007d8c:	2205      	movs	r2, #5
 8007d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d92:	4853      	ldr	r0, [pc, #332]	@ (8007ee0 <_vfiprintf_r+0x21c>)
 8007d94:	f7fc fec1 	bl	8004b1a <memchr>
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	b9d8      	cbnz	r0, 8007dd4 <_vfiprintf_r+0x110>
 8007d9c:	06d1      	lsls	r1, r2, #27
 8007d9e:	bf44      	itt	mi
 8007da0:	2320      	movmi	r3, #32
 8007da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da6:	0713      	lsls	r3, r2, #28
 8007da8:	bf44      	itt	mi
 8007daa:	232b      	movmi	r3, #43	@ 0x2b
 8007dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007db0:	f89a 3000 	ldrb.w	r3, [sl]
 8007db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db6:	d015      	beq.n	8007de4 <_vfiprintf_r+0x120>
 8007db8:	4654      	mov	r4, sl
 8007dba:	2000      	movs	r0, #0
 8007dbc:	f04f 0c0a 	mov.w	ip, #10
 8007dc0:	9a07      	ldr	r2, [sp, #28]
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc8:	3b30      	subs	r3, #48	@ 0x30
 8007dca:	2b09      	cmp	r3, #9
 8007dcc:	d94b      	bls.n	8007e66 <_vfiprintf_r+0x1a2>
 8007dce:	b1b0      	cbz	r0, 8007dfe <_vfiprintf_r+0x13a>
 8007dd0:	9207      	str	r2, [sp, #28]
 8007dd2:	e014      	b.n	8007dfe <_vfiprintf_r+0x13a>
 8007dd4:	eba0 0308 	sub.w	r3, r0, r8
 8007dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	46a2      	mov	sl, r4
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	e7d2      	b.n	8007d8a <_vfiprintf_r+0xc6>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d19      	adds	r1, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9103      	str	r1, [sp, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfbb      	ittet	lt
 8007df0:	425b      	neglt	r3, r3
 8007df2:	f042 0202 	orrlt.w	r2, r2, #2
 8007df6:	9307      	strge	r3, [sp, #28]
 8007df8:	9307      	strlt	r3, [sp, #28]
 8007dfa:	bfb8      	it	lt
 8007dfc:	9204      	strlt	r2, [sp, #16]
 8007dfe:	7823      	ldrb	r3, [r4, #0]
 8007e00:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e02:	d10a      	bne.n	8007e1a <_vfiprintf_r+0x156>
 8007e04:	7863      	ldrb	r3, [r4, #1]
 8007e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e08:	d132      	bne.n	8007e70 <_vfiprintf_r+0x1ac>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	3402      	adds	r4, #2
 8007e0e:	1d1a      	adds	r2, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	9203      	str	r2, [sp, #12]
 8007e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e18:	9305      	str	r3, [sp, #20]
 8007e1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007ee4 <_vfiprintf_r+0x220>
 8007e1e:	2203      	movs	r2, #3
 8007e20:	4650      	mov	r0, sl
 8007e22:	7821      	ldrb	r1, [r4, #0]
 8007e24:	f7fc fe79 	bl	8004b1a <memchr>
 8007e28:	b138      	cbz	r0, 8007e3a <_vfiprintf_r+0x176>
 8007e2a:	2240      	movs	r2, #64	@ 0x40
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	eba0 000a 	sub.w	r0, r0, sl
 8007e32:	4082      	lsls	r2, r0
 8007e34:	4313      	orrs	r3, r2
 8007e36:	3401      	adds	r4, #1
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3e:	2206      	movs	r2, #6
 8007e40:	4829      	ldr	r0, [pc, #164]	@ (8007ee8 <_vfiprintf_r+0x224>)
 8007e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e46:	f7fc fe68 	bl	8004b1a <memchr>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d03f      	beq.n	8007ece <_vfiprintf_r+0x20a>
 8007e4e:	4b27      	ldr	r3, [pc, #156]	@ (8007eec <_vfiprintf_r+0x228>)
 8007e50:	bb1b      	cbnz	r3, 8007e9a <_vfiprintf_r+0x1d6>
 8007e52:	9b03      	ldr	r3, [sp, #12]
 8007e54:	3307      	adds	r3, #7
 8007e56:	f023 0307 	bic.w	r3, r3, #7
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	9303      	str	r3, [sp, #12]
 8007e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e60:	443b      	add	r3, r7
 8007e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e64:	e76a      	b.n	8007d3c <_vfiprintf_r+0x78>
 8007e66:	460c      	mov	r4, r1
 8007e68:	2001      	movs	r0, #1
 8007e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e6e:	e7a8      	b.n	8007dc2 <_vfiprintf_r+0xfe>
 8007e70:	2300      	movs	r3, #0
 8007e72:	f04f 0c0a 	mov.w	ip, #10
 8007e76:	4619      	mov	r1, r3
 8007e78:	3401      	adds	r4, #1
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e82:	3a30      	subs	r2, #48	@ 0x30
 8007e84:	2a09      	cmp	r2, #9
 8007e86:	d903      	bls.n	8007e90 <_vfiprintf_r+0x1cc>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0c6      	beq.n	8007e1a <_vfiprintf_r+0x156>
 8007e8c:	9105      	str	r1, [sp, #20]
 8007e8e:	e7c4      	b.n	8007e1a <_vfiprintf_r+0x156>
 8007e90:	4604      	mov	r4, r0
 8007e92:	2301      	movs	r3, #1
 8007e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e98:	e7f0      	b.n	8007e7c <_vfiprintf_r+0x1b8>
 8007e9a:	ab03      	add	r3, sp, #12
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4b13      	ldr	r3, [pc, #76]	@ (8007ef0 <_vfiprintf_r+0x22c>)
 8007ea4:	a904      	add	r1, sp, #16
 8007ea6:	f7fb fec5 	bl	8003c34 <_printf_float>
 8007eaa:	4607      	mov	r7, r0
 8007eac:	1c78      	adds	r0, r7, #1
 8007eae:	d1d6      	bne.n	8007e5e <_vfiprintf_r+0x19a>
 8007eb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eb2:	07d9      	lsls	r1, r3, #31
 8007eb4:	d405      	bmi.n	8007ec2 <_vfiprintf_r+0x1fe>
 8007eb6:	89ab      	ldrh	r3, [r5, #12]
 8007eb8:	059a      	lsls	r2, r3, #22
 8007eba:	d402      	bmi.n	8007ec2 <_vfiprintf_r+0x1fe>
 8007ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ebe:	f7fc fe2b 	bl	8004b18 <__retarget_lock_release_recursive>
 8007ec2:	89ab      	ldrh	r3, [r5, #12]
 8007ec4:	065b      	lsls	r3, r3, #25
 8007ec6:	f53f af1f 	bmi.w	8007d08 <_vfiprintf_r+0x44>
 8007eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ecc:	e71e      	b.n	8007d0c <_vfiprintf_r+0x48>
 8007ece:	ab03      	add	r3, sp, #12
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	4b06      	ldr	r3, [pc, #24]	@ (8007ef0 <_vfiprintf_r+0x22c>)
 8007ed8:	a904      	add	r1, sp, #16
 8007eda:	f7fc f949 	bl	8004170 <_printf_i>
 8007ede:	e7e4      	b.n	8007eaa <_vfiprintf_r+0x1e6>
 8007ee0:	08008701 	.word	0x08008701
 8007ee4:	08008707 	.word	0x08008707
 8007ee8:	0800870b 	.word	0x0800870b
 8007eec:	08003c35 	.word	0x08003c35
 8007ef0:	08007ca1 	.word	0x08007ca1

08007ef4 <__swbuf_r>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	460e      	mov	r6, r1
 8007ef8:	4614      	mov	r4, r2
 8007efa:	4605      	mov	r5, r0
 8007efc:	b118      	cbz	r0, 8007f06 <__swbuf_r+0x12>
 8007efe:	6a03      	ldr	r3, [r0, #32]
 8007f00:	b90b      	cbnz	r3, 8007f06 <__swbuf_r+0x12>
 8007f02:	f7fc fcf1 	bl	80048e8 <__sinit>
 8007f06:	69a3      	ldr	r3, [r4, #24]
 8007f08:	60a3      	str	r3, [r4, #8]
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	071a      	lsls	r2, r3, #28
 8007f0e:	d501      	bpl.n	8007f14 <__swbuf_r+0x20>
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	b943      	cbnz	r3, 8007f26 <__swbuf_r+0x32>
 8007f14:	4621      	mov	r1, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 f82a 	bl	8007f70 <__swsetup_r>
 8007f1c:	b118      	cbz	r0, 8007f26 <__swbuf_r+0x32>
 8007f1e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007f22:	4638      	mov	r0, r7
 8007f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	6922      	ldr	r2, [r4, #16]
 8007f2a:	b2f6      	uxtb	r6, r6
 8007f2c:	1a98      	subs	r0, r3, r2
 8007f2e:	6963      	ldr	r3, [r4, #20]
 8007f30:	4637      	mov	r7, r6
 8007f32:	4283      	cmp	r3, r0
 8007f34:	dc05      	bgt.n	8007f42 <__swbuf_r+0x4e>
 8007f36:	4621      	mov	r1, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f7ff fa4b 	bl	80073d4 <_fflush_r>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d1ed      	bne.n	8007f1e <__swbuf_r+0x2a>
 8007f42:	68a3      	ldr	r3, [r4, #8]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	60a3      	str	r3, [r4, #8]
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	6022      	str	r2, [r4, #0]
 8007f4e:	701e      	strb	r6, [r3, #0]
 8007f50:	6962      	ldr	r2, [r4, #20]
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d004      	beq.n	8007f62 <__swbuf_r+0x6e>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	07db      	lsls	r3, r3, #31
 8007f5c:	d5e1      	bpl.n	8007f22 <__swbuf_r+0x2e>
 8007f5e:	2e0a      	cmp	r6, #10
 8007f60:	d1df      	bne.n	8007f22 <__swbuf_r+0x2e>
 8007f62:	4621      	mov	r1, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	f7ff fa35 	bl	80073d4 <_fflush_r>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d0d9      	beq.n	8007f22 <__swbuf_r+0x2e>
 8007f6e:	e7d6      	b.n	8007f1e <__swbuf_r+0x2a>

08007f70 <__swsetup_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	4b29      	ldr	r3, [pc, #164]	@ (8008018 <__swsetup_r+0xa8>)
 8007f74:	4605      	mov	r5, r0
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	460c      	mov	r4, r1
 8007f7a:	b118      	cbz	r0, 8007f84 <__swsetup_r+0x14>
 8007f7c:	6a03      	ldr	r3, [r0, #32]
 8007f7e:	b90b      	cbnz	r3, 8007f84 <__swsetup_r+0x14>
 8007f80:	f7fc fcb2 	bl	80048e8 <__sinit>
 8007f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f88:	0719      	lsls	r1, r3, #28
 8007f8a:	d422      	bmi.n	8007fd2 <__swsetup_r+0x62>
 8007f8c:	06da      	lsls	r2, r3, #27
 8007f8e:	d407      	bmi.n	8007fa0 <__swsetup_r+0x30>
 8007f90:	2209      	movs	r2, #9
 8007f92:	602a      	str	r2, [r5, #0]
 8007f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	e033      	b.n	8008008 <__swsetup_r+0x98>
 8007fa0:	0758      	lsls	r0, r3, #29
 8007fa2:	d512      	bpl.n	8007fca <__swsetup_r+0x5a>
 8007fa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fa6:	b141      	cbz	r1, 8007fba <__swsetup_r+0x4a>
 8007fa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fac:	4299      	cmp	r1, r3
 8007fae:	d002      	beq.n	8007fb6 <__swsetup_r+0x46>
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7fd fc15 	bl	80057e0 <_free_r>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6063      	str	r3, [r4, #4]
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f043 0308 	orr.w	r3, r3, #8
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	b94b      	cbnz	r3, 8007fea <__swsetup_r+0x7a>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fe0:	d003      	beq.n	8007fea <__swsetup_r+0x7a>
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	f000 f882 	bl	80080ee <__smakebuf_r>
 8007fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fee:	f013 0201 	ands.w	r2, r3, #1
 8007ff2:	d00a      	beq.n	800800a <__swsetup_r+0x9a>
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	60a2      	str	r2, [r4, #8]
 8007ff8:	6962      	ldr	r2, [r4, #20]
 8007ffa:	4252      	negs	r2, r2
 8007ffc:	61a2      	str	r2, [r4, #24]
 8007ffe:	6922      	ldr	r2, [r4, #16]
 8008000:	b942      	cbnz	r2, 8008014 <__swsetup_r+0xa4>
 8008002:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008006:	d1c5      	bne.n	8007f94 <__swsetup_r+0x24>
 8008008:	bd38      	pop	{r3, r4, r5, pc}
 800800a:	0799      	lsls	r1, r3, #30
 800800c:	bf58      	it	pl
 800800e:	6962      	ldrpl	r2, [r4, #20]
 8008010:	60a2      	str	r2, [r4, #8]
 8008012:	e7f4      	b.n	8007ffe <__swsetup_r+0x8e>
 8008014:	2000      	movs	r0, #0
 8008016:	e7f7      	b.n	8008008 <__swsetup_r+0x98>
 8008018:	2000002c 	.word	0x2000002c

0800801c <_raise_r>:
 800801c:	291f      	cmp	r1, #31
 800801e:	b538      	push	{r3, r4, r5, lr}
 8008020:	4605      	mov	r5, r0
 8008022:	460c      	mov	r4, r1
 8008024:	d904      	bls.n	8008030 <_raise_r+0x14>
 8008026:	2316      	movs	r3, #22
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008032:	b112      	cbz	r2, 800803a <_raise_r+0x1e>
 8008034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008038:	b94b      	cbnz	r3, 800804e <_raise_r+0x32>
 800803a:	4628      	mov	r0, r5
 800803c:	f000 f830 	bl	80080a0 <_getpid_r>
 8008040:	4622      	mov	r2, r4
 8008042:	4601      	mov	r1, r0
 8008044:	4628      	mov	r0, r5
 8008046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800804a:	f000 b817 	b.w	800807c <_kill_r>
 800804e:	2b01      	cmp	r3, #1
 8008050:	d00a      	beq.n	8008068 <_raise_r+0x4c>
 8008052:	1c59      	adds	r1, r3, #1
 8008054:	d103      	bne.n	800805e <_raise_r+0x42>
 8008056:	2316      	movs	r3, #22
 8008058:	6003      	str	r3, [r0, #0]
 800805a:	2001      	movs	r0, #1
 800805c:	e7e7      	b.n	800802e <_raise_r+0x12>
 800805e:	2100      	movs	r1, #0
 8008060:	4620      	mov	r0, r4
 8008062:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008066:	4798      	blx	r3
 8008068:	2000      	movs	r0, #0
 800806a:	e7e0      	b.n	800802e <_raise_r+0x12>

0800806c <raise>:
 800806c:	4b02      	ldr	r3, [pc, #8]	@ (8008078 <raise+0xc>)
 800806e:	4601      	mov	r1, r0
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f7ff bfd3 	b.w	800801c <_raise_r>
 8008076:	bf00      	nop
 8008078:	2000002c 	.word	0x2000002c

0800807c <_kill_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	2300      	movs	r3, #0
 8008080:	4d06      	ldr	r5, [pc, #24]	@ (800809c <_kill_r+0x20>)
 8008082:	4604      	mov	r4, r0
 8008084:	4608      	mov	r0, r1
 8008086:	4611      	mov	r1, r2
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	f7f9 fda4 	bl	8001bd6 <_kill>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	d102      	bne.n	8008098 <_kill_r+0x1c>
 8008092:	682b      	ldr	r3, [r5, #0]
 8008094:	b103      	cbz	r3, 8008098 <_kill_r+0x1c>
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	bd38      	pop	{r3, r4, r5, pc}
 800809a:	bf00      	nop
 800809c:	200014c4 	.word	0x200014c4

080080a0 <_getpid_r>:
 80080a0:	f7f9 bd92 	b.w	8001bc8 <_getpid>

080080a4 <__swhatbuf_r>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	460c      	mov	r4, r1
 80080a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ac:	4615      	mov	r5, r2
 80080ae:	2900      	cmp	r1, #0
 80080b0:	461e      	mov	r6, r3
 80080b2:	b096      	sub	sp, #88	@ 0x58
 80080b4:	da0c      	bge.n	80080d0 <__swhatbuf_r+0x2c>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	2100      	movs	r1, #0
 80080ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080be:	bf14      	ite	ne
 80080c0:	2340      	movne	r3, #64	@ 0x40
 80080c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080c6:	2000      	movs	r0, #0
 80080c8:	6031      	str	r1, [r6, #0]
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	b016      	add	sp, #88	@ 0x58
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	466a      	mov	r2, sp
 80080d2:	f000 f849 	bl	8008168 <_fstat_r>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	dbed      	blt.n	80080b6 <__swhatbuf_r+0x12>
 80080da:	9901      	ldr	r1, [sp, #4]
 80080dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080e4:	4259      	negs	r1, r3
 80080e6:	4159      	adcs	r1, r3
 80080e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080ec:	e7eb      	b.n	80080c6 <__swhatbuf_r+0x22>

080080ee <__smakebuf_r>:
 80080ee:	898b      	ldrh	r3, [r1, #12]
 80080f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080f2:	079d      	lsls	r5, r3, #30
 80080f4:	4606      	mov	r6, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	d507      	bpl.n	800810a <__smakebuf_r+0x1c>
 80080fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	2301      	movs	r3, #1
 8008104:	6163      	str	r3, [r4, #20]
 8008106:	b003      	add	sp, #12
 8008108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810a:	466a      	mov	r2, sp
 800810c:	ab01      	add	r3, sp, #4
 800810e:	f7ff ffc9 	bl	80080a4 <__swhatbuf_r>
 8008112:	9f00      	ldr	r7, [sp, #0]
 8008114:	4605      	mov	r5, r0
 8008116:	4639      	mov	r1, r7
 8008118:	4630      	mov	r0, r6
 800811a:	f7fd fbd3 	bl	80058c4 <_malloc_r>
 800811e:	b948      	cbnz	r0, 8008134 <__smakebuf_r+0x46>
 8008120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008124:	059a      	lsls	r2, r3, #22
 8008126:	d4ee      	bmi.n	8008106 <__smakebuf_r+0x18>
 8008128:	f023 0303 	bic.w	r3, r3, #3
 800812c:	f043 0302 	orr.w	r3, r3, #2
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	e7e2      	b.n	80080fa <__smakebuf_r+0xc>
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800813a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813e:	81a3      	strh	r3, [r4, #12]
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	6020      	str	r0, [r4, #0]
 8008144:	b15b      	cbz	r3, 800815e <__smakebuf_r+0x70>
 8008146:	4630      	mov	r0, r6
 8008148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800814c:	f000 f81e 	bl	800818c <_isatty_r>
 8008150:	b128      	cbz	r0, 800815e <__smakebuf_r+0x70>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f023 0303 	bic.w	r3, r3, #3
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	431d      	orrs	r5, r3
 8008162:	81a5      	strh	r5, [r4, #12]
 8008164:	e7cf      	b.n	8008106 <__smakebuf_r+0x18>
	...

08008168 <_fstat_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	2300      	movs	r3, #0
 800816c:	4d06      	ldr	r5, [pc, #24]	@ (8008188 <_fstat_r+0x20>)
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	4611      	mov	r1, r2
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	f7f9 fd8d 	bl	8001c94 <_fstat>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d102      	bne.n	8008184 <_fstat_r+0x1c>
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	b103      	cbz	r3, 8008184 <_fstat_r+0x1c>
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	bd38      	pop	{r3, r4, r5, pc}
 8008186:	bf00      	nop
 8008188:	200014c4 	.word	0x200014c4

0800818c <_isatty_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	2300      	movs	r3, #0
 8008190:	4d05      	ldr	r5, [pc, #20]	@ (80081a8 <_isatty_r+0x1c>)
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 fd8b 	bl	8001cb2 <_isatty>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_isatty_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_isatty_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200014c4 	.word	0x200014c4

080081ac <_init>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr

080081b8 <_fini>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr
