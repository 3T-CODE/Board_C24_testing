
SD_Card_BoardC24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c89c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  0800c9b0  0800c9b0  0000d9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8a8  0800d8a8  0000f220  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8a8  0800d8a8  0000e8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8b0  0800d8b0  0000f220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8b0  0800d8b0  0000e8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8b4  0800d8b4  0000e8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800d8b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002534  20000220  0800dad8  0000f220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002754  0800dad8  0000f754  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d903  00000000  00000000  0000f249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d3  00000000  00000000  0001cb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0001f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a09  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001957a  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a27  00000000  00000000  00039fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b3d  00000000  00000000  0004a9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2527  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004984  00000000  00000000  000d256c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d6ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c994 	.word	0x0800c994

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	0800c994 	.word	0x0800c994

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000bde:	1df9      	adds	r1, r7, #7
 8000be0:	2364      	movs	r3, #100	@ 0x64
 8000be2:	2201      	movs	r2, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <spi_write+0x20>)
 8000be6:	f002 fbfb 	bl	80033e0 <HAL_SPI_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200022d4 	.word	0x200022d4

08000bf8 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <lcd_write_data+0x3c>)
 8000c0a:	f001 ff23 	bl	8002a54 <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2102      	movs	r1, #2
 8000c12:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <lcd_write_data+0x40>)
 8000c14:	f001 ff1e 	bl	8002a54 <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffda 	bl	8000bd4 <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c26:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <lcd_write_data+0x3c>)
 8000c28:	f001 ff14 	bl	8002a54 <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40011000 	.word	0x40011000
 8000c38:	40010800 	.word	0x40010800

08000c3c <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2102      	movs	r1, #2
 8000c4a:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <lcd_write_command+0x3c>)
 8000c4c:	f001 ff02 	bl	8002a54 <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c56:	4809      	ldr	r0, [pc, #36]	@ (8000c7c <lcd_write_command+0x40>)
 8000c58:	f001 fefc 	bl	8002a54 <HAL_GPIO_WritePin>
    spi_write(data);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffb8 	bl	8000bd4 <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <lcd_write_command+0x40>)
 8000c6c:	f001 fef2 	bl	8002a54 <HAL_GPIO_WritePin>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40011000 	.word	0x40011000

08000c80 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffd3 	bl	8000c3c <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffce 	bl	8000c3c <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	0a1b      	lsrs	r3, r3, #8
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffa6 	bl	8000bf8 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffa1 	bl	8000bf8 <lcd_write_data>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	701a      	strb	r2, [r3, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
	...

08000ce8 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	e9c7 0100 	strd	r0, r1, [r7]
    int multiplier = 4;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8000cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cfa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000cfe:	e01c      	b.n	8000d3a <delay_ms+0x52>
        while(counter--);
 8000d00:	bf00      	nop
 8000d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <delay_ms+0x68>)
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	f7ff fa2a 	bl	8000168 <__aeabi_dsub>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	4620      	mov	r0, r4
 8000d26:	4629      	mov	r1, r5
 8000d28:	f7ff fe3e 	bl	80009a8 <__aeabi_dcmpeq>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0e7      	beq.n	8000d02 <delay_ms+0x1a>
        counter = millis;
 8000d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d36:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	1e5a      	subs	r2, r3, #1
 8000d3e:	617a      	str	r2, [r7, #20]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1dd      	bne.n	8000d00 <delay_ms+0x18>
    }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	3ff00000 	.word	0x3ff00000

08000d54 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d5e:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <lcd_init+0x54>)
 8000d60:	f001 fe78 	bl	8002a54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8000d64:	2200      	movs	r2, #0
 8000d66:	2102      	movs	r1, #2
 8000d68:	4810      	ldr	r0, [pc, #64]	@ (8000dac <lcd_init+0x58>)
 8000d6a:	f001 fe73 	bl	8002a54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	480e      	ldr	r0, [pc, #56]	@ (8000dac <lcd_init+0x58>)
 8000d74:	f001 fe6e 	bl	8002a54 <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	480b      	ldr	r0, [pc, #44]	@ (8000dac <lcd_init+0x58>)
 8000d7e:	f001 fe69 	bl	8002a54 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	490a      	ldr	r1, [pc, #40]	@ (8000db0 <lcd_init+0x5c>)
 8000d88:	f7ff ffae 	bl	8000ce8 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4806      	ldr	r0, [pc, #24]	@ (8000dac <lcd_init+0x58>)
 8000d92:	f001 fe5f 	bl	8002a54 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	4905      	ldr	r1, [pc, #20]	@ (8000db0 <lcd_init+0x5c>)
 8000d9c:	f7ff ffa4 	bl	8000ce8 <delay_ms>
    
    lcd_init_command_list();
 8000da0:	f000 f808 	bl	8000db4 <lcd_init_command_list>
    
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40010800 	.word	0x40010800
 8000db0:	407f4000 	.word	0x407f4000

08000db4 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8000db8:	2100      	movs	r1, #0
 8000dba:	2010      	movs	r0, #16
 8000dbc:	f7ff ff60 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2011      	movs	r0, #17
 8000dc4:	f7ff ff5c 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2012      	movs	r0, #18
 8000dcc:	f7ff ff58 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2013      	movs	r0, #19
 8000dd4:	f7ff ff54 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2014      	movs	r0, #20
 8000ddc:	f7ff ff50 	bl	8000c80 <lcd_write_register>
    
    delay_ms(10);
 8000de0:	f04f 0000 	mov.w	r0, #0
 8000de4:	4960      	ldr	r1, [pc, #384]	@ (8000f68 <lcd_init_command_list+0x1b4>)
 8000de6:	f7ff ff7f 	bl	8000ce8 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 8000dea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000dee:	2011      	movs	r0, #17
 8000df0:	f7ff ff46 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 8000df4:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000df8:	2012      	movs	r0, #18
 8000dfa:	f7ff ff41 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8000dfe:	216f      	movs	r1, #111	@ 0x6f
 8000e00:	2013      	movs	r0, #19
 8000e02:	f7ff ff3d 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8000e06:	f644 115f 	movw	r1, #18783	@ 0x495f
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f7ff ff38 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 8000e10:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000e14:	2010      	movs	r0, #16
 8000e16:	f7ff ff33 	bl	8000c80 <lcd_write_register>
    
    delay_ms(10);
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	4952      	ldr	r1, [pc, #328]	@ (8000f68 <lcd_init_command_list+0x1b4>)
 8000e20:	f7ff ff62 	bl	8000ce8 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 8000e24:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e28:	2011      	movs	r0, #17
 8000e2a:	f7ff ff29 	bl	8000c80 <lcd_write_register>

    delay_ms(50);
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	494e      	ldr	r1, [pc, #312]	@ (8000f6c <lcd_init_command_list+0x1b8>)
 8000e34:	f7ff ff58 	bl	8000ce8 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8000e38:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ff1f 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8000e42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff ff1a 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 8000e4c:	f241 0130 	movw	r1, #4144	@ 0x1030
 8000e50:	2003      	movs	r0, #3
 8000e52:	f7ff ff15 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8000e56:	2100      	movs	r1, #0
 8000e58:	2007      	movs	r0, #7
 8000e5a:	f7ff ff11 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 8000e5e:	f240 2102 	movw	r1, #514	@ 0x202
 8000e62:	2008      	movs	r0, #8
 8000e64:	f7ff ff0c 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8000e68:	2100      	movs	r1, #0
 8000e6a:	200b      	movs	r0, #11
 8000e6c:	f7ff ff08 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8000e70:	2100      	movs	r1, #0
 8000e72:	200c      	movs	r0, #12
 8000e74:	f7ff ff04 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8000e78:	f640 7101 	movw	r1, #3841	@ 0xf01
 8000e7c:	200f      	movs	r0, #15
 8000e7e:	f7ff feff 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8000e82:	2100      	movs	r1, #0
 8000e84:	2015      	movs	r0, #21
 8000e86:	f7ff fefb 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2020      	movs	r0, #32
 8000e8e:	f7ff fef7 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8000e92:	2100      	movs	r1, #0
 8000e94:	2021      	movs	r0, #33	@ 0x21
 8000e96:	f7ff fef3 	bl	8000c80 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2030      	movs	r0, #48	@ 0x30
 8000e9e:	f7ff feef 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8000ea2:	21db      	movs	r1, #219	@ 0xdb
 8000ea4:	2031      	movs	r0, #49	@ 0x31
 8000ea6:	f7ff feeb 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2032      	movs	r0, #50	@ 0x32
 8000eae:	f7ff fee7 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2033      	movs	r0, #51	@ 0x33
 8000eb6:	f7ff fee3 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 8000eba:	21db      	movs	r1, #219	@ 0xdb
 8000ebc:	2034      	movs	r0, #52	@ 0x34
 8000ebe:	f7ff fedf 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2035      	movs	r0, #53	@ 0x35
 8000ec6:	f7ff fedb 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 8000eca:	21af      	movs	r1, #175	@ 0xaf
 8000ecc:	2036      	movs	r0, #54	@ 0x36
 8000ece:	f7ff fed7 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2037      	movs	r0, #55	@ 0x37
 8000ed6:	f7ff fed3 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 8000eda:	21db      	movs	r1, #219	@ 0xdb
 8000edc:	2038      	movs	r0, #56	@ 0x38
 8000ede:	f7ff fecf 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2039      	movs	r0, #57	@ 0x39
 8000ee6:	f7ff fecb 	bl	8000c80 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 8000eea:	2100      	movs	r1, #0
 8000eec:	2050      	movs	r0, #80	@ 0x50
 8000eee:	f7ff fec7 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 8000ef2:	f640 0108 	movw	r1, #2056	@ 0x808
 8000ef6:	2051      	movs	r0, #81	@ 0x51
 8000ef8:	f7ff fec2 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 8000efc:	f640 010a 	movw	r1, #2058	@ 0x80a
 8000f00:	2052      	movs	r0, #82	@ 0x52
 8000f02:	f7ff febd 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8000f06:	210a      	movs	r1, #10
 8000f08:	2053      	movs	r0, #83	@ 0x53
 8000f0a:	f7ff feb9 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 8000f0e:	f640 2108 	movw	r1, #2568	@ 0xa08
 8000f12:	2054      	movs	r0, #84	@ 0x54
 8000f14:	f7ff feb4 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 8000f18:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f1c:	2055      	movs	r0, #85	@ 0x55
 8000f1e:	f7ff feaf 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8000f22:	2100      	movs	r1, #0
 8000f24:	2056      	movs	r0, #86	@ 0x56
 8000f26:	f7ff feab 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 8000f2a:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8000f2e:	2057      	movs	r0, #87	@ 0x57
 8000f30:	f7ff fea6 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8000f34:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000f38:	2058      	movs	r0, #88	@ 0x58
 8000f3a:	f7ff fea1 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8000f3e:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000f42:	2059      	movs	r0, #89	@ 0x59
 8000f44:	f7ff fe9c 	bl	8000c80 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8000f48:	2112      	movs	r1, #18
 8000f4a:	2007      	movs	r0, #7
 8000f4c:	f7ff fe98 	bl	8000c80 <lcd_write_register>

    delay_ms(50); 
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4905      	ldr	r1, [pc, #20]	@ (8000f6c <lcd_init_command_list+0x1b8>)
 8000f56:	f7ff fec7 	bl	8000ce8 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 8000f5a:	f241 0117 	movw	r1, #4119	@ 0x1017
 8000f5e:	2007      	movs	r0, #7
 8000f60:	f7ff fe8e 	bl	8000c80 <lcd_write_register>

    
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40240000 	.word	0x40240000
 8000f6c:	40490000 	.word	0x40490000

08000f70 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with 
 * Colour.
 * 
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	603a      	str	r2, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 8000f80:	1dba      	adds	r2, r7, #6
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fe99 	bl	8000cbe <swap_char>
        y = WIDTH - y;
 8000f8c:	79ba      	ldrb	r2, [r7, #6]
 8000f8e:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8000f92:	1a9b      	subs	r3, r3, r2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8000f98:	79f8      	ldrb	r0, [r7, #7]
 8000f9a:	79b9      	ldrb	r1, [r7, #6]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f000 f87c 	bl	80010a4 <set_draw_window>
    lcd_write_data(colour >> 8);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fe20 	bl	8000bf8 <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe1b 	bl	8000bf8 <lcd_write_data>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4623      	mov	r3, r4
 8000fdc:	71fb      	strb	r3, [r7, #7]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71bb      	strb	r3, [r7, #6]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	717b      	strb	r3, [r7, #5]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 8000fea:	1dba      	adds	r2, r7, #6
 8000fec:	1dfb      	adds	r3, r7, #7
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe64 	bl	8000cbe <swap_char>
        swap_char(&x2, &y2);
 8000ff6:	1d3a      	adds	r2, r7, #4
 8000ff8:	1d7b      	adds	r3, r7, #5
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fe5e 	bl	8000cbe <swap_char>
        y1 = WIDTH - y1;
 8001002:	79ba      	ldrb	r2, [r7, #6]
 8001004:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	b2db      	uxtb	r3, r3
 800100c:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 800100e:	793a      	ldrb	r2, [r7, #4]
 8001010:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 800101a:	1dba      	adds	r2, r7, #6
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fe4c 	bl	8000cbe <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 8001026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 800102c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800102e:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8001030:	79f8      	ldrb	r0, [r7, #7]
 8001032:	79b9      	ldrb	r1, [r7, #6]
 8001034:	797a      	ldrb	r2, [r7, #5]
 8001036:	793b      	ldrb	r3, [r7, #4]
 8001038:	f000 f834 	bl	80010a4 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001042:	4817      	ldr	r0, [pc, #92]	@ (80010a0 <fill_rectangle+0xd4>)
 8001044:	f001 fd06 	bl	8002a54 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e017      	b.n	800107e <fill_rectangle+0xb2>
        for(int x = 0; x < x2-x1+1; x++) {
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	e00a      	b.n	800106a <fill_rectangle+0x9e>
            lcd_write_data(colour_high);
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fdce 	bl	8000bf8 <lcd_write_data>
            lcd_write_data(colour_low);
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fdca 	bl	8000bf8 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	3301      	adds	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	461a      	mov	r2, r3
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	dded      	ble.n	8001054 <fill_rectangle+0x88>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	793b      	ldrb	r3, [r7, #4]
 8001080:	461a      	mov	r2, r3
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	dde0      	ble.n	800104e <fill_rectangle+0x82>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001092:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <fill_rectangle+0xd4>)
 8001094:	f001 fcde 	bl	8002a54 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	40011000 	.word	0x40011000

080010a4 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4604      	mov	r4, r0
 80010ac:	4608      	mov	r0, r1
 80010ae:	4611      	mov	r1, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	4623      	mov	r3, r4
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	4603      	mov	r3, r0
 80010b8:	71bb      	strb	r3, [r7, #6]
 80010ba:	460b      	mov	r3, r1
 80010bc:	717b      	strb	r3, [r7, #5]
 80010be:	4613      	mov	r3, r2
 80010c0:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 80010c2:	797a      	ldrb	r2, [r7, #5]
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d205      	bcs.n	80010d6 <set_draw_window+0x32>
        swap_char(&x2, &x1);
 80010ca:	1dfa      	adds	r2, r7, #7
 80010cc:	1d7b      	adds	r3, r7, #5
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fdf4 	bl	8000cbe <swap_char>
    if(y2 < y1)
 80010d6:	793a      	ldrb	r2, [r7, #4]
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d205      	bcs.n	80010ea <set_draw_window+0x46>
        swap_char(&y2, &y1);
 80010de:	1dba      	adds	r2, r7, #6
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fdea 	bl	8000cbe <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	4619      	mov	r1, r3
 80010ee:	2036      	movs	r0, #54	@ 0x36
 80010f0:	f7ff fdc6 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4619      	mov	r1, r3
 80010f8:	2037      	movs	r0, #55	@ 0x37
 80010fa:	f7ff fdc1 	bl	8000c80 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 80010fe:	793b      	ldrb	r3, [r7, #4]
 8001100:	4619      	mov	r1, r3
 8001102:	2038      	movs	r0, #56	@ 0x38
 8001104:	f7ff fdbc 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	4619      	mov	r1, r3
 800110c:	2039      	movs	r0, #57	@ 0x39
 800110e:	f7ff fdb7 	bl	8000c80 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4619      	mov	r1, r3
 8001116:	2020      	movs	r0, #32
 8001118:	f7ff fdb2 	bl	8000c80 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	4619      	mov	r1, r3
 8001120:	2021      	movs	r0, #33	@ 0x21
 8001122:	f7ff fdad 	bl	8000c80 <lcd_write_register>

    lcd_write_command(0x00);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fd88 	bl	8000c3c <lcd_write_command>
    lcd_write_command(0x22);
 800112c:	2022      	movs	r0, #34	@ 0x22
 800112e:	f7ff fd85 	bl	8000c3c <lcd_write_command>
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
	...

0800113c <draw_char>:
 * 
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af02      	add	r7, sp, #8
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	460b      	mov	r3, r1
 800114a:	71bb      	strb	r3, [r7, #6]
 800114c:	4613      	mov	r3, r2
 800114e:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	3b20      	subs	r3, #32
 8001154:	60fb      	str	r3, [r7, #12]
    
    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	e070      	b.n	800123e <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f1c3 010c 	rsb	r1, r3, #12
 8001162:	483b      	ldr	r0, [pc, #236]	@ (8001250 <draw_char+0x114>)
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	4403      	add	r3, r0
 8001172:	440b      	add	r3, r1
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	e059      	b.n	8001232 <draw_char+0xf6>
            if(line & (0x01 << j)) {
 800117e:	7afa      	ldrb	r2, [r7, #11]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	fa42 f303 	asr.w	r3, r2, r3
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d04e      	beq.n	800122c <draw_char+0xf0>
                if(size == 1) {
 800118e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001192:	2b01      	cmp	r3, #1
 8001194:	d110      	bne.n	80011b8 <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3308      	adds	r3, #8
 80011a2:	b2d8      	uxtb	r0, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	4413      	add	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fedd 	bl	8000f70 <draw_pixel>
 80011b6:	e039      	b.n	800122c <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	f1c3 0308 	rsb	r3, r3, #8
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4413      	add	r3, r2
 80011ce:	b2d8      	uxtb	r0, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	4413      	add	r3, r2
 80011e2:	b2d9      	uxtb	r1, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f1c3 0308 	rsb	r3, r3, #8
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4413      	add	r3, r2
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001200:	4413      	add	r3, r2
 8001202:	b2dc      	uxtb	r4, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	b2da      	uxtb	r2, r3
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	4413      	add	r3, r2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800121c:	4413      	add	r3, r2
 800121e:	b2da      	uxtb	r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	4622      	mov	r2, r4
 8001228:	f7ff fed0 	bl	8000fcc <fill_rectangle>
        for(j=0; j<8; j++) {
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	3301      	adds	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b07      	cmp	r3, #7
 8001236:	dda2      	ble.n	800117e <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	dd8b      	ble.n	800115c <draw_char+0x20>
                }
            }
        }
    }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	0800ca28 	.word	0x0800ca28

08001254 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af02      	add	r7, sp, #8
 800125a:	603a      	str	r2, [r7, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	460b      	mov	r3, r1
 8001264:	71bb      	strb	r3, [r7, #6]
 8001266:	4613      	mov	r3, r2
 8001268:	717b      	strb	r3, [r7, #5]
    
    //Work out the size of each character
    int char_width = size * 9;
 800126a:	797a      	ldrb	r2, [r7, #5]
 800126c:	4613      	mov	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4413      	add	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8001278:	e015      	b.n	80012a6 <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	6939      	ldr	r1, [r7, #16]
 8001280:	fb01 f303 	mul.w	r3, r1, r3
 8001284:	4413      	add	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	b2d8      	uxtb	r0, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	6a3a      	ldr	r2, [r7, #32]
 8001290:	4413      	add	r3, r2
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	79b9      	ldrb	r1, [r7, #6]
 8001296:	797b      	ldrb	r3, [r7, #5]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f7ff ff4e 	bl	800113c <draw_char>
        //Next character
        counter++;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	6a3a      	ldr	r2, [r7, #32]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1e3      	bne.n	800127a <draw_string+0x26>
    }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012c6:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <SELECT+0x1c>)
 80012c8:	f001 fbc4 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 f935 	bl	800253c <HAL_Delay>
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40010800 	.word	0x40010800

080012dc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e6:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <DESELECT+0x1c>)
 80012e8:	f001 fbb4 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f001 f925 	bl	800253c <HAL_Delay>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40010800 	.word	0x40010800

080012fc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001306:	bf00      	nop
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <SPI_TxByte+0x30>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b02      	cmp	r3, #2
 8001314:	d1f8      	bne.n	8001308 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001316:	1df9      	adds	r1, r7, #7
 8001318:	2364      	movs	r3, #100	@ 0x64
 800131a:	2201      	movs	r2, #1
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <SPI_TxByte+0x30>)
 800131e:	f002 f85f 	bl	80033e0 <HAL_SPI_Transmit>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000232c 	.word	0x2000232c

08001330 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800133c:	bf00      	nop
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <SPI_TxBuffer+0x30>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b02      	cmp	r3, #2
 800134a:	d1f8      	bne.n	800133e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800134c:	887a      	ldrh	r2, [r7, #2]
 800134e:	2364      	movs	r3, #100	@ 0x64
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4803      	ldr	r0, [pc, #12]	@ (8001360 <SPI_TxBuffer+0x30>)
 8001354:	f002 f844 	bl	80033e0 <HAL_SPI_Transmit>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000232c 	.word	0x2000232c

08001364 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800136a:	23ff      	movs	r3, #255	@ 0xff
 800136c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800136e:	bf00      	nop
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <SPI_RxByte+0x34>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b02      	cmp	r3, #2
 800137c:	d1f8      	bne.n	8001370 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800137e:	1dba      	adds	r2, r7, #6
 8001380:	1df9      	adds	r1, r7, #7
 8001382:	2364      	movs	r3, #100	@ 0x64
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <SPI_RxByte+0x34>)
 800138a:	f002 f96d 	bl	8003668 <HAL_SPI_TransmitReceive>

	return data;
 800138e:	79bb      	ldrb	r3, [r7, #6]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000232c 	.word	0x2000232c

0800139c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80013a4:	f7ff ffde 	bl	8001364 <SPI_RxByte>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	701a      	strb	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <SD_ReadyWait+0x30>)
 80013c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013c4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80013c6:	f7ff ffcd 	bl	8001364 <SPI_RxByte>
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2bff      	cmp	r3, #255	@ 0xff
 80013d2:	d003      	beq.n	80013dc <SD_ReadyWait+0x24>
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <SD_ReadyWait+0x30>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f4      	bne.n	80013c6 <SD_ReadyWait+0xe>

	return res;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000023e 	.word	0x2000023e

080013ec <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80013f2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80013f6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80013f8:	f7ff ff70 	bl	80012dc <DESELECT>
	for(int i = 0; i < 10; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	e005      	b.n	800140e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001402:	20ff      	movs	r0, #255	@ 0xff
 8001404:	f7ff ff7a 	bl	80012fc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	3301      	adds	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b09      	cmp	r3, #9
 8001412:	ddf6      	ble.n	8001402 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001414:	f7ff ff52 	bl	80012bc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001418:	2340      	movs	r3, #64	@ 0x40
 800141a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800142c:	2395      	movs	r3, #149	@ 0x95
 800142e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001430:	463b      	mov	r3, r7
 8001432:	2106      	movs	r1, #6
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff7b 	bl	8001330 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800143a:	e002      	b.n	8001442 <SD_PowerOn+0x56>
	{
		cnt--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3b01      	subs	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001442:	f7ff ff8f 	bl	8001364 <SPI_RxByte>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d002      	beq.n	8001452 <SD_PowerOn+0x66>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f4      	bne.n	800143c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001452:	f7ff ff43 	bl	80012dc <DESELECT>
	SPI_TxByte(0XFF);
 8001456:	20ff      	movs	r0, #255	@ 0xff
 8001458:	f7ff ff50 	bl	80012fc <SPI_TxByte>

	PowerFlag = 1;
 800145c:	4b03      	ldr	r3, [pc, #12]	@ (800146c <SD_PowerOn+0x80>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000241 	.word	0x20000241

08001470 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <SD_PowerOff+0x14>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000241 	.word	0x20000241

08001488 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800148c:	4b02      	ldr	r3, [pc, #8]	@ (8001498 <SD_CheckPower+0x10>)
 800148e:	781b      	ldrb	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000241 	.word	0x20000241

0800149c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <SD_RxDataBlock+0x58>)
 80014a8:	22c8      	movs	r2, #200	@ 0xc8
 80014aa:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80014ac:	f7ff ff5a 	bl	8001364 <SPI_RxByte>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2bff      	cmp	r3, #255	@ 0xff
 80014b8:	d103      	bne.n	80014c2 <SD_RxDataBlock+0x26>
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <SD_RxDataBlock+0x58>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f4      	bne.n	80014ac <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	2bfe      	cmp	r3, #254	@ 0xfe
 80014c6:	d001      	beq.n	80014cc <SD_RxDataBlock+0x30>
 80014c8:	2300      	movs	r3, #0
 80014ca:	e00f      	b.n	80014ec <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff62 	bl	800139c <SPI_RxBytePtr>
	} while(len--);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	603a      	str	r2, [r7, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f4      	bne.n	80014cc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80014e2:	f7ff ff3f 	bl	8001364 <SPI_RxByte>
	SPI_RxByte();
 80014e6:	f7ff ff3d 	bl	8001364 <SPI_RxByte>

	return TRUE;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000023c 	.word	0x2000023c

080014f8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001508:	f7ff ff56 	bl	80013b8 <SD_ReadyWait>
 800150c:	4603      	mov	r3, r0
 800150e:	2bff      	cmp	r3, #255	@ 0xff
 8001510:	d001      	beq.n	8001516 <SD_TxDataBlock+0x1e>
 8001512:	2300      	movs	r3, #0
 8001514:	e02f      	b.n	8001576 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff feef 	bl	80012fc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2bfd      	cmp	r3, #253	@ 0xfd
 8001522:	d020      	beq.n	8001566 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001524:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff01 	bl	8001330 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800152e:	f7ff ff19 	bl	8001364 <SPI_RxByte>
		SPI_RxByte();
 8001532:	f7ff ff17 	bl	8001364 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001536:	e00b      	b.n	8001550 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001538:	f7ff ff14 	bl	8001364 <SPI_RxByte>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	2b05      	cmp	r3, #5
 8001548:	d006      	beq.n	8001558 <SD_TxDataBlock+0x60>
			i++;
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	3301      	adds	r3, #1
 800154e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001550:	7bbb      	ldrb	r3, [r7, #14]
 8001552:	2b40      	cmp	r3, #64	@ 0x40
 8001554:	d9f0      	bls.n	8001538 <SD_TxDataBlock+0x40>
 8001556:	e000      	b.n	800155a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001558:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800155a:	bf00      	nop
 800155c:	f7ff ff02 	bl	8001364 <SPI_RxByte>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0fa      	beq.n	800155c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	2b05      	cmp	r3, #5
 800156e:	d101      	bne.n	8001574 <SD_TxDataBlock+0x7c>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	6039      	str	r1, [r7, #0]
 8001588:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800158a:	f7ff ff15 	bl	80013b8 <SD_ReadyWait>
 800158e:	4603      	mov	r3, r0
 8001590:	2bff      	cmp	r3, #255	@ 0xff
 8001592:	d001      	beq.n	8001598 <SD_SendCmd+0x1a>
 8001594:	23ff      	movs	r3, #255	@ 0xff
 8001596:	e042      	b.n	800161e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff feae 	bl	80012fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	0e1b      	lsrs	r3, r3, #24
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fea8 	bl	80012fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	0c1b      	lsrs	r3, r3, #16
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fea2 	bl	80012fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe9c 	bl	80012fc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe97 	bl	80012fc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b40      	cmp	r3, #64	@ 0x40
 80015d2:	d102      	bne.n	80015da <SD_SendCmd+0x5c>
 80015d4:	2395      	movs	r3, #149	@ 0x95
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e007      	b.n	80015ea <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b48      	cmp	r3, #72	@ 0x48
 80015de:	d102      	bne.n	80015e6 <SD_SendCmd+0x68>
 80015e0:	2387      	movs	r3, #135	@ 0x87
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <SD_SendCmd+0x6c>
	else crc = 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fe85 	bl	80012fc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b4c      	cmp	r3, #76	@ 0x4c
 80015f6:	d101      	bne.n	80015fc <SD_SendCmd+0x7e>
 80015f8:	f7ff feb4 	bl	8001364 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80015fc:	230a      	movs	r3, #10
 80015fe:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001600:	f7ff feb0 	bl	8001364 <SPI_RxByte>
 8001604:	4603      	mov	r3, r0
 8001606:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001608:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800160c:	2b00      	cmp	r3, #0
 800160e:	da05      	bge.n	800161c <SD_SendCmd+0x9e>
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	3b01      	subs	r3, #1
 8001614:	73bb      	strb	r3, [r7, #14]
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f1      	bne.n	8001600 <SD_SendCmd+0x82>

	return res;
 800161c:	7b7b      	ldrb	r3, [r7, #13]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SD_disk_initialize+0x14>
 8001638:	2301      	movs	r3, #1
 800163a:	e0d1      	b.n	80017e0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800163c:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <SD_disk_initialize+0x1c0>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <SD_disk_initialize+0x2a>
 800164a:	4b67      	ldr	r3, [pc, #412]	@ (80017e8 <SD_disk_initialize+0x1c0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	e0c6      	b.n	80017e0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001652:	f7ff fecb 	bl	80013ec <SD_PowerOn>

	/* slave select */
	SELECT();
 8001656:	f7ff fe31 	bl	80012bc <SELECT>

	/* check disk type */
	type = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800165e:	2100      	movs	r1, #0
 8001660:	2040      	movs	r0, #64	@ 0x40
 8001662:	f7ff ff8c 	bl	800157e <SD_SendCmd>
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	f040 80a1 	bne.w	80017b0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800166e:	4b5f      	ldr	r3, [pc, #380]	@ (80017ec <SD_disk_initialize+0x1c4>)
 8001670:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001674:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001676:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800167a:	2048      	movs	r0, #72	@ 0x48
 800167c:	f7ff ff7f 	bl	800157e <SD_SendCmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d155      	bne.n	8001732 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	e00c      	b.n	80016a6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800168c:	7bfc      	ldrb	r4, [r7, #15]
 800168e:	f7ff fe69 	bl	8001364 <SPI_RxByte>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	f104 0310 	add.w	r3, r4, #16
 800169a:	443b      	add	r3, r7
 800169c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	3301      	adds	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d9ef      	bls.n	800168c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80016ac:	7abb      	ldrb	r3, [r7, #10]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d17e      	bne.n	80017b0 <SD_disk_initialize+0x188>
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	2baa      	cmp	r3, #170	@ 0xaa
 80016b6:	d17b      	bne.n	80017b0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80016b8:	2100      	movs	r1, #0
 80016ba:	2077      	movs	r0, #119	@ 0x77
 80016bc:	f7ff ff5f 	bl	800157e <SD_SendCmd>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d807      	bhi.n	80016d6 <SD_disk_initialize+0xae>
 80016c6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016ca:	2069      	movs	r0, #105	@ 0x69
 80016cc:	f7ff ff57 	bl	800157e <SD_SendCmd>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80016d6:	4b45      	ldr	r3, [pc, #276]	@ (80017ec <SD_disk_initialize+0x1c4>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ec      	bne.n	80016b8 <SD_disk_initialize+0x90>
 80016de:	e000      	b.n	80016e2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80016e0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80016e2:	4b42      	ldr	r3, [pc, #264]	@ (80017ec <SD_disk_initialize+0x1c4>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d062      	beq.n	80017b0 <SD_disk_initialize+0x188>
 80016ea:	2100      	movs	r1, #0
 80016ec:	207a      	movs	r0, #122	@ 0x7a
 80016ee:	f7ff ff46 	bl	800157e <SD_SendCmd>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d15b      	bne.n	80017b0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e00c      	b.n	8001718 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80016fe:	7bfc      	ldrb	r4, [r7, #15]
 8001700:	f7ff fe30 	bl	8001364 <SPI_RxByte>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	f104 0310 	add.w	r3, r4, #16
 800170c:	443b      	add	r3, r7
 800170e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	3301      	adds	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d9ef      	bls.n	80016fe <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800171e:	7a3b      	ldrb	r3, [r7, #8]
 8001720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SD_disk_initialize+0x104>
 8001728:	230c      	movs	r3, #12
 800172a:	e000      	b.n	800172e <SD_disk_initialize+0x106>
 800172c:	2304      	movs	r3, #4
 800172e:	73bb      	strb	r3, [r7, #14]
 8001730:	e03e      	b.n	80017b0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001732:	2100      	movs	r1, #0
 8001734:	2077      	movs	r0, #119	@ 0x77
 8001736:	f7ff ff22 	bl	800157e <SD_SendCmd>
 800173a:	4603      	mov	r3, r0
 800173c:	2b01      	cmp	r3, #1
 800173e:	d808      	bhi.n	8001752 <SD_disk_initialize+0x12a>
 8001740:	2100      	movs	r1, #0
 8001742:	2069      	movs	r0, #105	@ 0x69
 8001744:	f7ff ff1b 	bl	800157e <SD_SendCmd>
 8001748:	4603      	mov	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d801      	bhi.n	8001752 <SD_disk_initialize+0x12a>
 800174e:	2302      	movs	r3, #2
 8001750:	e000      	b.n	8001754 <SD_disk_initialize+0x12c>
 8001752:	2301      	movs	r3, #1
 8001754:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d10e      	bne.n	800177a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800175c:	2100      	movs	r1, #0
 800175e:	2077      	movs	r0, #119	@ 0x77
 8001760:	f7ff ff0d 	bl	800157e <SD_SendCmd>
 8001764:	4603      	mov	r3, r0
 8001766:	2b01      	cmp	r3, #1
 8001768:	d80e      	bhi.n	8001788 <SD_disk_initialize+0x160>
 800176a:	2100      	movs	r1, #0
 800176c:	2069      	movs	r0, #105	@ 0x69
 800176e:	f7ff ff06 	bl	800157e <SD_SendCmd>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <SD_disk_initialize+0x160>
 8001778:	e00c      	b.n	8001794 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800177a:	2100      	movs	r1, #0
 800177c:	2041      	movs	r0, #65	@ 0x41
 800177e:	f7ff fefe 	bl	800157e <SD_SendCmd>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <SD_disk_initialize+0x1c4>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e2      	bne.n	8001756 <SD_disk_initialize+0x12e>
 8001790:	e000      	b.n	8001794 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001792:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <SD_disk_initialize+0x1c4>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <SD_disk_initialize+0x184>
 800179c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a0:	2050      	movs	r0, #80	@ 0x50
 80017a2:	f7ff feec 	bl	800157e <SD_SendCmd>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SD_disk_initialize+0x188>
 80017ac:	2300      	movs	r3, #0
 80017ae:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80017b0:	4a0f      	ldr	r2, [pc, #60]	@ (80017f0 <SD_disk_initialize+0x1c8>)
 80017b2:	7bbb      	ldrb	r3, [r7, #14]
 80017b4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80017b6:	f7ff fd91 	bl	80012dc <DESELECT>
	SPI_RxByte();
 80017ba:	f7ff fdd3 	bl	8001364 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80017be:	7bbb      	ldrb	r3, [r7, #14]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <SD_disk_initialize+0x1c0>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <SD_disk_initialize+0x1c0>)
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e001      	b.n	80017da <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80017d6:	f7ff fe4b 	bl	8001470 <SD_PowerOff>
	}

	return Stat;
 80017da:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <SD_disk_initialize+0x1c0>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	20000000 	.word	0x20000000
 80017ec:	2000023c 	.word	0x2000023c
 80017f0:	20000240 	.word	0x20000240

080017f4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SD_disk_status+0x14>
 8001804:	2301      	movs	r3, #1
 8001806:	e002      	b.n	800180e <SD_disk_status+0x1a>
	return Stat;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <SD_disk_status+0x24>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000000 	.word	0x20000000

0800181c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <SD_disk_read+0x1c>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <SD_disk_read+0x20>
 8001838:	2304      	movs	r3, #4
 800183a:	e051      	b.n	80018e0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <SD_disk_read+0xcc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SD_disk_read+0x32>
 800184a:	2303      	movs	r3, #3
 800184c:	e048      	b.n	80018e0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800184e:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <SD_disk_read+0xd0>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <SD_disk_read+0x44>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001860:	f7ff fd2c 	bl	80012bc <SELECT>

	if (count == 1)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d111      	bne.n	800188e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	2051      	movs	r0, #81	@ 0x51
 800186e:	f7ff fe86 	bl	800157e <SD_SendCmd>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d129      	bne.n	80018cc <SD_disk_read+0xb0>
 8001878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f7ff fe0d 	bl	800149c <SD_RxDataBlock>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d021      	beq.n	80018cc <SD_disk_read+0xb0>
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	e01e      	b.n	80018cc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	2052      	movs	r0, #82	@ 0x52
 8001892:	f7ff fe74 	bl	800157e <SD_SendCmd>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d117      	bne.n	80018cc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800189c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f7ff fdfb 	bl	800149c <SD_RxDataBlock>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00a      	beq.n	80018c2 <SD_disk_read+0xa6>
				buff += 512;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80018b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ed      	bne.n	800189c <SD_disk_read+0x80>
 80018c0:	e000      	b.n	80018c4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80018c2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80018c4:	2100      	movs	r1, #0
 80018c6:	204c      	movs	r0, #76	@ 0x4c
 80018c8:	f7ff fe59 	bl	800157e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80018cc:	f7ff fd06 	bl	80012dc <DESELECT>
	SPI_RxByte();
 80018d0:	f7ff fd48 	bl	8001364 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bf14      	ite	ne
 80018da:	2301      	movne	r3, #1
 80018dc:	2300      	moveq	r3, #0
 80018de:	b2db      	uxtb	r3, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000240 	.word	0x20000240

080018f0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <SD_disk_write+0x1c>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <SD_disk_write+0x20>
 800190c:	2304      	movs	r3, #4
 800190e:	e06b      	b.n	80019e8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001910:	4b37      	ldr	r3, [pc, #220]	@ (80019f0 <SD_disk_write+0x100>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SD_disk_write+0x32>
 800191e:	2303      	movs	r3, #3
 8001920:	e062      	b.n	80019e8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001922:	4b33      	ldr	r3, [pc, #204]	@ (80019f0 <SD_disk_write+0x100>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SD_disk_write+0x44>
 8001930:	2302      	movs	r3, #2
 8001932:	e059      	b.n	80019e8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001934:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <SD_disk_write+0x104>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <SD_disk_write+0x56>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	025b      	lsls	r3, r3, #9
 8001944:	607b      	str	r3, [r7, #4]

	SELECT();
 8001946:	f7ff fcb9 	bl	80012bc <SELECT>

	if (count == 1)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d110      	bne.n	8001972 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	2058      	movs	r0, #88	@ 0x58
 8001954:	f7ff fe13 	bl	800157e <SD_SendCmd>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d13a      	bne.n	80019d4 <SD_disk_write+0xe4>
 800195e:	21fe      	movs	r1, #254	@ 0xfe
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f7ff fdc9 	bl	80014f8 <SD_TxDataBlock>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d033      	beq.n	80019d4 <SD_disk_write+0xe4>
			count = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	e030      	b.n	80019d4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <SD_disk_write+0x104>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800197e:	2100      	movs	r1, #0
 8001980:	2077      	movs	r0, #119	@ 0x77
 8001982:	f7ff fdfc 	bl	800157e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	2057      	movs	r0, #87	@ 0x57
 800198a:	f7ff fdf8 	bl	800157e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	2059      	movs	r0, #89	@ 0x59
 8001992:	f7ff fdf4 	bl	800157e <SD_SendCmd>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d11b      	bne.n	80019d4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800199c:	21fc      	movs	r1, #252	@ 0xfc
 800199e:	68b8      	ldr	r0, [r7, #8]
 80019a0:	f7ff fdaa 	bl	80014f8 <SD_TxDataBlock>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00a      	beq.n	80019c0 <SD_disk_write+0xd0>
				buff += 512;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80019b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ee      	bne.n	800199c <SD_disk_write+0xac>
 80019be:	e000      	b.n	80019c2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80019c0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80019c2:	21fd      	movs	r1, #253	@ 0xfd
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fd97 	bl	80014f8 <SD_TxDataBlock>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <SD_disk_write+0xe4>
			{
				count = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80019d4:	f7ff fc82 	bl	80012dc <DESELECT>
	SPI_RxByte();
 80019d8:	f7ff fcc4 	bl	8001364 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf14      	ite	ne
 80019e2:	2301      	movne	r3, #1
 80019e4:	2300      	moveq	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000240 	.word	0x20000240

080019f8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b08b      	sub	sp, #44	@ 0x2c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	603a      	str	r2, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	460b      	mov	r3, r1
 8001a06:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SD_disk_ioctl+0x1e>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e113      	b.n	8001c3e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d124      	bne.n	8001a6c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d012      	beq.n	8001a50 <SD_disk_ioctl+0x58>
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	dc1a      	bgt.n	8001a64 <SD_disk_ioctl+0x6c>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <SD_disk_ioctl+0x40>
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d006      	beq.n	8001a44 <SD_disk_ioctl+0x4c>
 8001a36:	e015      	b.n	8001a64 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001a38:	f7ff fd1a 	bl	8001470 <SD_PowerOff>
			res = RES_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a42:	e0fa      	b.n	8001c3a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001a44:	f7ff fcd2 	bl	80013ec <SD_PowerOn>
			res = RES_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a4e:	e0f4      	b.n	8001c3a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	1c5c      	adds	r4, r3, #1
 8001a54:	f7ff fd18 	bl	8001488 <SD_CheckPower>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a62:	e0ea      	b.n	8001c3a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001a64:	2304      	movs	r3, #4
 8001a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a6a:	e0e6      	b.n	8001c3a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a6c:	4b76      	ldr	r3, [pc, #472]	@ (8001c48 <SD_disk_ioctl+0x250>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SD_disk_ioctl+0x86>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0df      	b.n	8001c3e <SD_disk_ioctl+0x246>

		SELECT();
 8001a7e:	f7ff fc1d 	bl	80012bc <SELECT>

		switch (ctrl)
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	2b0d      	cmp	r3, #13
 8001a86:	f200 80c9 	bhi.w	8001c1c <SD_disk_ioctl+0x224>
 8001a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <SD_disk_ioctl+0x98>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001b87 	.word	0x08001b87
 8001a94:	08001ac9 	.word	0x08001ac9
 8001a98:	08001b77 	.word	0x08001b77
 8001a9c:	08001c1d 	.word	0x08001c1d
 8001aa0:	08001c1d 	.word	0x08001c1d
 8001aa4:	08001c1d 	.word	0x08001c1d
 8001aa8:	08001c1d 	.word	0x08001c1d
 8001aac:	08001c1d 	.word	0x08001c1d
 8001ab0:	08001c1d 	.word	0x08001c1d
 8001ab4:	08001c1d 	.word	0x08001c1d
 8001ab8:	08001c1d 	.word	0x08001c1d
 8001abc:	08001b99 	.word	0x08001b99
 8001ac0:	08001bbd 	.word	0x08001bbd
 8001ac4:	08001be1 	.word	0x08001be1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2049      	movs	r0, #73	@ 0x49
 8001acc:	f7ff fd57 	bl	800157e <SD_SendCmd>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 80a6 	bne.w	8001c24 <SD_disk_ioctl+0x22c>
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2110      	movs	r1, #16
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fcdc 	bl	800149c <SD_RxDataBlock>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 809c 	beq.w	8001c24 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001aec:	7b3b      	ldrb	r3, [r7, #12]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10d      	bne.n	8001b12 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001af6:	7d7b      	ldrb	r3, [r7, #21]
 8001af8:	461a      	mov	r2, r3
 8001afa:	7d3b      	ldrb	r3, [r7, #20]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001b08:	8bfb      	ldrh	r3, [r7, #30]
 8001b0a:	029a      	lsls	r2, r3, #10
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e02d      	b.n	8001b6e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b12:	7c7b      	ldrb	r3, [r7, #17]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	7dbb      	ldrb	r3, [r7, #22]
 8001b1c:	09db      	lsrs	r3, r3, #7
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	7d7b      	ldrb	r3, [r7, #21]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 0306 	and.w	r3, r3, #6
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	3302      	adds	r3, #2
 8001b36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b3a:	7d3b      	ldrb	r3, [r7, #20]
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	7cfb      	ldrb	r3, [r7, #19]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	7cbb      	ldrb	r3, [r7, #18]
 8001b4e:	029b      	lsls	r3, r3, #10
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b60:	8bfa      	ldrh	r2, [r7, #30]
 8001b62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b66:	3b09      	subs	r3, #9
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001b74:	e056      	b.n	8001c24 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b7c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b84:	e055      	b.n	8001c32 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001b86:	f7ff fc17 	bl	80013b8 <SD_ReadyWait>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2bff      	cmp	r3, #255	@ 0xff
 8001b8e:	d14b      	bne.n	8001c28 <SD_disk_ioctl+0x230>
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b96:	e047      	b.n	8001c28 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2049      	movs	r0, #73	@ 0x49
 8001b9c:	f7ff fcef 	bl	800157e <SD_SendCmd>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d142      	bne.n	8001c2c <SD_disk_ioctl+0x234>
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	6a38      	ldr	r0, [r7, #32]
 8001baa:	f7ff fc77 	bl	800149c <SD_RxDataBlock>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d03b      	beq.n	8001c2c <SD_disk_ioctl+0x234>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001bba:	e037      	b.n	8001c2c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	204a      	movs	r0, #74	@ 0x4a
 8001bc0:	f7ff fcdd 	bl	800157e <SD_SendCmd>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d132      	bne.n	8001c30 <SD_disk_ioctl+0x238>
 8001bca:	2110      	movs	r1, #16
 8001bcc:	6a38      	ldr	r0, [r7, #32]
 8001bce:	f7ff fc65 	bl	800149c <SD_RxDataBlock>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d02b      	beq.n	8001c30 <SD_disk_ioctl+0x238>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001bde:	e027      	b.n	8001c30 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001be0:	2100      	movs	r1, #0
 8001be2:	207a      	movs	r0, #122	@ 0x7a
 8001be4:	f7ff fccb 	bl	800157e <SD_SendCmd>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001bf4:	e00b      	b.n	8001c0e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001bf6:	6a3c      	ldr	r4, [r7, #32]
 8001bf8:	1c63      	adds	r3, r4, #1
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	f7ff fbb2 	bl	8001364 <SPI_RxByte>
 8001c00:	4603      	mov	r3, r0
 8001c02:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001c04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d9ef      	bls.n	8001bf6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001c22:	e006      	b.n	8001c32 <SD_disk_ioctl+0x23a>
			break;
 8001c24:	bf00      	nop
 8001c26:	e004      	b.n	8001c32 <SD_disk_ioctl+0x23a>
			break;
 8001c28:	bf00      	nop
 8001c2a:	e002      	b.n	8001c32 <SD_disk_ioctl+0x23a>
			break;
 8001c2c:	bf00      	nop
 8001c2e:	e000      	b.n	8001c32 <SD_disk_ioctl+0x23a>
			break;
 8001c30:	bf00      	nop
		}

		DESELECT();
 8001c32:	f7ff fb53 	bl	80012dc <DESELECT>
		SPI_RxByte();
 8001c36:	f7ff fb95 	bl	8001364 <SPI_RxByte>
	}

	return res;
 8001c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	372c      	adds	r7, #44	@ 0x2c
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b092      	sub	sp, #72	@ 0x48
 8001c50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c52:	f000 fc11 	bl	8002478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c56:	f000 f87f 	bl	8001d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5a:	f000 f955 	bl	8001f08 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001c5e:	f000 f8f3 	bl	8001e48 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001c62:	f000 f927 	bl	8001eb4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001c66:	f002 f987 	bl	8003f78 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001c6a:	f000 f8b7 	bl	8001ddc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001c6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c72:	f000 fc63 	bl	800253c <HAL_Delay>
  f_mount(&fs, "", 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	492d      	ldr	r1, [pc, #180]	@ (8001d30 <main+0xe4>)
 8001c7a:	482e      	ldr	r0, [pc, #184]	@ (8001d34 <main+0xe8>)
 8001c7c:	f004 fe50 	bl	8006920 <f_mount>
  f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001c80:	2213      	movs	r2, #19
 8001c82:	492d      	ldr	r1, [pc, #180]	@ (8001d38 <main+0xec>)
 8001c84:	482d      	ldr	r0, [pc, #180]	@ (8001d3c <main+0xf0>)
 8001c86:	f004 fe95 	bl	80069b4 <f_open>
  f_lseek(&fil, fil.fsize);
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <main+0xf0>)
 8001c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4829      	ldr	r0, [pc, #164]	@ (8001d3c <main+0xf0>)
 8001c96:	f005 febb 	bl	8007a10 <f_lseek>
  f_puts("Hello from Nizar\n", &fil);
 8001c9a:	4928      	ldr	r1, [pc, #160]	@ (8001d3c <main+0xf0>)
 8001c9c:	4828      	ldr	r0, [pc, #160]	@ (8001d40 <main+0xf4>)
 8001c9e:	f006 fa23 	bl	80080e8 <f_puts>
  f_close(&fil);
 8001ca2:	4826      	ldr	r0, [pc, #152]	@ (8001d3c <main+0xf0>)
 8001ca4:	f005 fe89 	bl	80079ba <f_close>
  f_open(&fil, "read.txt", FA_READ);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4926      	ldr	r1, [pc, #152]	@ (8001d44 <main+0xf8>)
 8001cac:	4823      	ldr	r0, [pc, #140]	@ (8001d3c <main+0xf0>)
 8001cae:	f004 fe81 	bl	80069b4 <f_open>
  // Reads line by line until the end
  while(f_gets(f_buffer, sizeof(f_buffer), &fil))
 8001cb2:	bf00      	nop
 8001cb4:	4a21      	ldr	r2, [pc, #132]	@ (8001d3c <main+0xf0>)
 8001cb6:	2132      	movs	r1, #50	@ 0x32
 8001cb8:	4823      	ldr	r0, [pc, #140]	@ (8001d48 <main+0xfc>)
 8001cba:	f006 f99a 	bl	8007ff2 <f_gets>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f7      	bne.n	8001cb4 <main+0x68>
  {
    // Can use the buffer for something useful
    // memset(buffer,0,sizeof(buffer));
  }
  f_close(&fil);
 8001cc4:	481d      	ldr	r0, [pc, #116]	@ (8001d3c <main+0xf0>)
 8001cc6:	f005 fe78 	bl	80079ba <f_close>
	  char * f_string = another_buffer;
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <main+0x100>)
 8001ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_UART_Transmit(&huart1,f_buffer, 50, 1000);
 8001cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd2:	2232      	movs	r2, #50	@ 0x32
 8001cd4:	491c      	ldr	r1, [pc, #112]	@ (8001d48 <main+0xfc>)
 8001cd6:	481e      	ldr	r0, [pc, #120]	@ (8001d50 <main+0x104>)
 8001cd8:	f001 ff79 	bl	8003bce <HAL_UART_Transmit>
  lcd_init();
 8001cdc:	f7ff f83a 	bl	8000d54 <lcd_init>
  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	23b0      	movs	r3, #176	@ 0xb0
 8001ce6:	22dc      	movs	r2, #220	@ 0xdc
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff f96e 	bl	8000fcc <fill_rectangle>
  char data_screen[50];
  memcpy(data_screen, f_buffer, 50 * sizeof(char));
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <main+0xfc>)
 8001cf2:	1d3c      	adds	r4, r7, #4
 8001cf4:	461d      	mov	r5, r3
 8001cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	8023      	strh	r3, [r4, #0]
	  char * ff_string = data_screen;
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //draw_string(0, 0, COLOR_GREEN, 1, f_string);
	  draw_string(0, 0, COLOR_GREEN, 1, f_buffer);
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <main+0xfc>)
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff fa9c 	bl	8001254 <draw_string>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <main+0x108>)
 8001d22:	f000 feaf 	bl	8002a84 <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 8001d26:	2096      	movs	r0, #150	@ 0x96
 8001d28:	f000 fc08 	bl	800253c <HAL_Delay>
	  draw_string(0, 0, COLOR_GREEN, 1, f_buffer);
 8001d2c:	bf00      	nop
 8001d2e:	e7ec      	b.n	8001d0a <main+0xbe>
 8001d30:	0800c9b0 	.word	0x0800c9b0
 8001d34:	20000244 	.word	0x20000244
 8001d38:	0800c9b4 	.word	0x0800c9b4
 8001d3c:	20001274 	.word	0x20001274
 8001d40:	0800c9c0 	.word	0x0800c9c0
 8001d44:	0800c9d4 	.word	0x0800c9d4
 8001d48:	200022a0 	.word	0x200022a0
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	20002384 	.word	0x20002384
 8001d54:	40011000 	.word	0x40011000

08001d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b090      	sub	sp, #64	@ 0x40
 8001d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5e:	f107 0318 	add.w	r3, r7, #24
 8001d62:	2228      	movs	r2, #40	@ 0x28
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f007 fa4b 	bl	8009202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d82:	2310      	movs	r3, #16
 8001d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d86:	2302      	movs	r3, #2
 8001d88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001d8e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fe8d 	bl	8002ab8 <HAL_RCC_OscConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001da4:	f000 f92c 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da8:	230f      	movs	r3, #15
 8001daa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dac:	2302      	movs	r3, #2
 8001dae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001db4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 f8fa 	bl	8002fbc <HAL_RCC_ClockConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001dce:	f000 f917 	bl	8002000 <Error_Handler>
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3740      	adds	r7, #64	@ 0x40
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001de2:	4a18      	ldr	r2, [pc, #96]	@ (8001e44 <MX_SPI1_Init+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001de8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001e10:	2208      	movs	r2, #8
 8001e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001e28:	220a      	movs	r2, #10
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <MX_SPI1_Init+0x64>)
 8001e2e:	f001 fa53 	bl	80032d8 <HAL_SPI_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e38:	f000 f8e2 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200022d4 	.word	0x200022d4
 8001e44:	40013000 	.word	0x40013000

08001e48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e4e:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <MX_SPI2_Init+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e94:	220a      	movs	r2, #10
 8001e96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_SPI2_Init+0x64>)
 8001e9a:	f001 fa1d 	bl	80032d8 <HAL_SPI_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ea4:	f000 f8ac 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000232c 	.word	0x2000232c
 8001eb0:	40003800 	.word	0x40003800

08001eb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <MX_USART1_UART_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eec:	f001 fe1f 	bl	8003b2e <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ef6:	f000 f883 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20002384 	.word	0x20002384
 8001f04:	40013800 	.word	0x40013800

08001f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1c:	4b35      	ldr	r3, [pc, #212]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a34      	ldr	r2, [pc, #208]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b32      	ldr	r3, [pc, #200]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f34:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f3a:	f043 0320 	orr.w	r3, r3, #32
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a28      	ldr	r2, [pc, #160]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f64:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a22      	ldr	r2, [pc, #136]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <MX_GPIO_Init+0xec>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8001f82:	481d      	ldr	r0, [pc, #116]	@ (8001ff8 <MX_GPIO_Init+0xf0>)
 8001f84:	f000 fd66 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f240 1103 	movw	r1, #259	@ 0x103
 8001f8e:	481b      	ldr	r0, [pc, #108]	@ (8001ffc <MX_GPIO_Init+0xf4>)
 8001f90:	f000 fd60 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f94:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	4619      	mov	r1, r3
 8001fac:	4812      	ldr	r0, [pc, #72]	@ (8001ff8 <MX_GPIO_Init+0xf0>)
 8001fae:	f000 fbcd 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <MX_GPIO_Init+0xf4>)
 8001fca:	f000 fbbf 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <MX_GPIO_Init+0xf4>)
 8001fe8:	f000 fbb0 	bl	800274c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40010800 	.word	0x40010800

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <Error_Handler+0x8>

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_MspInit+0x5c>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <HAL_MspInit+0x5c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6193      	str	r3, [r2, #24]
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_MspInit+0x5c>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <HAL_MspInit+0x5c>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a0e      	ldr	r2, [pc, #56]	@ (8002068 <HAL_MspInit+0x5c>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_MspInit+0x5c>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_MspInit+0x60>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_MspInit+0x60>)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000

08002070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a37      	ldr	r2, [pc, #220]	@ (8002168 <HAL_SPI_MspInit+0xf8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d130      	bne.n	80020f2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a35      	ldr	r2, [pc, #212]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 8002096:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b33      	ldr	r3, [pc, #204]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b30      	ldr	r3, [pc, #192]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a2f      	ldr	r2, [pc, #188]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020c0:	23a0      	movs	r3, #160	@ 0xa0
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	4619      	mov	r1, r3
 80020d2:	4827      	ldr	r0, [pc, #156]	@ (8002170 <HAL_SPI_MspInit+0x100>)
 80020d4:	f000 fb3a 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020d8:	2340      	movs	r3, #64	@ 0x40
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	4619      	mov	r1, r3
 80020ea:	4821      	ldr	r0, [pc, #132]	@ (8002170 <HAL_SPI_MspInit+0x100>)
 80020ec:	f000 fb2e 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020f0:	e036      	b.n	8002160 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <HAL_SPI_MspInit+0x104>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d131      	bne.n	8002160 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a1a      	ldr	r2, [pc, #104]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 8002102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002106:	61d3      	str	r3, [r2, #28]
 8002108:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6193      	str	r3, [r2, #24]
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_SPI_MspInit+0xfc>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800212c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f107 0318 	add.w	r3, r7, #24
 800213e:	4619      	mov	r1, r3
 8002140:	480d      	ldr	r0, [pc, #52]	@ (8002178 <HAL_SPI_MspInit+0x108>)
 8002142:	f000 fb03 	bl	800274c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002146:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	@ (8002178 <HAL_SPI_MspInit+0x108>)
 800215c:	f000 faf6 	bl	800274c <HAL_GPIO_Init>
}
 8002160:	bf00      	nop
 8002162:	3728      	adds	r7, #40	@ 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013000 	.word	0x40013000
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800
 8002174:	40003800 	.word	0x40003800
 8002178:	40010c00 	.word	0x40010c00

0800217c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1c      	ldr	r2, [pc, #112]	@ (8002208 <HAL_UART_MspInit+0x8c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d131      	bne.n	8002200 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_UART_MspInit+0x90>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a1a      	ldr	r2, [pc, #104]	@ (800220c <HAL_UART_MspInit+0x90>)
 80021a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_UART_MspInit+0x90>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_UART_MspInit+0x90>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <HAL_UART_MspInit+0x90>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_UART_MspInit+0x90>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4619      	mov	r1, r3
 80021e0:	480b      	ldr	r0, [pc, #44]	@ (8002210 <HAL_UART_MspInit+0x94>)
 80021e2:	f000 fab3 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <HAL_UART_MspInit+0x94>)
 80021fc:	f000 faa6 	bl	800274c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40013800 	.word	0x40013800
 800220c:	40021000 	.word	0x40021000
 8002210:	40010800 	.word	0x40010800

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <NMI_Handler+0x4>

0800221c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <MemManage_Handler+0x4>

0800222c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <UsageFault_Handler+0x4>

0800223c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <SysTick_Handler+0x34>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <SysTick_Handler+0x18>
		Timer1--;
 800226c:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <SysTick_Handler+0x34>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <SysTick_Handler+0x34>)
 8002276:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002278:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <SysTick_Handler+0x38>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <SysTick_Handler+0x2c>
		Timer2--;
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <SysTick_Handler+0x38>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <SysTick_Handler+0x38>)
 800228a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228c:	f000 f93a 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2000023c 	.word	0x2000023c
 8002298:	2000023e 	.word	0x2000023e

0800229c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return 1;
 80022a0:	2301      	movs	r3, #1
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <_kill>:

int _kill(int pid, int sig)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022b4:	f006 fff8 	bl	80092a8 <__errno>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2216      	movs	r2, #22
 80022bc:	601a      	str	r2, [r3, #0]
  return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_exit>:

void _exit (int status)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022d2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffe7 	bl	80022aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <_exit+0x12>

080022e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e00a      	b.n	8002308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022f2:	f3af 8000 	nop.w
 80022f6:	4601      	mov	r1, r0
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	60ba      	str	r2, [r7, #8]
 80022fe:	b2ca      	uxtb	r2, r1
 8002300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	dbf0      	blt.n	80022f2 <_read+0x12>
  }

  return len;
 8002310:	687b      	ldr	r3, [r7, #4]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e009      	b.n	8002340 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	60ba      	str	r2, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	dbf1      	blt.n	800232c <_write+0x12>
  }
  return len;
 8002348:	687b      	ldr	r3, [r7, #4]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_close>:

int _close(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002378:	605a      	str	r2, [r3, #4]
  return 0;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <_isatty>:

int _isatty(int file)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
	...

080023b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <_sbrk+0x5c>)
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <_sbrk+0x60>)
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <_sbrk+0x64>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	@ (800241c <_sbrk+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e4:	f006 ff60 	bl	80092a8 <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	220c      	movs	r2, #12
 80023ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023f2:	e009      	b.n	8002408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fa:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	@ (8002418 <_sbrk+0x64>)
 8002404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20005000 	.word	0x20005000
 8002414:	00000400 	.word	0x00000400
 8002418:	200023cc 	.word	0x200023cc
 800241c:	20002758 	.word	0x20002758

08002420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800242c:	f7ff fff8 	bl	8002420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002430:	480b      	ldr	r0, [pc, #44]	@ (8002460 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002432:	490c      	ldr	r1, [pc, #48]	@ (8002464 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002434:	4a0c      	ldr	r2, [pc, #48]	@ (8002468 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002438:	e002      	b.n	8002440 <LoopCopyDataInit>

0800243a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800243c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243e:	3304      	adds	r3, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002444:	d3f9      	bcc.n	800243a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002446:	4a09      	ldr	r2, [pc, #36]	@ (800246c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002448:	4c09      	ldr	r4, [pc, #36]	@ (8002470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800244c:	e001      	b.n	8002452 <LoopFillZerobss>

0800244e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002450:	3204      	adds	r2, #4

08002452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002454:	d3fb      	bcc.n	800244e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002456:	f006 ff2d 	bl	80092b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800245a:	f7ff fbf7 	bl	8001c4c <main>
  bx lr
 800245e:	4770      	bx	lr
  ldr r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002464:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002468:	0800d8b8 	.word	0x0800d8b8
  ldr r2, =_sbss
 800246c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002470:	20002754 	.word	0x20002754

08002474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <ADC1_2_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_Init+0x28>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <HAL_Init+0x28>)
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 f92b 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	200f      	movs	r0, #15
 8002490:	f000 f808 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7ff fdba 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000

080024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_InitTick+0x54>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <HAL_InitTick+0x58>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f935 	bl	8002732 <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024e0:	f000 f90b 	bl	80026fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	@ (8002500 <HAL_InitTick+0x5c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000038 	.word	0x20000038
 80024fc:	20000040 	.word	0x20000040
 8002500:	2000003c 	.word	0x2000003c

08002504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <HAL_IncTick+0x1c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <HAL_IncTick+0x20>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a03      	ldr	r2, [pc, #12]	@ (8002524 <HAL_IncTick+0x20>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	20000040 	.word	0x20000040
 8002524:	200023d0 	.word	0x200023d0

08002528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return uwTick;
 800252c:	4b02      	ldr	r3, [pc, #8]	@ (8002538 <HAL_GetTick+0x10>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	200023d0 	.word	0x200023d0

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff fff0 	bl	8002528 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffe0 	bl	8002528 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000040 	.word	0x20000040

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	@ (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	@ (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	@ 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026c4:	f7ff ff90 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff49 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff5e 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff90 	bl	800263c <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5f 	bl	80025e8 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffb0 	bl	80026a0 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b08b      	sub	sp, #44	@ 0x2c
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275e:	e169      	b.n	8002a34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002760:	2201      	movs	r2, #1
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 8158 	bne.w	8002a2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a9a      	ldr	r2, [pc, #616]	@ (80029ec <HAL_GPIO_Init+0x2a0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d05e      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 8002788:	4a98      	ldr	r2, [pc, #608]	@ (80029ec <HAL_GPIO_Init+0x2a0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d875      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 800278e:	4a98      	ldr	r2, [pc, #608]	@ (80029f0 <HAL_GPIO_Init+0x2a4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d058      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 8002794:	4a96      	ldr	r2, [pc, #600]	@ (80029f0 <HAL_GPIO_Init+0x2a4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d86f      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 800279a:	4a96      	ldr	r2, [pc, #600]	@ (80029f4 <HAL_GPIO_Init+0x2a8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d052      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 80027a0:	4a94      	ldr	r2, [pc, #592]	@ (80029f4 <HAL_GPIO_Init+0x2a8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d869      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 80027a6:	4a94      	ldr	r2, [pc, #592]	@ (80029f8 <HAL_GPIO_Init+0x2ac>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d04c      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 80027ac:	4a92      	ldr	r2, [pc, #584]	@ (80029f8 <HAL_GPIO_Init+0x2ac>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d863      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 80027b2:	4a92      	ldr	r2, [pc, #584]	@ (80029fc <HAL_GPIO_Init+0x2b0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d046      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 80027b8:	4a90      	ldr	r2, [pc, #576]	@ (80029fc <HAL_GPIO_Init+0x2b0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d85d      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 80027be:	2b12      	cmp	r3, #18
 80027c0:	d82a      	bhi.n	8002818 <HAL_GPIO_Init+0xcc>
 80027c2:	2b12      	cmp	r3, #18
 80027c4:	d859      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 80027c6:	a201      	add	r2, pc, #4	@ (adr r2, 80027cc <HAL_GPIO_Init+0x80>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	08002847 	.word	0x08002847
 80027d0:	08002821 	.word	0x08002821
 80027d4:	08002833 	.word	0x08002833
 80027d8:	08002875 	.word	0x08002875
 80027dc:	0800287b 	.word	0x0800287b
 80027e0:	0800287b 	.word	0x0800287b
 80027e4:	0800287b 	.word	0x0800287b
 80027e8:	0800287b 	.word	0x0800287b
 80027ec:	0800287b 	.word	0x0800287b
 80027f0:	0800287b 	.word	0x0800287b
 80027f4:	0800287b 	.word	0x0800287b
 80027f8:	0800287b 	.word	0x0800287b
 80027fc:	0800287b 	.word	0x0800287b
 8002800:	0800287b 	.word	0x0800287b
 8002804:	0800287b 	.word	0x0800287b
 8002808:	0800287b 	.word	0x0800287b
 800280c:	0800287b 	.word	0x0800287b
 8002810:	08002829 	.word	0x08002829
 8002814:	0800283d 	.word	0x0800283d
 8002818:	4a79      	ldr	r2, [pc, #484]	@ (8002a00 <HAL_GPIO_Init+0x2b4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800281e:	e02c      	b.n	800287a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	623b      	str	r3, [r7, #32]
          break;
 8002826:	e029      	b.n	800287c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	3304      	adds	r3, #4
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e024      	b.n	800287c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	3308      	adds	r3, #8
 8002838:	623b      	str	r3, [r7, #32]
          break;
 800283a:	e01f      	b.n	800287c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	330c      	adds	r3, #12
 8002842:	623b      	str	r3, [r7, #32]
          break;
 8002844:	e01a      	b.n	800287c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800284e:	2304      	movs	r3, #4
 8002850:	623b      	str	r3, [r7, #32]
          break;
 8002852:	e013      	b.n	800287c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800285c:	2308      	movs	r3, #8
 800285e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	611a      	str	r2, [r3, #16]
          break;
 8002866:	e009      	b.n	800287c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002868:	2308      	movs	r3, #8
 800286a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	615a      	str	r2, [r3, #20]
          break;
 8002872:	e003      	b.n	800287c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002874:	2300      	movs	r3, #0
 8002876:	623b      	str	r3, [r7, #32]
          break;
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x130>
          break;
 800287a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2bff      	cmp	r3, #255	@ 0xff
 8002880:	d801      	bhi.n	8002886 <HAL_GPIO_Init+0x13a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	e001      	b.n	800288a <HAL_GPIO_Init+0x13e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3304      	adds	r3, #4
 800288a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2bff      	cmp	r3, #255	@ 0xff
 8002890:	d802      	bhi.n	8002898 <HAL_GPIO_Init+0x14c>
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	e002      	b.n	800289e <HAL_GPIO_Init+0x152>
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	3b08      	subs	r3, #8
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	210f      	movs	r1, #15
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	401a      	ands	r2, r3
 80028b0:	6a39      	ldr	r1, [r7, #32]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	431a      	orrs	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80b1 	beq.w	8002a2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002a04 <HAL_GPIO_Init+0x2b8>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002a04 <HAL_GPIO_Init+0x2b8>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a04 <HAL_GPIO_Init+0x2b8>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028e4:	4a48      	ldr	r2, [pc, #288]	@ (8002a08 <HAL_GPIO_Init+0x2bc>)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a40      	ldr	r2, [pc, #256]	@ (8002a0c <HAL_GPIO_Init+0x2c0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_GPIO_Init+0x1ec>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3f      	ldr	r2, [pc, #252]	@ (8002a10 <HAL_GPIO_Init+0x2c4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00d      	beq.n	8002934 <HAL_GPIO_Init+0x1e8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a14 <HAL_GPIO_Init+0x2c8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x1e4>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3d      	ldr	r2, [pc, #244]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_GPIO_Init+0x1e0>
 8002928:	2303      	movs	r3, #3
 800292a:	e006      	b.n	800293a <HAL_GPIO_Init+0x1ee>
 800292c:	2304      	movs	r3, #4
 800292e:	e004      	b.n	800293a <HAL_GPIO_Init+0x1ee>
 8002930:	2302      	movs	r3, #2
 8002932:	e002      	b.n	800293a <HAL_GPIO_Init+0x1ee>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_GPIO_Init+0x1ee>
 8002938:	2300      	movs	r3, #0
 800293a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293c:	f002 0203 	and.w	r2, r2, #3
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	4093      	lsls	r3, r2
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800294a:	492f      	ldr	r1, [pc, #188]	@ (8002a08 <HAL_GPIO_Init+0x2bc>)
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002964:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	492c      	ldr	r1, [pc, #176]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002972:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	43db      	mvns	r3, r3
 800297a:	4928      	ldr	r1, [pc, #160]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 800297c:	4013      	ands	r3, r2
 800297e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800298c:	4b23      	ldr	r3, [pc, #140]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4922      	ldr	r1, [pc, #136]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
 8002998:	e006      	b.n	80029a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800299a:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	491e      	ldr	r1, [pc, #120]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029b4:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4918      	ldr	r1, [pc, #96]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029c2:	4b16      	ldr	r3, [pc, #88]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4914      	ldr	r1, [pc, #80]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d021      	beq.n	8002a20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029dc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	490e      	ldr	r1, [pc, #56]	@ (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
 80029e8:	e021      	b.n	8002a2e <HAL_GPIO_Init+0x2e2>
 80029ea:	bf00      	nop
 80029ec:	10320000 	.word	0x10320000
 80029f0:	10310000 	.word	0x10310000
 80029f4:	10220000 	.word	0x10220000
 80029f8:	10210000 	.word	0x10210000
 80029fc:	10120000 	.word	0x10120000
 8002a00:	10110000 	.word	0x10110000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40010800 	.word	0x40010800
 8002a10:	40010c00 	.word	0x40010c00
 8002a14:	40011000 	.word	0x40011000
 8002a18:	40011400 	.word	0x40011400
 8002a1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_GPIO_Init+0x304>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	4909      	ldr	r1, [pc, #36]	@ (8002a50 <HAL_GPIO_Init+0x304>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f47f ae8e 	bne.w	8002760 <HAL_GPIO_Init+0x14>
  }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	372c      	adds	r7, #44	@ 0x2c
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	40010400 	.word	0x40010400

08002a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
 8002a60:	4613      	mov	r3, r2
 8002a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a70:	e003      	b.n	8002a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43d9      	mvns	r1, r3
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e272      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8087 	beq.w	8002be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad8:	4b92      	ldr	r3, [pc, #584]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d00c      	beq.n	8002afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ae4:	4b8f      	ldr	r3, [pc, #572]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d112      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5e>
 8002af0:	4b8c      	ldr	r3, [pc, #560]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afc:	d10b      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afe:	4b89      	ldr	r3, [pc, #548]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d06c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x12c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d168      	bne.n	8002be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e24c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x76>
 8002b20:	4b80      	ldr	r3, [pc, #512]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a7f      	ldr	r2, [pc, #508]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e02e      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x98>
 8002b36:	4b7b      	ldr	r3, [pc, #492]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b78      	ldr	r3, [pc, #480]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a77      	ldr	r2, [pc, #476]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0xbc>
 8002b5a:	4b72      	ldr	r3, [pc, #456]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a71      	ldr	r2, [pc, #452]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b74:	4b6b      	ldr	r3, [pc, #428]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a6a      	ldr	r2, [pc, #424]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b68      	ldr	r3, [pc, #416]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a67      	ldr	r2, [pc, #412]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fcc8 	bl	8002528 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fcc4 	bl	8002528 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	@ 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e200      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b5d      	ldr	r3, [pc, #372]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0xe4>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fcb4 	bl	8002528 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7ff fcb0 	bl	8002528 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	@ 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1ec      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	4b53      	ldr	r3, [pc, #332]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x10c>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bfe:	4b49      	ldr	r3, [pc, #292]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x18c>
 8002c0a:	4b46      	ldr	r3, [pc, #280]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b43      	ldr	r3, [pc, #268]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x176>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e1c0      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4939      	ldr	r1, [pc, #228]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e03a      	b.n	8002cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7ff fc69 	bl	8002528 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7ff fc65 	bl	8002528 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1a1      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b2a      	ldr	r3, [pc, #168]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4927      	ldr	r1, [pc, #156]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b26      	ldr	r3, [pc, #152]	@ (8002d28 <HAL_RCC_OscConfig+0x270>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7ff fc48 	bl	8002528 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7ff fc44 	bl	8002528 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e180      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d03a      	beq.n	8002d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d019      	beq.n	8002d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cce:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <HAL_RCC_OscConfig+0x274>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7ff fc28 	bl	8002528 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7ff fc24 	bl	8002528 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e160      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f000 face 	bl	800329c <RCC_Delay>
 8002d00:	e01c      	b.n	8002d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_RCC_OscConfig+0x274>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d08:	f7ff fc0e 	bl	8002528 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d10:	f7ff fc0a 	bl	8002528 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d908      	bls.n	8002d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e146      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	42420000 	.word	0x42420000
 8002d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b92      	ldr	r3, [pc, #584]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e9      	bne.n	8002d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a6 	beq.w	8002e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b88      	ldr	r3, [pc, #544]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a87      	ldr	r2, [pc, #540]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	61d3      	str	r3, [r2, #28]
 8002d66:	4b85      	ldr	r3, [pc, #532]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b82      	ldr	r3, [pc, #520]	@ (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d82:	4b7f      	ldr	r3, [pc, #508]	@ (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7e      	ldr	r2, [pc, #504]	@ (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fbcb 	bl	8002528 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7ff fbc7 	bl	8002528 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	@ 0x64
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e103      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	4b75      	ldr	r3, [pc, #468]	@ (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x312>
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e02d      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x334>
 8002dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a69      	ldr	r2, [pc, #420]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	4b67      	ldr	r3, [pc, #412]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a66      	ldr	r2, [pc, #408]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	e01c      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x356>
 8002df4:	4b61      	ldr	r3, [pc, #388]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4a60      	ldr	r2, [pc, #384]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	6213      	str	r3, [r2, #32]
 8002e00:	4b5e      	ldr	r3, [pc, #376]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4a5d      	ldr	r2, [pc, #372]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	e00b      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a5a      	ldr	r2, [pc, #360]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	4b58      	ldr	r3, [pc, #352]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a57      	ldr	r2, [pc, #348]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d015      	beq.n	8002e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7ff fb7b 	bl	8002528 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7ff fb77 	bl	8002528 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0b1      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <HAL_RCC_OscConfig+0x37e>
 8002e58:	e014      	b.n	8002e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5a:	f7ff fb65 	bl	8002528 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7ff fb61 	bl	8002528 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e09b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	4b40      	ldr	r3, [pc, #256]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ee      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8087 	beq.w	8002fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea0:	4b36      	ldr	r3, [pc, #216]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d061      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d146      	bne.n	8002f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4b33      	ldr	r3, [pc, #204]	@ (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7ff fb35 	bl	8002528 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7ff fb31 	bl	8002528 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e06d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed4:	4b29      	ldr	r3, [pc, #164]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee8:	d108      	bne.n	8002efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eea:	4b24      	ldr	r3, [pc, #144]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	4921      	ldr	r1, [pc, #132]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a19      	ldr	r1, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	491b      	ldr	r1, [pc, #108]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f14:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7ff fb05 	bl	8002528 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7ff fb01 	bl	8002528 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e03d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x46a>
 8002f40:	e035      	b.n	8002fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7ff faee 	bl	8002528 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7ff faea 	bl	8002528 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e026      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x498>
 8002f6e:	e01e      	b.n	8002fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e019      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_RCC_OscConfig+0x500>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0d0      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d910      	bls.n	8003000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b67      	ldr	r3, [pc, #412]	@ (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 0207 	bic.w	r2, r3, #7
 8002fe6:	4965      	ldr	r1, [pc, #404]	@ (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	@ (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a58      	ldr	r2, [pc, #352]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a52      	ldr	r2, [pc, #328]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800303a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d040      	beq.n	80030dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b41      	ldr	r3, [pc, #260]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e073      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4b3d      	ldr	r3, [pc, #244]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06b      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b39      	ldr	r3, [pc, #228]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4936      	ldr	r1, [pc, #216]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ac:	f7ff fa3c 	bl	8002528 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7ff fa38 	bl	8002528 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e053      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d210      	bcs.n	800310c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b24      	ldr	r3, [pc, #144]	@ (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	4922      	ldr	r1, [pc, #136]	@ (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	@ (8003184 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x1cc>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1d0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f99a 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
 8003184:	0800cefc 	.word	0x0800cefc
 8003188:	20000038 	.word	0x20000038
 800318c:	2000003c 	.word	0x2000003c

08003190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x94>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x36>
 80031be:	e027      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031c0:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 80031c2:	613b      	str	r3, [r7, #16]
      break;
 80031c4:	e027      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0c9b      	lsrs	r3, r3, #18
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a17      	ldr	r2, [pc, #92]	@ (800322c <HAL_RCC_GetSysClockFreq+0x9c>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x94>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0c5b      	lsrs	r3, r3, #17
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	4a11      	ldr	r2, [pc, #68]	@ (8003230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 80031f2:	fb03 f202 	mul.w	r2, r3, r2
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e004      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0c      	ldr	r2, [pc, #48]	@ (8003234 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	613b      	str	r3, [r7, #16]
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b05      	ldr	r3, [pc, #20]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 8003212:	613b      	str	r3, [r7, #16]
      break;
 8003214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003216:	693b      	ldr	r3, [r7, #16]
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	007a1200 	.word	0x007a1200
 800322c:	0800cf14 	.word	0x0800cf14
 8003230:	0800cf24 	.word	0x0800cf24
 8003234:	003d0900 	.word	0x003d0900

08003238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b02      	ldr	r3, [pc, #8]	@ (8003248 <HAL_RCC_GetHCLKFreq+0x10>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	20000038 	.word	0x20000038

0800324c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003250:	f7ff fff2 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b05      	ldr	r3, [pc, #20]	@ (800326c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4903      	ldr	r1, [pc, #12]	@ (8003270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	0800cf0c 	.word	0x0800cf0c

08003274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003278:	f7ff ffde 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	0adb      	lsrs	r3, r3, #11
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	@ (8003298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	0800cf0c 	.word	0x0800cf0c

0800329c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032a4:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <RCC_Delay+0x34>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	@ (80032d4 <RCC_Delay+0x38>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	0a5b      	lsrs	r3, r3, #9
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032b8:	bf00      	nop
  }
  while (Delay --);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	60fa      	str	r2, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f9      	bne.n	80032b8 <RCC_Delay+0x1c>
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	20000038 	.word	0x20000038
 80032d4:	10624dd3 	.word	0x10624dd3

080032d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e076      	b.n	80033d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d108      	bne.n	8003304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032fa:	d009      	beq.n	8003310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
 8003302:	e005      	b.n	8003310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe fea0 	bl	8002070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003394:	ea42 0103 	orr.w	r1, r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	0c1a      	lsrs	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f002 0204 	and.w	r2, r2, #4
 80033b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033f0:	f7ff f89a 	bl	8002528 <HAL_GetTick>
 80033f4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d001      	beq.n	800340a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
 8003408:	e12a      	b.n	8003660 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_SPI_Transmit+0x36>
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e122      	b.n	8003660 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_SPI_Transmit+0x48>
 8003424:	2302      	movs	r3, #2
 8003426:	e11b      	b.n	8003660 <HAL_SPI_Transmit+0x280>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2203      	movs	r2, #3
 8003434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003476:	d10f      	bne.n	8003498 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003486:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003496:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a2:	2b40      	cmp	r3, #64	@ 0x40
 80034a4:	d007      	beq.n	80034b6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034be:	d152      	bne.n	8003566 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_SPI_Transmit+0xee>
 80034c8:	8b7b      	ldrh	r3, [r7, #26]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d145      	bne.n	800355a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	881a      	ldrh	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	1c9a      	adds	r2, r3, #2
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034f2:	e032      	b.n	800355a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d112      	bne.n	8003528 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	881a      	ldrh	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	1c9a      	adds	r2, r3, #2
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003526:	e018      	b.n	800355a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003528:	f7fe fffe 	bl	8002528 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d803      	bhi.n	8003540 <HAL_SPI_Transmit+0x160>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800353e:	d102      	bne.n	8003546 <HAL_SPI_Transmit+0x166>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e082      	b.n	8003660 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1c7      	bne.n	80034f4 <HAL_SPI_Transmit+0x114>
 8003564:	e053      	b.n	800360e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_Transmit+0x194>
 800356e:	8b7b      	ldrh	r3, [r7, #26]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d147      	bne.n	8003604 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800359a:	e033      	b.n	8003604 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d113      	bne.n	80035d2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035d0:	e018      	b.n	8003604 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d2:	f7fe ffa9 	bl	8002528 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d803      	bhi.n	80035ea <HAL_SPI_Transmit+0x20a>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035e8:	d102      	bne.n	80035f0 <HAL_SPI_Transmit+0x210>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e02d      	b.n	8003660 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1c6      	bne.n	800359c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa5a 	bl	8003acc <SPI_EndRxTxTransaction>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800365e:	2300      	movs	r3, #0
  }
}
 8003660:	4618      	mov	r0, r3
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	@ 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003676:	2301      	movs	r3, #1
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800367a:	f7fe ff55 	bl	8002528 <HAL_GetTick>
 800367e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003686:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d00c      	beq.n	80036b2 <HAL_SPI_TransmitReceive+0x4a>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800369e:	d106      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x46>
 80036a8:	7ffb      	ldrb	r3, [r7, #31]
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d001      	beq.n	80036b2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	e17f      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_SPI_TransmitReceive+0x5c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_SPI_TransmitReceive+0x5c>
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e174      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x6e>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e16d      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x34a>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d003      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2205      	movs	r2, #5
 80036ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	887a      	ldrh	r2, [r7, #2]
 8003702:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	887a      	ldrh	r2, [r7, #2]
 800371a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d007      	beq.n	8003746 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800374e:	d17e      	bne.n	800384e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_SPI_TransmitReceive+0xf6>
 8003758:	8afb      	ldrh	r3, [r7, #22]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d16c      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003782:	e059      	b.n	8003838 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d11b      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x162>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d016      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x162>
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d113      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	881a      	ldrh	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	1c9a      	adds	r2, r3, #2
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d119      	bne.n	800380c <HAL_SPI_TransmitReceive+0x1a4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d014      	beq.n	800380c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	b292      	uxth	r2, r2
 80037ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	1c9a      	adds	r2, r3, #2
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003808:	2301      	movs	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800380c:	f7fe fe8c 	bl	8002528 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003818:	429a      	cmp	r2, r3
 800381a:	d80d      	bhi.n	8003838 <HAL_SPI_TransmitReceive+0x1d0>
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003822:	d009      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0bc      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1a0      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x11c>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d19b      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x11c>
 800384c:	e082      	b.n	8003954 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_TransmitReceive+0x1f4>
 8003856:	8afb      	ldrh	r3, [r7, #22]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d171      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003882:	e05d      	b.n	8003940 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11c      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x264>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x264>
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d114      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d119      	bne.n	800390e <HAL_SPI_TransmitReceive+0x2a6>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d014      	beq.n	800390e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800390a:	2301      	movs	r3, #1
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800390e:	f7fe fe0b 	bl	8002528 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391a:	429a      	cmp	r2, r3
 800391c:	d803      	bhi.n	8003926 <HAL_SPI_TransmitReceive+0x2be>
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003924:	d102      	bne.n	800392c <HAL_SPI_TransmitReceive+0x2c4>
 8003926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e038      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d19c      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x21c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d197      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f8b7 	bl	8003acc <SPI_EndRxTxTransaction>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e01d      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	@ 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039cc:	f7fe fdac 	bl	8002528 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	4413      	add	r3, r2
 80039da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039dc:	f7fe fda4 	bl	8002528 <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039e2:	4b39      	ldr	r3, [pc, #228]	@ (8003ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	015b      	lsls	r3, r3, #5
 80039e8:	0d1b      	lsrs	r3, r3, #20
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f2:	e054      	b.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fa:	d050      	beq.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039fc:	f7fe fd94 	bl	8002528 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d902      	bls.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d13d      	bne.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a2a:	d111      	bne.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a34:	d004      	beq.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3e:	d107      	bne.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a58:	d10f      	bne.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e017      	b.n	8003abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d19b      	bne.n	80039f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000038 	.word	0x20000038

08003acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff ff6a 	bl	80039bc <SPI_WaitFlagStateUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e013      	b.n	8003b26 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	@ 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff ff57 	bl	80039bc <SPI_WaitFlagStateUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e000      	b.n	8003b26 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e042      	b.n	8003bc6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7fe fb11 	bl	800217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2224      	movs	r2, #36	@ 0x24
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b70:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f972 	bl	8003e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b96:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b08a      	sub	sp, #40	@ 0x28
 8003bd2:	af02      	add	r7, sp, #8
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d175      	bne.n	8003cda <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_UART_Transmit+0x2c>
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06e      	b.n	8003cdc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2221      	movs	r2, #33	@ 0x21
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c0c:	f7fe fc8c 	bl	8002528 <HAL_GetTick>
 8003c10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	88fa      	ldrh	r2, [r7, #6]
 8003c16:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c26:	d108      	bne.n	8003c3a <HAL_UART_Transmit+0x6c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e003      	b.n	8003c42 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c42:	e02e      	b.n	8003ca2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f848 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e03a      	b.n	8003cdc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	3302      	adds	r3, #2
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e007      	b.n	8003c94 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1cb      	bne.n	8003c44 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2140      	movs	r1, #64	@ 0x40
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f814 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e006      	b.n	8003cdc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf4:	e03b      	b.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cfc:	d037      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7fe fc13 	bl	8002528 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	6a3a      	ldr	r2, [r7, #32]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e03a      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d023      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b80      	cmp	r3, #128	@ 0x80
 8003d2a:	d020      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d01d      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d116      	bne.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f81d 	bl	8003d96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2208      	movs	r2, #8
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e00f      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4013      	ands	r3, r2
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d0b4      	beq.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b095      	sub	sp, #84	@ 0x54
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dbe:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e5      	bne.n	8003dd2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d119      	bne.n	8003e42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f023 0310 	bic.w	r3, r3, #16
 8003e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e2e:	61ba      	str	r2, [r7, #24]
 8003e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6979      	ldr	r1, [r7, #20]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e50:	bf00      	nop
 8003e52:	3754      	adds	r7, #84	@ 0x54
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr
	...

08003e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003e96:	f023 030c 	bic.w	r3, r3, #12
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8003f70 <UART_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7ff f9d6 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	e002      	b.n	8003ed2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7ff f9be 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 8003ed0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009a      	lsls	r2, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	4a22      	ldr	r2, [pc, #136]	@ (8003f74 <UART_SetConfig+0x118>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	0119      	lsls	r1, r3, #4
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009a      	lsls	r2, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f08:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <UART_SetConfig+0x118>)
 8003f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2064      	movs	r0, #100	@ 0x64
 8003f12:	fb00 f303 	mul.w	r3, r0, r3
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	3332      	adds	r3, #50	@ 0x32
 8003f1c:	4a15      	ldr	r2, [pc, #84]	@ (8003f74 <UART_SetConfig+0x118>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f28:	4419      	add	r1, r3
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009a      	lsls	r2, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <UART_SetConfig+0x118>)
 8003f42:	fba3 0302 	umull	r0, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2064      	movs	r0, #100	@ 0x64
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	@ 0x32
 8003f54:	4a07      	ldr	r2, [pc, #28]	@ (8003f74 <UART_SetConfig+0x118>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	440a      	add	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40013800 	.word	0x40013800
 8003f74:	51eb851f 	.word	0x51eb851f

08003f78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f7c:	4904      	ldr	r1, [pc, #16]	@ (8003f90 <MX_FATFS_Init+0x18>)
 8003f7e:	4805      	ldr	r0, [pc, #20]	@ (8003f94 <MX_FATFS_Init+0x1c>)
 8003f80:	f004 f936 	bl	80081f0 <FATFS_LinkDriver>
 8003f84:	4603      	mov	r3, r0
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b03      	ldr	r3, [pc, #12]	@ (8003f98 <MX_FATFS_Init+0x20>)
 8003f8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	200023d8 	.word	0x200023d8
 8003f94:	20000044 	.word	0x20000044
 8003f98:	200023d4 	.word	0x200023d4

08003f9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003fa0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd fb36 	bl	8001628 <SD_disk_initialize>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fd fc0d 	bl	80017f4 <SD_disk_status>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8003ff6:	7bf8      	ldrb	r0, [r7, #15]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	f7fd fc0d 	bl	800181c <SD_disk_read>
 8004002:	4603      	mov	r3, r0
 8004004:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4603      	mov	r3, r0
 800401c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800401e:	7bf8      	ldrb	r0, [r7, #15]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	f7fd fc63 	bl	80018f0 <SD_disk_write>
 800402a:	4603      	mov	r3, r0
 800402c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	603a      	str	r2, [r7, #0]
 8004040:	71fb      	strb	r3, [r7, #7]
 8004042:	460b      	mov	r3, r1
 8004044:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	79b9      	ldrb	r1, [r7, #6]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7fd fcd3 	bl	80019f8 <SD_disk_ioctl>
 8004052:	4603      	mov	r3, r0
 8004054:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	4a08      	ldr	r2, [pc, #32]	@ (8004090 <disk_status+0x30>)
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	79fa      	ldrb	r2, [r7, #7]
 8004078:	4905      	ldr	r1, [pc, #20]	@ (8004090 <disk_status+0x30>)
 800407a:	440a      	add	r2, r1
 800407c:	7a12      	ldrb	r2, [r2, #8]
 800407e:	4610      	mov	r0, r2
 8004080:	4798      	blx	r3
 8004082:	4603      	mov	r3, r0
 8004084:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	200025fc 	.word	0x200025fc

08004094 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <disk_initialize+0x48>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d111      	bne.n	80040d0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	4a0b      	ldr	r2, [pc, #44]	@ (80040dc <disk_initialize+0x48>)
 80040b0:	2101      	movs	r1, #1
 80040b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	4a09      	ldr	r2, [pc, #36]	@ (80040dc <disk_initialize+0x48>)
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	79fa      	ldrb	r2, [r7, #7]
 80040c2:	4906      	ldr	r1, [pc, #24]	@ (80040dc <disk_initialize+0x48>)
 80040c4:	440a      	add	r2, r1
 80040c6:	7a12      	ldrb	r2, [r2, #8]
 80040c8:	4610      	mov	r0, r2
 80040ca:	4798      	blx	r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200025fc 	.word	0x200025fc

080040e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	4a0a      	ldr	r2, [pc, #40]	@ (800411c <disk_read+0x3c>)
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	689c      	ldr	r4, [r3, #8]
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	4a07      	ldr	r2, [pc, #28]	@ (800411c <disk_read+0x3c>)
 8004100:	4413      	add	r3, r2
 8004102:	7a18      	ldrb	r0, [r3, #8]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	47a0      	blx	r4
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004110:	7dfb      	ldrb	r3, [r7, #23]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd90      	pop	{r4, r7, pc}
 800411a:	bf00      	nop
 800411c:	200025fc 	.word	0x200025fc

08004120 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	4a0a      	ldr	r2, [pc, #40]	@ (800415c <disk_write+0x3c>)
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68dc      	ldr	r4, [r3, #12]
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	4a07      	ldr	r2, [pc, #28]	@ (800415c <disk_write+0x3c>)
 8004140:	4413      	add	r3, r2
 8004142:	7a18      	ldrb	r0, [r3, #8]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	47a0      	blx	r4
 800414c:	4603      	mov	r3, r0
 800414e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004150:	7dfb      	ldrb	r3, [r7, #23]
}
 8004152:	4618      	mov	r0, r3
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}
 800415a:	bf00      	nop
 800415c:	200025fc 	.word	0x200025fc

08004160 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	603a      	str	r2, [r7, #0]
 800416a:	71fb      	strb	r3, [r7, #7]
 800416c:	460b      	mov	r3, r1
 800416e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	4a09      	ldr	r2, [pc, #36]	@ (8004198 <disk_ioctl+0x38>)
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	79fa      	ldrb	r2, [r7, #7]
 800417e:	4906      	ldr	r1, [pc, #24]	@ (8004198 <disk_ioctl+0x38>)
 8004180:	440a      	add	r2, r1
 8004182:	7a10      	ldrb	r0, [r2, #8]
 8004184:	79b9      	ldrb	r1, [r7, #6]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	4798      	blx	r3
 800418a:	4603      	mov	r3, r0
 800418c:	73fb      	strb	r3, [r7, #15]
  return res;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200025fc 	.word	0x200025fc

0800419c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80041b0:	e007      	b.n	80041c2 <mem_cpy+0x26>
		*d++ = *s++;
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	1c53      	adds	r3, r2, #1
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1c59      	adds	r1, r3, #1
 80041bc:	6179      	str	r1, [r7, #20]
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f2      	bne.n	80041b2 <mem_cpy+0x16>
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80041e8:	e005      	b.n	80041f6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	617a      	str	r2, [r7, #20]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	1e5a      	subs	r2, r3, #1
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f4      	bne.n	80041ea <mem_set+0x12>
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	@ 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004224:	bf00      	nop
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	1e5a      	subs	r2, r3, #1
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00d      	beq.n	800424c <mem_cmp+0x40>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	61fa      	str	r2, [r7, #28]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4619      	mov	r1, r3
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	61ba      	str	r2, [r7, #24]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	1acb      	subs	r3, r1, r3
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ec      	beq.n	8004226 <mem_cmp+0x1a>
	return r;
 800424c:	697b      	ldr	r3, [r7, #20]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3724      	adds	r7, #36	@ 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004262:	e002      	b.n	800426a <chk_chr+0x12>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3301      	adds	r3, #1
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <chk_chr+0x26>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4293      	cmp	r3, r2
 800427c:	d1f2      	bne.n	8004264 <chk_chr+0xc>
	return *str;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	781b      	ldrb	r3, [r3, #0]
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e03b      	b.n	8004318 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80042a0:	4931      	ldr	r1, [pc, #196]	@ (8004368 <chk_lock+0xdc>)
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02c      	beq.n	800430e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80042b4:	492c      	ldr	r1, [pc, #176]	@ (8004368 <chk_lock+0xdc>)
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4613      	mov	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d120      	bne.n	8004312 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80042d0:	4925      	ldr	r1, [pc, #148]	@ (8004368 <chk_lock+0xdc>)
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	3304      	adds	r3, #4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042e8:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d111      	bne.n	8004312 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80042ee:	491e      	ldr	r1, [pc, #120]	@ (8004368 <chk_lock+0xdc>)
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3308      	adds	r3, #8
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004306:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004308:	429a      	cmp	r2, r3
 800430a:	d102      	bne.n	8004312 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800430c:	e007      	b.n	800431e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800430e:	2301      	movs	r3, #1
 8004310:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3301      	adds	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d9c0      	bls.n	80042a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d109      	bne.n	8004338 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <chk_lock+0xa4>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d101      	bne.n	8004334 <chk_lock+0xa8>
 8004330:	2300      	movs	r3, #0
 8004332:	e013      	b.n	800435c <chk_lock+0xd0>
 8004334:	2312      	movs	r3, #18
 8004336:	e011      	b.n	800435c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <chk_lock+0xca>
 800433e:	490a      	ldr	r1, [pc, #40]	@ (8004368 <chk_lock+0xdc>)
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	330a      	adds	r3, #10
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004354:	d101      	bne.n	800435a <chk_lock+0xce>
 8004356:	2310      	movs	r3, #16
 8004358:	e000      	b.n	800435c <chk_lock+0xd0>
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	200023e4 	.word	0x200023e4

0800436c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	e002      	b.n	800437e <enq_lock+0x12>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3301      	adds	r3, #1
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d809      	bhi.n	8004398 <enq_lock+0x2c>
 8004384:	490a      	ldr	r1, [pc, #40]	@ (80043b0 <enq_lock+0x44>)
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ef      	bne.n	8004378 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b02      	cmp	r3, #2
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	200023e4 	.word	0x200023e4

080043b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e02e      	b.n	8004422 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80043c4:	4958      	ldr	r1, [pc, #352]	@ (8004528 <inc_lock+0x174>)
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d11d      	bne.n	800441c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80043e0:	4951      	ldr	r1, [pc, #324]	@ (8004528 <inc_lock+0x174>)
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4613      	mov	r3, r2
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	3304      	adds	r3, #4
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10e      	bne.n	800441c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 80043fe:	494a      	ldr	r1, [pc, #296]	@ (8004528 <inc_lock+0x174>)
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3308      	adds	r3, #8
 800440e:	881a      	ldrh	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004416:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8004418:	429a      	cmp	r2, r3
 800441a:	d006      	beq.n	800442a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d9cd      	bls.n	80043c4 <inc_lock+0x10>
 8004428:	e000      	b.n	800442c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800442a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d148      	bne.n	80044c4 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e002      	b.n	800443e <inc_lock+0x8a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d809      	bhi.n	8004458 <inc_lock+0xa4>
 8004444:	4938      	ldr	r1, [pc, #224]	@ (8004528 <inc_lock+0x174>)
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ef      	bne.n	8004438 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d101      	bne.n	8004462 <inc_lock+0xae>
 800445e:	2300      	movs	r3, #0
 8004460:	e05d      	b.n	800451e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	482f      	ldr	r0, [pc, #188]	@ (8004528 <inc_lock+0x174>)
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4403      	add	r3, r0
 8004478:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	4829      	ldr	r0, [pc, #164]	@ (8004528 <inc_lock+0x174>)
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4403      	add	r3, r0
 8004490:	3304      	adds	r3, #4
 8004492:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800449a:	88d8      	ldrh	r0, [r3, #6]
 800449c:	4922      	ldr	r1, [pc, #136]	@ (8004528 <inc_lock+0x174>)
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3308      	adds	r3, #8
 80044ac:	4602      	mov	r2, r0
 80044ae:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80044b0:	491d      	ldr	r1, [pc, #116]	@ (8004528 <inc_lock+0x174>)
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	330a      	adds	r3, #10
 80044c0:	2200      	movs	r2, #0
 80044c2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <inc_lock+0x130>
 80044ca:	4917      	ldr	r1, [pc, #92]	@ (8004528 <inc_lock+0x174>)
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4613      	mov	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	330a      	adds	r3, #10
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <inc_lock+0x130>
 80044e0:	2300      	movs	r3, #0
 80044e2:	e01c      	b.n	800451e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <inc_lock+0x14e>
 80044ea:	490f      	ldr	r1, [pc, #60]	@ (8004528 <inc_lock+0x174>)
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	330a      	adds	r3, #10
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	b299      	uxth	r1, r3
 8004500:	e001      	b.n	8004506 <inc_lock+0x152>
 8004502:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004506:	4808      	ldr	r0, [pc, #32]	@ (8004528 <inc_lock+0x174>)
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4403      	add	r3, r0
 8004514:	330a      	adds	r3, #10
 8004516:	460a      	mov	r2, r1
 8004518:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3301      	adds	r3, #1
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	200023e4 	.word	0x200023e4

0800452c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3b01      	subs	r3, #1
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d82e      	bhi.n	800459e <dec_lock+0x72>
		n = Files[i].ctr;
 8004540:	491b      	ldr	r1, [pc, #108]	@ (80045b0 <dec_lock+0x84>)
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	330a      	adds	r3, #10
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004554:	89fb      	ldrh	r3, [r7, #14]
 8004556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455a:	d101      	bne.n	8004560 <dec_lock+0x34>
 800455c:	2300      	movs	r3, #0
 800455e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004560:	89fb      	ldrh	r3, [r7, #14]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <dec_lock+0x40>
 8004566:	89fb      	ldrh	r3, [r7, #14]
 8004568:	3b01      	subs	r3, #1
 800456a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800456c:	4910      	ldr	r1, [pc, #64]	@ (80045b0 <dec_lock+0x84>)
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	330a      	adds	r3, #10
 800457c:	89fa      	ldrh	r2, [r7, #14]
 800457e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004580:	89fb      	ldrh	r3, [r7, #14]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <dec_lock+0x6c>
 8004586:	490a      	ldr	r1, [pc, #40]	@ (80045b0 <dec_lock+0x84>)
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	737b      	strb	r3, [r7, #13]
 800459c:	e001      	b.n	80045a2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800459e:	2302      	movs	r3, #2
 80045a0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80045a2:	7b7b      	ldrb	r3, [r7, #13]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	200023e4 	.word	0x200023e4

080045b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e016      	b.n	80045f0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045c2:	4910      	ldr	r1, [pc, #64]	@ (8004604 <clear_lock+0x50>)
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d108      	bne.n	80045ea <clear_lock+0x36>
 80045d8:	490a      	ldr	r1, [pc, #40]	@ (8004604 <clear_lock+0x50>)
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d9e5      	bls.n	80045c2 <clear_lock+0xe>
	}
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	200023e4 	.word	0x200023e4

08004608 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800461a:	791b      	ldrb	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d040      	beq.n	80046a2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004630:	7858      	ldrb	r0, [r3, #1]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	2301      	movs	r3, #1
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	f7ff fd72 	bl	8004120 <disk_write>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <sync_window+0x40>
			res = FR_DISK_ERR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e02c      	b.n	80046a2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800464e:	2200      	movs	r2, #0
 8004650:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	1ad2      	subs	r2, r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	429a      	cmp	r2, r3
 8004668:	d21b      	bcs.n	80046a2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004670:	78db      	ldrb	r3, [r3, #3]
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	e012      	b.n	800469c <sync_window+0x94>
					wsect += fs->fsize;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4413      	add	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800468a:	7858      	ldrb	r0, [r3, #1]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	2301      	movs	r3, #1
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	f7ff fd45 	bl	8004120 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3b01      	subs	r3, #1
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d8e9      	bhi.n	8004676 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d01e      	beq.n	8004706 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff9d 	bl	8004608 <sync_window>
 80046ce:	4603      	mov	r3, r0
 80046d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d116      	bne.n	8004706 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046de:	7858      	ldrb	r0, [r3, #1]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	2301      	movs	r3, #1
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	f7ff fcfb 	bl	80040e0 <disk_read>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004700:	461a      	mov	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff75 	bl	8004608 <sync_window>
 800471e:	4603      	mov	r3, r0
 8004720:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 80ad 	bne.w	8004884 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b03      	cmp	r3, #3
 8004734:	f040 8098 	bne.w	8004868 <sync_fs+0x158>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800473e:	795b      	ldrb	r3, [r3, #5]
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 8091 	bne.w	8004868 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800474e:	895b      	ldrh	r3, [r3, #10]
 8004750:	461a      	mov	r2, r3
 8004752:	2100      	movs	r1, #0
 8004754:	f7ff fd40 	bl	80041d8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2255      	movs	r2, #85	@ 0x55
 800475c:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	22aa      	movs	r2, #170	@ 0xaa
 8004764:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2252      	movs	r2, #82	@ 0x52
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2252      	movs	r2, #82	@ 0x52
 8004772:	705a      	strb	r2, [r3, #1]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2261      	movs	r2, #97	@ 0x61
 8004778:	709a      	strb	r2, [r3, #2]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2241      	movs	r2, #65	@ 0x41
 800477e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2272      	movs	r2, #114	@ 0x72
 8004784:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2272      	movs	r2, #114	@ 0x72
 800478c:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2241      	movs	r2, #65	@ 0x41
 8004794:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2261      	movs	r2, #97	@ 0x61
 800479c:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	b29b      	uxth	r3, r3
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	b29b      	uxth	r3, r3
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	b29b      	uxth	r3, r3
 8004808:	b2da      	uxtb	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	b2da      	uxtb	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	0e1b      	lsrs	r3, r3, #24
 800482c:	b2da      	uxtb	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	3301      	adds	r3, #1
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004844:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800484c:	7858      	ldrb	r0, [r3, #1]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004858:	2301      	movs	r3, #1
 800485a:	f7ff fc61 	bl	8004120 <disk_write>
			fs->fsi_flag = 0;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004864:	2200      	movs	r2, #0
 8004866:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2200      	movs	r2, #0
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fc73 	bl	8004160 <disk_ioctl>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	3b02      	subs	r3, #2
 800489c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	3b02      	subs	r3, #2
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d301      	bcc.n	80048b2 <clust2sect+0x24>
 80048ae:	2300      	movs	r3, #0
 80048b0:	e00c      	b.n	80048cc <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b8:	789b      	ldrb	r3, [r3, #2]
 80048ba:	461a      	mov	r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	fb03 f202 	mul.w	r2, r3, r2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	4413      	add	r3, r2
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d906      	bls.n	80048f4 <get_fat+0x1e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <get_fat+0x24>
		val = 1;	/* Internal error */
 80048f4:	2301      	movs	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e0e3      	b.n	8004ac2 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80048fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048fe:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	f000 8097 	beq.w	8004a3c <get_fat+0x166>
 800490e:	2b03      	cmp	r3, #3
 8004910:	f300 80cd 	bgt.w	8004aae <get_fat+0x1d8>
 8004914:	2b01      	cmp	r3, #1
 8004916:	d002      	beq.n	800491e <get_fat+0x48>
 8004918:	2b02      	cmp	r3, #2
 800491a:	d05e      	beq.n	80049da <get_fat+0x104>
 800491c:	e0c7      	b.n	8004aae <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800493a:	895b      	ldrh	r3, [r3, #10]
 800493c:	4619      	mov	r1, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	fbb3 f3f1 	udiv	r3, r3, r1
 8004944:	4413      	add	r3, r2
 8004946:	4619      	mov	r1, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff feaf 	bl	80046ac <move_window>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 80af 	bne.w	8004ab4 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	60fa      	str	r2, [r7, #12]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004962:	8952      	ldrh	r2, [r2, #10]
 8004964:	fbb3 f1f2 	udiv	r1, r3, r2
 8004968:	fb01 f202 	mul.w	r2, r1, r2
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	5cd3      	ldrb	r3, [r2, r3]
 8004972:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004982:	895b      	ldrh	r3, [r3, #10]
 8004984:	4619      	mov	r1, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	fbb3 f3f1 	udiv	r3, r3, r1
 800498c:	4413      	add	r3, r2
 800498e:	4619      	mov	r1, r3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff fe8b 	bl	80046ac <move_window>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	f040 808d 	bne.w	8004ab8 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a4:	895b      	ldrh	r3, [r3, #10]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80049ae:	fb01 f202 	mul.w	r2, r1, r2
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <get_fat+0xfa>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	e002      	b.n	80049d6 <get_fat+0x100>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d6:	617b      	str	r3, [r7, #20]
			break;
 80049d8:	e073      	b.n	8004ac2 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049e0:	6a1a      	ldr	r2, [r3, #32]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049e8:	895b      	ldrh	r3, [r3, #10]
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	4619      	mov	r1, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049f6:	4413      	add	r3, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fe56 	bl	80046ac <move_window>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d15a      	bne.n	8004abc <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a10:	8952      	ldrh	r2, [r2, #10]
 8004a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a16:	fb01 f202 	mul.w	r2, r1, r2
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4413      	add	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	b21a      	sxth	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	b21b      	sxth	r3, r3
 8004a32:	4313      	orrs	r3, r2
 8004a34:	b21b      	sxth	r3, r3
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	617b      	str	r3, [r7, #20]
			break;
 8004a3a:	e042      	b.n	8004ac2 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a42:	6a1a      	ldr	r2, [r3, #32]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4a:	895b      	ldrh	r3, [r3, #10]
 8004a4c:	089b      	lsrs	r3, r3, #2
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a58:	4413      	add	r3, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fe25 	bl	80046ac <move_window>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d12b      	bne.n	8004ac0 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a72:	8952      	ldrh	r2, [r2, #10]
 8004a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a78:	fb01 f202 	mul.w	r2, r1, r2
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3303      	adds	r3, #3
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	061a      	lsls	r2, r3, #24
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	3302      	adds	r3, #2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	7812      	ldrb	r2, [r2, #0]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004aaa:	617b      	str	r3, [r7, #20]
			break;
 8004aac:	e009      	b.n	8004ac2 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 8004aae:	2301      	movs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e006      	b.n	8004ac2 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ab4:	bf00      	nop
 8004ab6:	e004      	b.n	8004ac2 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ab8:	bf00      	nop
 8004aba:	e002      	b.n	8004ac2 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ac0:	bf00      	nop
		}
	}

	return val;
 8004ac2:	697b      	ldr	r3, [r7, #20]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d906      	bls.n	8004aec <put_fat+0x20>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <put_fat+0x26>
		res = FR_INT_ERR;
 8004aec:	2302      	movs	r3, #2
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e13a      	b.n	8004d68 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	f000 80d0 	beq.w	8004ca0 <put_fat+0x1d4>
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	f300 8127 	bgt.w	8004d54 <put_fat+0x288>
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d003      	beq.n	8004b12 <put_fat+0x46>
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	f000 808f 	beq.w	8004c2e <put_fat+0x162>
 8004b10:	e120      	b.n	8004d54 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b2e:	895b      	ldrh	r3, [r3, #10]
 8004b30:	4619      	mov	r1, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b38:	4413      	add	r3, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff fdb5 	bl	80046ac <move_window>
 8004b42:	4603      	mov	r3, r0
 8004b44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b46:	7ffb      	ldrb	r3, [r7, #31]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f040 8106 	bne.w	8004d5a <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	617a      	str	r2, [r7, #20]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b5a:	8952      	ldrh	r2, [r2, #10]
 8004b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b60:	fb01 f202 	mul.w	r2, r1, r2
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00d      	beq.n	8004b92 <put_fat+0xc6>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	b25a      	sxtb	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e001      	b.n	8004b96 <put_fat+0xca>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004baa:	6a1a      	ldr	r2, [r3, #32]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bb2:	895b      	ldrh	r3, [r3, #10]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff fd73 	bl	80046ac <move_window>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 80c6 	bne.w	8004d5e <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bd8:	895b      	ldrh	r3, [r3, #10]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8004be2:	fb01 f202 	mul.w	r2, r1, r2
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <put_fat+0x134>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e00e      	b.n	8004c1e <put_fat+0x152>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	f023 030f 	bic.w	r3, r3, #15
 8004c0a:	b25a      	sxtb	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	b25b      	sxtb	r3, r3
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	b25b      	sxtb	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c28:	2201      	movs	r2, #1
 8004c2a:	711a      	strb	r2, [r3, #4]
			break;
 8004c2c:	e09c      	b.n	8004d68 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c34:	6a1a      	ldr	r2, [r3, #32]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c3c:	895b      	ldrh	r3, [r3, #10]
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	4619      	mov	r1, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c4a:	4413      	add	r3, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fd2c 	bl	80046ac <move_window>
 8004c54:	4603      	mov	r3, r0
 8004c56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c58:	7ffb      	ldrb	r3, [r7, #31]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 8081 	bne.w	8004d62 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c6a:	8952      	ldrh	r2, [r2, #10]
 8004c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c70:	fb01 f202 	mul.w	r2, r1, r2
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	0a1b      	lsrs	r3, r3, #8
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	711a      	strb	r2, [r3, #4]
			break;
 8004c9e:	e063      	b.n	8004d68 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cae:	895b      	ldrh	r3, [r3, #10]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cbc:	4413      	add	r3, r2
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fcf3 	bl	80046ac <move_window>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d14a      	bne.n	8004d66 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cda:	8952      	ldrh	r2, [r2, #10]
 8004cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ce0:	fb01 f202 	mul.w	r2, r1, r2
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	3303      	adds	r3, #3
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	061a      	lsls	r2, r3, #24
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	3301      	adds	r3, #1
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	4313      	orrs	r3, r2
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	0a1b      	lsrs	r3, r3, #8
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0c1a      	lsrs	r2, r3, #16
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	3302      	adds	r3, #2
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	0e1a      	lsrs	r2, r3, #24
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	3303      	adds	r3, #3
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d4e:	2201      	movs	r2, #1
 8004d50:	711a      	strb	r2, [r3, #4]
			break;
 8004d52:	e009      	b.n	8004d68 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8004d54:	2302      	movs	r3, #2
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e006      	b.n	8004d68 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004d5a:	bf00      	nop
 8004d5c:	e004      	b.n	8004d68 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004d5e:	bf00      	nop
 8004d60:	e002      	b.n	8004d68 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004d66:	bf00      	nop
		}
	}

	return res;
 8004d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d906      	bls.n	8004d90 <remove_chain+0x1e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d302      	bcc.n	8004d96 <remove_chain+0x24>
		res = FR_INT_ERR;
 8004d90:	2302      	movs	r3, #2
 8004d92:	73fb      	strb	r3, [r7, #15]
 8004d94:	e049      	b.n	8004e2a <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004d9a:	e03b      	b.n	8004e14 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fd99 	bl	80048d6 <get_fat>
 8004da4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d03b      	beq.n	8004e24 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <remove_chain+0x46>
 8004db2:	2302      	movs	r3, #2
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	e038      	b.n	8004e2a <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dbe:	d102      	bne.n	8004dc6 <remove_chain+0x54>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e031      	b.n	8004e2a <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fe7e 	bl	8004acc <put_fat>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d126      	bne.n	8004e28 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004de6:	d013      	beq.n	8004e10 <remove_chain+0x9e>
				fs->free_clust++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	3301      	adds	r3, #1
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004df8:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e00:	795b      	ldrb	r3, [r3, #5]
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e0e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d3bc      	bcc.n	8004d9c <remove_chain+0x2a>
 8004e22:	e002      	b.n	8004e2a <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <remove_chain+0xb8>
			if (res != FR_OK) break;
 8004e28:	bf00      	nop
		}
	}

	return res;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d111      	bne.n	8004e68 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <create_chain+0x2e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d31d      	bcc.n	8004e9e <create_chain+0x6a>
 8004e62:	2301      	movs	r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	e01a      	b.n	8004e9e <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fd33 	bl	80048d6 <get_fat>
 8004e70:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d801      	bhi.n	8004e7c <create_chain+0x48>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e07f      	b.n	8004f7c <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e82:	d101      	bne.n	8004e88 <create_chain+0x54>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	e079      	b.n	8004f7c <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d201      	bcs.n	8004e9a <create_chain+0x66>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	e070      	b.n	8004f7c <create_chain+0x148>
		scl = clst;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d307      	bcc.n	8004ec6 <create_chain+0x92>
			ncl = 2;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d901      	bls.n	8004ec6 <create_chain+0x92>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e05a      	b.n	8004f7c <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004ec6:	6979      	ldr	r1, [r7, #20]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fd04 	bl	80048d6 <get_fat>
 8004ece:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00e      	beq.n	8004ef4 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004edc:	d002      	beq.n	8004ee4 <create_chain+0xb0>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <create_chain+0xb4>
			return cs;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	e049      	b.n	8004f7c <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1d8      	bne.n	8004ea2 <create_chain+0x6e>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e043      	b.n	8004f7c <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8004ef4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004ef6:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fde5 	bl	8004acc <put_fat>
 8004f02:	4603      	mov	r3, r0
 8004f04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <create_chain+0xec>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	6839      	ldr	r1, [r7, #0]
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fdd8 	bl	8004acc <put_fat>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d121      	bne.n	8004f6a <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f3e:	d01c      	beq.n	8004f7a <create_chain+0x146>
			fs->free_clust--;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f50:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f58:	795b      	ldrb	r3, [r3, #5]
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f66:	715a      	strb	r2, [r3, #5]
 8004f68:	e007      	b.n	8004f7a <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <create_chain+0x142>
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f74:	e000      	b.n	8004f78 <create_chain+0x144>
 8004f76:	2301      	movs	r3, #1
 8004f78:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004f7a:	697b      	ldr	r3, [r7, #20]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	3304      	adds	r3, #4
 8004f98:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fa6:	895b      	ldrh	r3, [r3, #10]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fbc:	7892      	ldrb	r2, [r2, #2]
 8004fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1d1a      	adds	r2, r3, #4
 8004fc8:	613a      	str	r2, [r7, #16]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <clmt_clust+0x54>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e010      	b.n	8004ffa <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d307      	bcc.n	8004ff0 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	3304      	adds	r3, #4
 8004fec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004fee:	e7e9      	b.n	8004fc4 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8004ff0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4413      	add	r3, r2
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005018:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d009      	beq.n	800503e <dir_sdi+0x3a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	429a      	cmp	r2, r3
 800503c:	d301      	bcc.n	8005042 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800503e:	2302      	movs	r3, #2
 8005040:	e0aa      	b.n	8005198 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d110      	bne.n	800506a <dir_sdi+0x66>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d107      	bne.n	800506a <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d115      	bne.n	800509c <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800507c:	891b      	ldrh	r3, [r3, #8]
 800507e:	461a      	mov	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	4293      	cmp	r3, r2
 8005084:	d301      	bcc.n	800508a <dir_sdi+0x86>
			return FR_INT_ERR;
 8005086:	2302      	movs	r3, #2
 8005088:	e086      	b.n	8005198 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e043      	b.n	8005124 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a8:	895b      	ldrh	r3, [r3, #10]
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80050c4:	e021      	b.n	800510a <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6979      	ldr	r1, [r7, #20]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fc00 	bl	80048d6 <get_fat>
 80050d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050de:	d101      	bne.n	80050e4 <dir_sdi+0xe0>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e059      	b.n	8005198 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d909      	bls.n	80050fe <dir_sdi+0xfa>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d301      	bcc.n	8005102 <dir_sdi+0xfe>
				return FR_INT_ERR;
 80050fe:	2302      	movs	r3, #2
 8005100:	e04a      	b.n	8005198 <dir_sdi+0x194>
			idx -= ic;
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	429a      	cmp	r2, r3
 8005110:	d2d9      	bcs.n	80050c6 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fbb6 	bl	800488e <clust2sect>
 8005122:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800512a:	461a      	mov	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <dir_sdi+0x136>
 8005136:	2302      	movs	r3, #2
 8005138:	e02e      	b.n	8005198 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005146:	895b      	ldrh	r3, [r3, #10]
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	fbb3 f2f2 	udiv	r2, r3, r2
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800515e:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005176:	895b      	ldrh	r3, [r3, #10]
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	fbb3 f1f2 	udiv	r1, r3, r2
 8005184:	fb01 f202 	mul.w	r2, r1, r2
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	015b      	lsls	r3, r3, #5
 800518c:	4403      	add	r3, r0
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005194:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b0:	88db      	ldrh	r3, [r3, #6]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <dir_next+0x2a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <dir_next+0x2e>
		return FR_NO_FILE;
 80051ca:	2304      	movs	r3, #4
 80051cc:	e12e      	b.n	800542c <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051da:	895b      	ldrh	r3, [r3, #10]
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80051e8:	fb01 f202 	mul.w	r2, r1, r2
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 80fa 	bne.w	80053e8 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	3301      	adds	r3, #1
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005204:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10d      	bne.n	800522e <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521e:	891b      	ldrh	r3, [r3, #8]
 8005220:	461a      	mov	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4293      	cmp	r3, r2
 8005226:	f0c0 80df 	bcc.w	80053e8 <dir_next+0x248>
				return FR_NO_FILE;
 800522a:	2304      	movs	r3, #4
 800522c:	e0fe      	b.n	800542c <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800523a:	895b      	ldrh	r3, [r3, #10]
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	fbb3 f3f2 	udiv	r3, r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005254:	7892      	ldrb	r2, [r2, #2]
 8005256:	3a01      	subs	r2, #1
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 80c4 	bne.w	80053e8 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7ff fb2f 	bl	80048d6 <get_fat>
 8005278:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d801      	bhi.n	8005284 <dir_next+0xe4>
 8005280:	2302      	movs	r3, #2
 8005282:	e0d3      	b.n	800542c <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800528a:	d101      	bne.n	8005290 <dir_next+0xf0>
 800528c:	2301      	movs	r3, #1
 800528e:	e0cd      	b.n	800542c <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	f0c0 808e 	bcc.w	80053c2 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <dir_next+0x110>
 80052ac:	2304      	movs	r3, #4
 80052ae:	e0bd      	b.n	800542c <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f7ff fdb6 	bl	8004e34 <create_chain>
 80052c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <dir_next+0x134>
 80052d0:	2307      	movs	r3, #7
 80052d2:	e0ab      	b.n	800542c <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <dir_next+0x13e>
 80052da:	2302      	movs	r3, #2
 80052dc:	e0a6      	b.n	800542c <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052e4:	d101      	bne.n	80052ea <dir_next+0x14a>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0a0      	b.n	800542c <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff f988 	bl	8004608 <sync_window>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <dir_next+0x162>
 80052fe:	2301      	movs	r3, #1
 8005300:	e094      	b.n	800542c <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005318:	895b      	ldrh	r3, [r3, #10]
 800531a:	461a      	mov	r2, r3
 800531c:	2100      	movs	r1, #0
 800531e:	f7fe ff5b 	bl	80041d8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005330:	681c      	ldr	r4, [r3, #0]
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	4610      	mov	r0, r2
 8005336:	f7ff faaa 	bl	800488e <clust2sect>
 800533a:	4603      	mov	r3, r0
 800533c:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8005340:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	e021      	b.n	800538c <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005354:	2201      	movs	r2, #1
 8005356:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff f951 	bl	8004608 <sync_window>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <dir_next+0x1d0>
 800536c:	2301      	movs	r3, #1
 800536e:	e05d      	b.n	800542c <dir_next+0x28c>
						dp->fs->winsect++;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800537c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800537e:	3201      	adds	r2, #1
 8005380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005384:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3301      	adds	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005398:	789b      	ldrb	r3, [r3, #2]
 800539a:	461a      	mov	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4293      	cmp	r3, r2
 80053a0:	d3d2      	bcc.n	8005348 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1acb      	subs	r3, r1, r3
 80053bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053c8:	461a      	mov	r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6979      	ldr	r1, [r7, #20]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fa58 	bl	800488e <clust2sect>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f2:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800540a:	895b      	ldrh	r3, [r3, #10]
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	fbb3 f1f2 	udiv	r1, r3, r2
 8005418:	fb01 f202 	mul.w	r2, r1, r2
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	015b      	lsls	r3, r3, #5
 8005420:	4403      	add	r3, r0
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005428:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	bd90      	pop	{r4, r7, pc}

08005434 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800543e:	2100      	movs	r1, #0
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fddf 	bl	8005004 <dir_sdi>
 8005446:	4603      	mov	r3, r0
 8005448:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d135      	bne.n	80054bc <dir_alloc+0x88>
		n = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f7ff f920 	bl	80046ac <move_window>
 800546c:	4603      	mov	r3, r0
 800546e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d121      	bne.n	80054ba <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2be5      	cmp	r3, #229	@ 0xe5
 8005482:	d006      	beq.n	8005492 <dir_alloc+0x5e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	3301      	adds	r3, #1
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d102      	bne.n	80054a6 <dir_alloc+0x72>
 80054a0:	e00c      	b.n	80054bc <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80054a6:	2101      	movs	r1, #1
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fe79 	bl	80051a0 <dir_next>
 80054ae:	4603      	mov	r3, r0
 80054b0:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0cd      	beq.n	8005454 <dir_alloc+0x20>
 80054b8:	e000      	b.n	80054bc <dir_alloc+0x88>
			if (res != FR_OK) break;
 80054ba:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d101      	bne.n	80054c6 <dir_alloc+0x92>
 80054c2:	2307      	movs	r3, #7
 80054c4:	73fb      	strb	r3, [r7, #15]
	return res;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	331b      	adds	r3, #27
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	b21a      	sxth	r2, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	331a      	adds	r3, #26
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	b21b      	sxth	r3, r3
 80054ec:	4313      	orrs	r3, r2
 80054ee:	b21b      	sxth	r3, r3
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d10f      	bne.n	8005520 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	3315      	adds	r3, #21
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	b21a      	sxth	r2, r3
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b21b      	sxth	r3, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	b21b      	sxth	r3, r3
 8005516:	b29b      	uxth	r3, r3
 8005518:	041b      	lsls	r3, r3, #16
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

	return cl;
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	331a      	adds	r3, #26
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	b29a      	uxth	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	331b      	adds	r3, #27
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	0c1a      	lsrs	r2, r3, #16
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3314      	adds	r3, #20
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	b29b      	uxth	r3, r3
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3315      	adds	r3, #21
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558a:	1e5a      	subs	r2, r3, #1
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005598:	2300      	movs	r3, #0
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	2301      	movs	r3, #1
 800559e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80055a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005650 <cmp_lfn+0xd8>)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4413      	add	r3, r2
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	b21a      	sxth	r2, r3
 80055b4:	4926      	ldr	r1, [pc, #152]	@ (8005650 <cmp_lfn+0xd8>)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	440b      	add	r3, r1
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	440b      	add	r3, r1
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	4313      	orrs	r3, r2
 80055c8:	b21b      	sxth	r3, r3
 80055ca:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d019      	beq.n	8005606 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80055d2:	89bb      	ldrh	r3, [r7, #12]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f002 fe55 	bl	8008284 <ff_wtoupper>
 80055da:	4603      	mov	r3, r0
 80055dc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80055e2:	d80e      	bhi.n	8005602 <cmp_lfn+0x8a>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	617a      	str	r2, [r7, #20]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f002 fe46 	bl	8008284 <ff_wtoupper>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	89fb      	ldrh	r3, [r7, #14]
 80055fe:	4293      	cmp	r3, r2
 8005600:	d008      	beq.n	8005614 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8005602:	2300      	movs	r3, #0
 8005604:	e01f      	b.n	8005646 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005606:	89bb      	ldrh	r3, [r7, #12]
 8005608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800560c:	4293      	cmp	r3, r2
 800560e:	d001      	beq.n	8005614 <cmp_lfn+0x9c>
 8005610:	2300      	movs	r3, #0
 8005612:	e018      	b.n	8005646 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	3301      	adds	r3, #1
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d9bf      	bls.n	80055a0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <cmp_lfn+0xcc>
 800562c:	89fb      	ldrh	r3, [r7, #14]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <cmp_lfn+0xcc>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <cmp_lfn+0xcc>
		return 0;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8005644:	2301      	movs	r3, #1
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	0800cfa8 	.word	0x0800cfa8

08005654 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	@ 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4611      	mov	r1, r2
 8005660:	461a      	mov	r2, r3
 8005662:	460b      	mov	r3, r1
 8005664:	71fb      	strb	r3, [r7, #7]
 8005666:	4613      	mov	r3, r2
 8005668:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	330d      	adds	r3, #13
 800566e:	79ba      	ldrb	r2, [r7, #6]
 8005670:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	330b      	adds	r3, #11
 8005676:	220f      	movs	r2, #15
 8005678:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	330c      	adds	r3, #12
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	331a      	adds	r3, #26
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	331b      	adds	r3, #27
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	82fb      	strh	r3, [r7, #22]
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80056aa:	8afb      	ldrh	r3, [r7, #22]
 80056ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d007      	beq.n	80056c4 <fit_lfn+0x70>
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	61fa      	str	r2, [r7, #28]
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80056c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005738 <fit_lfn+0xe4>)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	4413      	add	r3, r2
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	8afa      	ldrh	r2, [r7, #22]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	8afb      	ldrh	r3, [r7, #22]
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	b299      	uxth	r1, r3
 80056de:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <fit_lfn+0xe4>)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	4413      	add	r3, r2
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	3301      	adds	r3, #1
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	4413      	add	r3, r2
 80056ec:	b2ca      	uxtb	r2, r1
 80056ee:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80056f0:	8afb      	ldrh	r3, [r7, #22]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <fit_lfn+0xa8>
 80056f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80056fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	3301      	adds	r3, #1
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	d9d0      	bls.n	80056aa <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005708:	8afb      	ldrh	r3, [r7, #22]
 800570a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800570e:	4293      	cmp	r3, r2
 8005710:	d006      	beq.n	8005720 <fit_lfn+0xcc>
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d103      	bne.n	8005728 <fit_lfn+0xd4>
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005726:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	79fa      	ldrb	r2, [r7, #7]
 800572c:	701a      	strb	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	3724      	adds	r7, #36	@ 0x24
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	0800cfa8 	.word	0x0800cfa8

0800573c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08c      	sub	sp, #48	@ 0x30
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800574a:	220b      	movs	r2, #11
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7fe fd24 	bl	800419c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b05      	cmp	r3, #5
 8005758:	d92b      	bls.n	80057b2 <gen_numname+0x76>
		sr = seq;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800575e:	e022      	b.n	80057a6 <gen_numname+0x6a>
			wc = *lfn++;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	1c9a      	adds	r2, r3, #2
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800576a:	2300      	movs	r3, #0
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800576e:	e017      	b.n	80057a0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	005a      	lsls	r2, r3, #1
 8005774:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800577e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <gen_numname+0x5e>
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005794:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005798:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	3301      	adds	r3, #1
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	d9e4      	bls.n	8005770 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1d8      	bne.n	8005760 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80057b2:	2307      	movs	r3, #7
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	3330      	adds	r3, #48	@ 0x30
 80057c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80057c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057ca:	2b39      	cmp	r3, #57	@ 0x39
 80057cc:	d904      	bls.n	80057d8 <gen_numname+0x9c>
 80057ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057d2:	3307      	adds	r3, #7
 80057d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	1e5a      	subs	r2, r3, #1
 80057dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80057de:	3330      	adds	r3, #48	@ 0x30
 80057e0:	443b      	add	r3, r7
 80057e2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80057e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	091b      	lsrs	r3, r3, #4
 80057ee:	603b      	str	r3, [r7, #0]
	} while (seq);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1df      	bne.n	80057b6 <gen_numname+0x7a>
	ns[i] = '~';
 80057f6:	f107 0214 	add.w	r2, r7, #20
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	4413      	add	r3, r2
 80057fe:	227e      	movs	r2, #126	@ 0x7e
 8005800:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005802:	2300      	movs	r3, #0
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
 8005806:	e002      	b.n	800580e <gen_numname+0xd2>
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	3301      	adds	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
 800580e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005812:	429a      	cmp	r2, r3
 8005814:	d205      	bcs.n	8005822 <gen_numname+0xe6>
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	4413      	add	r3, r2
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b20      	cmp	r3, #32
 8005820:	d1f2      	bne.n	8005808 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	2b07      	cmp	r3, #7
 8005826:	d807      	bhi.n	8005838 <gen_numname+0xfc>
 8005828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800582e:	3330      	adds	r3, #48	@ 0x30
 8005830:	443b      	add	r3, r7
 8005832:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005836:	e000      	b.n	800583a <gen_numname+0xfe>
 8005838:	2120      	movs	r1, #32
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	460a      	mov	r2, r1
 8005846:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	2b07      	cmp	r3, #7
 800584c:	d9e9      	bls.n	8005822 <gen_numname+0xe6>
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	3730      	adds	r7, #48	@ 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005864:	230b      	movs	r3, #11
 8005866:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	0852      	lsrs	r2, r2, #1
 800586e:	01db      	lsls	r3, r3, #7
 8005870:	4313      	orrs	r3, r2
 8005872:	b2da      	uxtb	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	1c59      	adds	r1, r3, #1
 8005878:	6079      	str	r1, [r7, #4]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	4413      	add	r3, r2
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	3b01      	subs	r3, #1
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1ed      	bne.n	8005868 <sum_sfn+0x10>
	return sum;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80058a0:	2100      	movs	r1, #0
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fbae 	bl	8005004 <dir_sdi>
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <dir_find+0x1e>
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	e0b8      	b.n	8005a28 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80058b6:	23ff      	movs	r3, #255	@ 0xff
 80058b8:	753b      	strb	r3, [r7, #20]
 80058ba:	7d3b      	ldrb	r3, [r7, #20]
 80058bc:	757b      	strb	r3, [r7, #21]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058c8:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7fe fee5 	bl	80046ac <move_window>
 80058e2:	4603      	mov	r3, r0
 80058e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f040 8097 	bne.w	8005a1c <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80058fe:	7dbb      	ldrb	r3, [r7, #22]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <dir_find+0x72>
 8005904:	2304      	movs	r3, #4
 8005906:	75fb      	strb	r3, [r7, #23]
 8005908:	e08d      	b.n	8005a26 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	330b      	adds	r3, #11
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005914:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005916:	7dbb      	ldrb	r3, [r7, #22]
 8005918:	2be5      	cmp	r3, #229	@ 0xe5
 800591a:	d007      	beq.n	800592c <dir_find+0x94>
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <dir_find+0xa6>
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d008      	beq.n	800593e <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800592c:	23ff      	movs	r3, #255	@ 0xff
 800592e:	757b      	strb	r3, [r7, #21]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800593a:	849a      	strh	r2, [r3, #36]	@ 0x24
 800593c:	e063      	b.n	8005a06 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b0f      	cmp	r3, #15
 8005942:	d137      	bne.n	80059b4 <dir_find+0x11c>
				if (dp->lfn) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d05a      	beq.n	8005a06 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005950:	7dbb      	ldrb	r3, [r7, #22]
 8005952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d010      	beq.n	800597c <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	7b5b      	ldrb	r3, [r3, #13]
 800595e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005960:	7dbb      	ldrb	r3, [r7, #22]
 8005962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005966:	75bb      	strb	r3, [r7, #22]
 8005968:	7dbb      	ldrb	r3, [r7, #22]
 800596a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005972:	88da      	ldrh	r2, [r3, #6]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800597a:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800597c:	7dba      	ldrb	r2, [r7, #22]
 800597e:	7d7b      	ldrb	r3, [r7, #21]
 8005980:	429a      	cmp	r2, r3
 8005982:	d114      	bne.n	80059ae <dir_find+0x116>
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	330d      	adds	r3, #13
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	7d3a      	ldrb	r2, [r7, #20]
 800598c:	429a      	cmp	r2, r3
 800598e:	d10e      	bne.n	80059ae <dir_find+0x116>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	6939      	ldr	r1, [r7, #16]
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fdec 	bl	8005578 <cmp_lfn>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <dir_find+0x116>
 80059a6:	7d7b      	ldrb	r3, [r7, #21]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	e000      	b.n	80059b0 <dir_find+0x118>
 80059ae:	23ff      	movs	r3, #255	@ 0xff
 80059b0:	757b      	strb	r3, [r7, #21]
 80059b2:	e028      	b.n	8005a06 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80059b4:	7d7b      	ldrb	r3, [r7, #21]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <dir_find+0x132>
 80059ba:	6938      	ldr	r0, [r7, #16]
 80059bc:	f7ff ff4c 	bl	8005858 <sum_sfn>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	7d3b      	ldrb	r3, [r7, #20]
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02a      	beq.n	8005a20 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	330b      	adds	r3, #11
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <dir_find+0x15e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	220b      	movs	r2, #11
 80059e8:	4619      	mov	r1, r3
 80059ea:	6938      	ldr	r0, [r7, #16]
 80059ec:	f7fe fc0e 	bl	800420c <mem_cmp>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d016      	beq.n	8005a24 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80059f6:	23ff      	movs	r3, #255	@ 0xff
 80059f8:	757b      	strb	r3, [r7, #21]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a04:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005a06:	2100      	movs	r1, #0
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fbc9 	bl	80051a0 <dir_next>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f43f af58 	beq.w	80058ca <dir_find+0x32>
 8005a1a:	e004      	b.n	8005a26 <dir_find+0x18e>
		if (res != FR_OK) break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005a24:	bf00      	nop

	return res;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	@ 0x30
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	220c      	movs	r2, #12
 8005a52:	6a39      	ldr	r1, [r7, #32]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe fba1 	bl	800419c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d03b      	beq.n	8005adc <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	330b      	adds	r3, #11
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a72:	461a      	mov	r2, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8005a78:	2301      	movs	r3, #1
 8005a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a7c:	e013      	b.n	8005aa6 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005a7e:	f107 010c 	add.w	r1, r7, #12
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	6a38      	ldr	r0, [r7, #32]
 8005a88:	f7ff fe58 	bl	800573c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff ff03 	bl	8005898 <dir_find>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005a98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d106      	bne.n	8005aae <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa8:	2b63      	cmp	r3, #99	@ 0x63
 8005aaa:	d9e8      	bls.n	8005a7e <dir_register+0x4e>
 8005aac:	e000      	b.n	8005ab0 <dir_register+0x80>
			if (res != FR_OK) break;
 8005aae:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	2b64      	cmp	r3, #100	@ 0x64
 8005ab4:	d101      	bne.n	8005aba <dir_register+0x8a>
 8005ab6:	2307      	movs	r3, #7
 8005ab8:	e0d8      	b.n	8005c6c <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d002      	beq.n	8005ac8 <dir_register+0x98>
 8005ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ac6:	e0d1      	b.n	8005c6c <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	330b      	adds	r3, #11
 8005acc:	7dfa      	ldrb	r2, [r7, #23]
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d014      	beq.n	8005b10 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aea:	e002      	b.n	8005af2 <dir_register+0xc2>
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	3301      	adds	r3, #1
 8005af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f5      	bne.n	8005aec <dir_register+0xbc>
		nent = (n + 25) / 13;
 8005b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b02:	3319      	adds	r3, #25
 8005b04:	4a5b      	ldr	r2, [pc, #364]	@ (8005c74 <dir_register+0x244>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b0e:	e001      	b.n	8005b14 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005b10:	2301      	movs	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005b14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff fc8c 	bl	8005434 <dir_alloc>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d15b      	bne.n	8005be2 <dir_register+0x1b2>
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d055      	beq.n	8005be2 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b3c:	88db      	ldrh	r3, [r3, #6]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fa5c 	bl	8005004 <dir_sdi>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005b52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d143      	bne.n	8005be2 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff fe78 	bl	8005858 <sum_sfn>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fe fd94 	bl	80046ac <move_window>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d126      	bne.n	8005be0 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b98:	6a18      	ldr	r0, [r3, #32]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba0:	6959      	ldr	r1, [r3, #20]
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	7efb      	ldrb	r3, [r7, #27]
 8005ba8:	f7ff fd54 	bl	8005654 <fit_lfn>
				dp->fs->wflag = 1;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb8:	2201      	movs	r2, #1
 8005bba:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff faee 	bl	80051a0 <dir_next>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d107      	bne.n	8005be2 <dir_register+0x1b2>
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1c6      	bne.n	8005b6c <dir_register+0x13c>
 8005bde:	e000      	b.n	8005be2 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8005be0:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005be2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d13e      	bne.n	8005c68 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fe fd55 	bl	80046ac <move_window>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005c08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d12b      	bne.n	8005c68 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fadb 	bl	80041d8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c28:	6958      	ldr	r0, [r3, #20]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	220b      	movs	r2, #11
 8005c34:	4619      	mov	r1, r3
 8005c36:	f7fe fab1 	bl	800419c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	330b      	adds	r3, #11
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	f002 0218 	and.w	r2, r2, #24
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c64:	2201      	movs	r2, #1
 8005c66:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005c68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3730      	adds	r7, #48	@ 0x30
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	4ec4ec4f 	.word	0x4ec4ec4f

08005c78 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	@ 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	e002      	b.n	8005c90 <create_name+0x18>
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c96:	d0f8      	beq.n	8005c8a <create_name+0x12>
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c9e:	d0f4      	beq.n	8005c8a <create_name+0x12>
	lfn = dp->lfn;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	61ba      	str	r2, [r7, #24]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005cc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cc2:	2b1f      	cmp	r3, #31
 8005cc4:	d92f      	bls.n	8005d26 <create_name+0xae>
 8005cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005cca:	d02c      	beq.n	8005d26 <create_name+0xae>
 8005ccc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cce:	2b5c      	cmp	r3, #92	@ 0x5c
 8005cd0:	d029      	beq.n	8005d26 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2bfe      	cmp	r3, #254	@ 0xfe
 8005cd6:	d901      	bls.n	8005cdc <create_name+0x64>
			return FR_INVALID_NAME;
 8005cd8:	2306      	movs	r3, #6
 8005cda:	e186      	b.n	8005fea <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005cdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005ce2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f002 fa92 	bl	8008210 <ff_convert>
 8005cec:	4603      	mov	r3, r0
 8005cee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005cf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <create_name+0x82>
 8005cf6:	2306      	movs	r3, #6
 8005cf8:	e177      	b.n	8005fea <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cfe:	d809      	bhi.n	8005d14 <create_name+0x9c>
 8005d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d02:	4619      	mov	r1, r3
 8005d04:	488e      	ldr	r0, [pc, #568]	@ (8005f40 <create_name+0x2c8>)
 8005d06:	f7fe faa7 	bl	8004258 <chk_chr>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <create_name+0x9c>
			return FR_INVALID_NAME;
 8005d10:	2306      	movs	r3, #6
 8005d12:	e16a      	b.n	8005fea <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	617a      	str	r2, [r7, #20]
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d22:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005d24:	e7c5      	b.n	8005cb2 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	441a      	add	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005d30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d32:	2b1f      	cmp	r3, #31
 8005d34:	d801      	bhi.n	8005d3a <create_name+0xc2>
 8005d36:	2304      	movs	r3, #4
 8005d38:	e000      	b.n	8005d3c <create_name+0xc4>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8005d40:	e011      	b.n	8005d66 <create_name+0xee>
		w = lfn[di - 1];
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005d54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d002      	beq.n	8005d60 <create_name+0xe8>
 8005d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d5e:	d106      	bne.n	8005d6e <create_name+0xf6>
		di--;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ea      	bne.n	8005d42 <create_name+0xca>
 8005d6c:	e000      	b.n	8005d70 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005d6e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <create_name+0x102>
 8005d76:	2306      	movs	r3, #6
 8005d78:	e137      	b.n	8005fea <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	220b      	movs	r2, #11
 8005d90:	2120      	movs	r1, #32
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fa20 	bl	80041d8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e002      	b.n	8005da4 <create_name+0x12c>
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	3301      	adds	r3, #1
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d0f5      	beq.n	8005d9e <create_name+0x126>
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dbe:	d0ee      	beq.n	8005d9e <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <create_name+0x162>
 8005dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dca:	f043 0303 	orr.w	r3, r3, #3
 8005dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005dd2:	e002      	b.n	8005dda <create_name+0x162>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <create_name+0x17c>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005de6:	3b01      	subs	r3, #1
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df2:	d1ef      	bne.n	8005dd4 <create_name+0x15c>

	b = i = 0; ni = 8;
 8005df4:	2300      	movs	r3, #0
 8005df6:	623b      	str	r3, [r7, #32]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005dfe:	2308      	movs	r3, #8
 8005e00:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	61ba      	str	r2, [r7, #24]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005e12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8091 	beq.w	8005f3c <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d006      	beq.n	8005e2e <create_name+0x1b6>
 8005e20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e24:	d10a      	bne.n	8005e3c <create_name+0x1c4>
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d006      	beq.n	8005e3c <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8005e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e32:	f043 0303 	orr.w	r3, r3, #3
 8005e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e3a:	e07e      	b.n	8005f3a <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d203      	bcs.n	8005e4c <create_name+0x1d4>
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d123      	bne.n	8005e94 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b0b      	cmp	r3, #11
 8005e50:	d106      	bne.n	8005e60 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8005e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e56:	f043 0303 	orr.w	r3, r3, #3
 8005e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e5e:	e076      	b.n	8005f4e <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d005      	beq.n	8005e74 <create_name+0x1fc>
 8005e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e6c:	f043 0303 	orr.w	r3, r3, #3
 8005e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d867      	bhi.n	8005f4c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	2308      	movs	r3, #8
 8005e82:	623b      	str	r3, [r7, #32]
 8005e84:	230b      	movs	r3, #11
 8005e86:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005e88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005e92:	e052      	b.n	8005f3a <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005e94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e98:	d914      	bls.n	8005ec4 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005e9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f002 f9b6 	bl	8008210 <ff_convert>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005ea8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d004      	beq.n	8005eb8 <create_name+0x240>
 8005eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005eb0:	3b80      	subs	r3, #128	@ 0x80
 8005eb2:	4a24      	ldr	r2, [pc, #144]	@ (8005f44 <create_name+0x2cc>)
 8005eb4:	5cd3      	ldrb	r3, [r2, r3]
 8005eb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ebc:	f043 0302 	orr.w	r3, r3, #2
 8005ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005ec4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <create_name+0x262>
 8005eca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ecc:	4619      	mov	r1, r3
 8005ece:	481e      	ldr	r0, [pc, #120]	@ (8005f48 <create_name+0x2d0>)
 8005ed0:	f7fe f9c2 	bl	8004258 <chk_chr>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005eda:	235f      	movs	r3, #95	@ 0x5f
 8005edc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ee2:	f043 0303 	orr.w	r3, r3, #3
 8005ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005eea:	e01b      	b.n	8005f24 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005eec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005eee:	2b40      	cmp	r3, #64	@ 0x40
 8005ef0:	d909      	bls.n	8005f06 <create_name+0x28e>
 8005ef2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ef4:	2b5a      	cmp	r3, #90	@ 0x5a
 8005ef6:	d806      	bhi.n	8005f06 <create_name+0x28e>
					b |= 2;
 8005ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005f04:	e00e      	b.n	8005f24 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005f06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f08:	2b60      	cmp	r3, #96	@ 0x60
 8005f0a:	d90b      	bls.n	8005f24 <create_name+0x2ac>
 8005f0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f0e:	2b7a      	cmp	r3, #122	@ 0x7a
 8005f10:	d808      	bhi.n	8005f24 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8005f12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005f1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f20:	3b20      	subs	r3, #32
 8005f22:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	1c59      	adds	r1, r3, #1
 8005f30:	6239      	str	r1, [r7, #32]
 8005f32:	4413      	add	r3, r2
 8005f34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005f3a:	e762      	b.n	8005e02 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8005f3c:	bf00      	nop
 8005f3e:	e006      	b.n	8005f4e <create_name+0x2d6>
 8005f40:	0800c9e0 	.word	0x0800c9e0
 8005f44:	0800cf28 	.word	0x0800cf28
 8005f48:	0800c9ec 	.word	0x0800c9ec
			if (si > di) break;			/* No extension */
 8005f4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2be5      	cmp	r3, #229	@ 0xe5
 8005f5a:	d105      	bne.n	8005f68 <create_name+0x2f0>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	2205      	movs	r2, #5
 8005f66:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d104      	bne.n	8005f78 <create_name+0x300>
 8005f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005f78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f7c:	f003 030c 	and.w	r3, r3, #12
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	d005      	beq.n	8005f90 <create_name+0x318>
 8005f84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d105      	bne.n	8005f9c <create_name+0x324>
		cf |= NS_LFN;
 8005f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f94:	f043 0302 	orr.w	r3, r3, #2
 8005f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d117      	bne.n	8005fd8 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d105      	bne.n	8005fc0 <create_name+0x348>
 8005fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fb8:	f043 0310 	orr.w	r3, r3, #16
 8005fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fc4:	f003 030c 	and.w	r3, r3, #12
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d105      	bne.n	8005fd8 <create_name+0x360>
 8005fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	330b      	adds	r3, #11
 8005fe2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005fe6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005fe8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3728      	adds	r7, #40	@ 0x28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop

08005ff4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b2f      	cmp	r3, #47	@ 0x2f
 8006004:	d003      	beq.n	800600e <follow_path+0x1a>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b5c      	cmp	r3, #92	@ 0x5c
 800600c:	d102      	bne.n	8006014 <follow_path+0x20>
		path++;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800601a:	461a      	mov	r2, r3
 800601c:	2300      	movs	r3, #0
 800601e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b1f      	cmp	r3, #31
 8006026:	d80c      	bhi.n	8006042 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006028:	2100      	movs	r1, #0
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fe ffea 	bl	8005004 <dir_sdi>
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800603a:	461a      	mov	r2, r3
 800603c:	2300      	movs	r3, #0
 800603e:	6153      	str	r3, [r2, #20]
 8006040:	e049      	b.n	80060d6 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006042:	463b      	mov	r3, r7
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fe16 	bl	8005c78 <create_name>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d13a      	bne.n	80060cc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fc1e 	bl	8005898 <dir_find>
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	7adb      	ldrb	r3, [r3, #11]
 800606a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	2b04      	cmp	r3, #4
 8006076:	d12b      	bne.n	80060d0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d126      	bne.n	80060d0 <follow_path+0xdc>
 8006082:	2305      	movs	r3, #5
 8006084:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006086:	e023      	b.n	80060d0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006088:	7bbb      	ldrb	r3, [r7, #14]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d120      	bne.n	80060d4 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	330b      	adds	r3, #11
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80060aa:	2305      	movs	r3, #5
 80060ac:	73fb      	strb	r3, [r7, #15]
 80060ae:	e012      	b.n	80060d6 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fa08 	bl	80054d0 <ld_clust>
 80060c0:	4602      	mov	r2, r0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060c8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80060ca:	e7ba      	b.n	8006042 <follow_path+0x4e>
			if (res != FR_OK) break;
 80060cc:	bf00      	nop
 80060ce:	e002      	b.n	80060d6 <follow_path+0xe2>
				break;
 80060d0:	bf00      	nop
 80060d2:	e000      	b.n	80060d6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80060d4:	bf00      	nop
		}
	}

	return res;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d031      	beq.n	800615a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	e002      	b.n	8006104 <get_ldnumber+0x24>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	3301      	adds	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b1f      	cmp	r3, #31
 800610a:	d903      	bls.n	8006114 <get_ldnumber+0x34>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b3a      	cmp	r3, #58	@ 0x3a
 8006112:	d1f4      	bne.n	80060fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b3a      	cmp	r3, #58	@ 0x3a
 800611a:	d11c      	bne.n	8006156 <get_ldnumber+0x76>
			tp = *path;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	60fa      	str	r2, [r7, #12]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	3b30      	subs	r3, #48	@ 0x30
 800612c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b09      	cmp	r3, #9
 8006132:	d80e      	bhi.n	8006152 <get_ldnumber+0x72>
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	429a      	cmp	r2, r3
 800613a:	d10a      	bne.n	8006152 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d107      	bne.n	8006152 <get_ldnumber+0x72>
					vol = (int)i;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	3301      	adds	r3, #1
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	e002      	b.n	800615c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800615a:	693b      	ldr	r3, [r7, #16]
}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr
	...

08006168 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006178:	2200      	movs	r2, #0
 800617a:	711a      	strb	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006182:	461a      	mov	r2, r3
 8006184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006188:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fe fa8d 	bl	80046ac <move_window>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <check_fs+0x34>
		return 3;
 8006198:	2303      	movs	r3, #3
 800619a:	e04a      	b.n	8006232 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80061a2:	3301      	adds	r3, #1
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	b21a      	sxth	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80061b0:	b21b      	sxth	r3, r3
 80061b2:	4313      	orrs	r3, r2
 80061b4:	b21b      	sxth	r3, r3
 80061b6:	4a21      	ldr	r2, [pc, #132]	@ (800623c <check_fs+0xd4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d001      	beq.n	80061c0 <check_fs+0x58>
		return 2;
 80061bc:	2302      	movs	r3, #2
 80061be:	e038      	b.n	8006232 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3336      	adds	r3, #54	@ 0x36
 80061c4:	3303      	adds	r3, #3
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	061a      	lsls	r2, r3, #24
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3336      	adds	r3, #54	@ 0x36
 80061ce:	3302      	adds	r3, #2
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3336      	adds	r3, #54	@ 0x36
 80061da:	3301      	adds	r3, #1
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	4313      	orrs	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80061ee:	4a14      	ldr	r2, [pc, #80]	@ (8006240 <check_fs+0xd8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d101      	bne.n	80061f8 <check_fs+0x90>
		return 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	e01c      	b.n	8006232 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3352      	adds	r3, #82	@ 0x52
 80061fc:	3303      	adds	r3, #3
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	061a      	lsls	r2, r3, #24
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3352      	adds	r3, #82	@ 0x52
 8006206:	3302      	adds	r3, #2
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3352      	adds	r3, #82	@ 0x52
 8006212:	3301      	adds	r3, #1
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	4313      	orrs	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8006220:	4313      	orrs	r3, r2
 8006222:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006226:	4a06      	ldr	r2, [pc, #24]	@ (8006240 <check_fs+0xd8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <check_fs+0xc8>
		return 0;
 800622c:	2300      	movs	r3, #0
 800622e:	e000      	b.n	8006232 <check_fs+0xca>

	return 1;
 8006230:	2301      	movs	r3, #1
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	ffffaa55 	.word	0xffffaa55
 8006240:	00544146 	.word	0x00544146

08006244 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b096      	sub	sp, #88	@ 0x58
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006258:	68b8      	ldr	r0, [r7, #8]
 800625a:	f7ff ff41 	bl	80060e0 <get_ldnumber>
 800625e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006262:	2b00      	cmp	r3, #0
 8006264:	da01      	bge.n	800626a <find_volume+0x26>
 8006266:	230b      	movs	r3, #11
 8006268:	e311      	b.n	800688e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800626a:	4a98      	ldr	r2, [pc, #608]	@ (80064cc <find_volume+0x288>)
 800626c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800626e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006272:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <find_volume+0x3a>
 800627a:	230c      	movs	r3, #12
 800627c:	e307      	b.n	800688e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006282:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01c      	beq.n	80062ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fd fee1 	bl	8004060 <disk_status>
 800629e:	4603      	mov	r3, r0
 80062a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80062a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10c      	bne.n	80062ca <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <find_volume+0x82>
 80062b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80062c2:	230a      	movs	r3, #10
 80062c4:	e2e3      	b.n	800688e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80062c6:	2300      	movs	r3, #0
 80062c8:	e2e1      	b.n	800688e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80062ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80062d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fd fed3 	bl	8004094 <disk_initialize>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80062f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006300:	2303      	movs	r3, #3
 8006302:	e2c4      	b.n	800688e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <find_volume+0xd6>
 800630a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8006316:	230a      	movs	r3, #10
 8006318:	e2b9      	b.n	800688e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006320:	7858      	ldrb	r0, [r3, #1]
 8006322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006328:	330a      	adds	r3, #10
 800632a:	461a      	mov	r2, r3
 800632c:	2102      	movs	r1, #2
 800632e:	f7fd ff17 	bl	8004160 <disk_ioctl>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10d      	bne.n	8006354 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800633e:	895b      	ldrh	r3, [r3, #10]
 8006340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006344:	d306      	bcc.n	8006354 <find_volume+0x110>
 8006346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800634c:	895b      	ldrh	r3, [r3, #10]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006352:	d901      	bls.n	8006358 <find_volume+0x114>
 8006354:	2301      	movs	r3, #1
 8006356:	e29a      	b.n	800688e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800635c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800635e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006360:	f7ff ff02 	bl	8006168 <check_fs>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800636a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800636e:	2b01      	cmp	r3, #1
 8006370:	d153      	bne.n	800641a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006372:	2300      	movs	r3, #0
 8006374:	643b      	str	r3, [r7, #64]	@ 0x40
 8006376:	e028      	b.n	80063ca <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800637a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006382:	4413      	add	r3, r2
 8006384:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	3304      	adds	r3, #4
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d012      	beq.n	80063b6 <find_volume+0x172>
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	330b      	adds	r3, #11
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	061a      	lsls	r2, r3, #24
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	330a      	adds	r3, #10
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	431a      	orrs	r2, r3
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	3309      	adds	r3, #9
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	4313      	orrs	r3, r2
 80063ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ae:	3208      	adds	r2, #8
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	e000      	b.n	80063b8 <find_volume+0x174>
 80063b6:	2200      	movs	r2, #0
 80063b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	3358      	adds	r3, #88	@ 0x58
 80063be:	443b      	add	r3, r7
 80063c0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80063c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063c6:	3301      	adds	r3, #1
 80063c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d9d3      	bls.n	8006378 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80063d0:	2300      	movs	r3, #0
 80063d2:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80063d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <find_volume+0x19c>
 80063da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063dc:	3b01      	subs	r3, #1
 80063de:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80063e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	3358      	adds	r3, #88	@ 0x58
 80063e6:	443b      	add	r3, r7
 80063e8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80063ec:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80063ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <find_volume+0x1bc>
 80063f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063f8:	f7ff feb6 	bl	8006168 <check_fs>
 80063fc:	4603      	mov	r3, r0
 80063fe:	e000      	b.n	8006402 <find_volume+0x1be>
 8006400:	2302      	movs	r3, #2
 8006402:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006406:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <find_volume+0x1d6>
 800640e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006410:	3301      	adds	r3, #1
 8006412:	643b      	str	r3, [r7, #64]	@ 0x40
 8006414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006416:	2b03      	cmp	r3, #3
 8006418:	d9e2      	bls.n	80063e0 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800641a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800641e:	2b03      	cmp	r3, #3
 8006420:	d101      	bne.n	8006426 <find_volume+0x1e2>
 8006422:	2301      	movs	r3, #1
 8006424:	e233      	b.n	800688e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006426:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <find_volume+0x1ee>
 800642e:	230d      	movs	r3, #13
 8006430:	e22d      	b.n	800688e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006434:	7b1b      	ldrb	r3, [r3, #12]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	b21a      	sxth	r2, r3
 800643a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643c:	7adb      	ldrb	r3, [r3, #11]
 800643e:	b21b      	sxth	r3, r3
 8006440:	4313      	orrs	r3, r2
 8006442:	b21a      	sxth	r2, r3
 8006444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800644a:	895b      	ldrh	r3, [r3, #10]
 800644c:	b21b      	sxth	r3, r3
 800644e:	429a      	cmp	r2, r3
 8006450:	d001      	beq.n	8006456 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8006452:	230d      	movs	r3, #13
 8006454:	e21b      	b.n	800688e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	7ddb      	ldrb	r3, [r3, #23]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	b21a      	sxth	r2, r3
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	7d9b      	ldrb	r3, [r3, #22]
 8006462:	b21b      	sxth	r3, r3
 8006464:	4313      	orrs	r3, r2
 8006466:	b21b      	sxth	r3, r3
 8006468:	b29b      	uxth	r3, r3
 800646a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800646c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d112      	bne.n	8006498 <find_volume+0x254>
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006478:	061a      	lsls	r2, r3, #24
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	431a      	orrs	r2, r3
 8006484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006486:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800648a:	021b      	lsls	r3, r3, #8
 800648c:	4313      	orrs	r3, r2
 800648e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006490:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8006494:	4313      	orrs	r3, r2
 8006496:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800649e:	461a      	mov	r2, r3
 80064a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064a2:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80064a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a6:	7c1a      	ldrb	r2, [r3, #16]
 80064a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ae:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80064b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064b6:	78db      	ldrb	r3, [r3, #3]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d009      	beq.n	80064d0 <find_volume+0x28c>
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c2:	78db      	ldrb	r3, [r3, #3]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d003      	beq.n	80064d0 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80064c8:	230d      	movs	r3, #13
 80064ca:	e1e0      	b.n	800688e <find_volume+0x64a>
 80064cc:	200023dc 	.word	0x200023dc
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80064d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d6:	78db      	ldrb	r3, [r3, #3]
 80064d8:	461a      	mov	r2, r3
 80064da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064dc:	fb02 f303 	mul.w	r3, r2, r3
 80064e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80064e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e4:	7b5a      	ldrb	r2, [r3, #13]
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ec:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80064ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f4:	789b      	ldrb	r3, [r3, #2]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00c      	beq.n	8006514 <find_volume+0x2d0>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006500:	789b      	ldrb	r3, [r3, #2]
 8006502:	461a      	mov	r2, r3
 8006504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800650a:	789b      	ldrb	r3, [r3, #2]
 800650c:	3b01      	subs	r3, #1
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8006514:	230d      	movs	r3, #13
 8006516:	e1ba      	b.n	800688e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651a:	7c9b      	ldrb	r3, [r3, #18]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	b21a      	sxth	r2, r3
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	7c5b      	ldrb	r3, [r3, #17]
 8006524:	b21b      	sxth	r3, r3
 8006526:	4313      	orrs	r3, r2
 8006528:	b21b      	sxth	r3, r3
 800652a:	b29a      	uxth	r2, r3
 800652c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006532:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800653a:	891b      	ldrh	r3, [r3, #8]
 800653c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800653e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006542:	8952      	ldrh	r2, [r2, #10]
 8006544:	0952      	lsrs	r2, r2, #5
 8006546:	b292      	uxth	r2, r2
 8006548:	fbb3 f1f2 	udiv	r1, r3, r2
 800654c:	fb01 f202 	mul.w	r2, r1, r2
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8006558:	230d      	movs	r3, #13
 800655a:	e198      	b.n	800688e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800655c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655e:	7d1b      	ldrb	r3, [r3, #20]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	b21a      	sxth	r2, r3
 8006564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006566:	7cdb      	ldrb	r3, [r3, #19]
 8006568:	b21b      	sxth	r3, r3
 800656a:	4313      	orrs	r3, r2
 800656c:	b21b      	sxth	r3, r3
 800656e:	b29b      	uxth	r3, r3
 8006570:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006574:	2b00      	cmp	r3, #0
 8006576:	d112      	bne.n	800659e <find_volume+0x35a>
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800657e:	061a      	lsls	r2, r3, #24
 8006580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006582:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	431a      	orrs	r2, r3
 800658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	4313      	orrs	r3, r2
 8006594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006596:	f892 2020 	ldrb.w	r2, [r2, #32]
 800659a:	4313      	orrs	r3, r2
 800659c:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	7bdb      	ldrb	r3, [r3, #15]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	b21a      	sxth	r2, r3
 80065a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a8:	7b9b      	ldrb	r3, [r3, #14]
 80065aa:	b21b      	sxth	r3, r3
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80065b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <find_volume+0x378>
 80065b8:	230d      	movs	r3, #13
 80065ba:	e168      	b.n	800688e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80065bc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80065be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c0:	4413      	add	r3, r2
 80065c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065c8:	8911      	ldrh	r1, [r2, #8]
 80065ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065d0:	8952      	ldrh	r2, [r2, #10]
 80065d2:	0952      	lsrs	r2, r2, #5
 80065d4:	b292      	uxth	r2, r2
 80065d6:	fbb1 f2f2 	udiv	r2, r1, r2
 80065da:	b292      	uxth	r2, r2
 80065dc:	4413      	add	r3, r2
 80065de:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80065e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d201      	bcs.n	80065ec <find_volume+0x3a8>
 80065e8:	230d      	movs	r3, #13
 80065ea:	e150      	b.n	800688e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80065ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065f8:	7892      	ldrb	r2, [r2, #2]
 80065fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <find_volume+0x3c6>
 8006606:	230d      	movs	r3, #13
 8006608:	e141      	b.n	800688e <find_volume+0x64a>
	fmt = FS_FAT12;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006616:	4293      	cmp	r3, r2
 8006618:	d902      	bls.n	8006620 <find_volume+0x3dc>
 800661a:	2302      	movs	r3, #2
 800661c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006626:	4293      	cmp	r3, r2
 8006628:	d902      	bls.n	8006630 <find_volume+0x3ec>
 800662a:	2303      	movs	r3, #3
 800662c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	3302      	adds	r3, #2
 8006634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006636:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800663a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006642:	461a      	mov	r2, r3
 8006644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006646:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006648:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800664a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800664c:	4413      	add	r3, r2
 800664e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006650:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006654:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8006656:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665a:	4413      	add	r3, r2
 800665c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800665e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006662:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8006664:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006668:	2b03      	cmp	r3, #3
 800666a:	d124      	bne.n	80066b6 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800666c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006672:	891b      	ldrh	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <find_volume+0x438>
 8006678:	230d      	movs	r3, #13
 800667a:	e108      	b.n	800688e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006682:	061a      	lsls	r2, r3, #24
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800668a:	041b      	lsls	r3, r3, #16
 800668c:	431a      	orrs	r2, r3
 800668e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006690:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	4313      	orrs	r3, r2
 8006698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800669a:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800669e:	4313      	orrs	r3, r2
 80066a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066a6:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b4:	e02b      	b.n	800670e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80066b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066bc:	891b      	ldrh	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <find_volume+0x482>
 80066c2:	230d      	movs	r3, #13
 80066c4:	e0e3      	b.n	800688e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066cc:	6a1a      	ldr	r2, [r3, #32]
 80066ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d0:	4413      	add	r3, r2
 80066d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066d8:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80066da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d105      	bne.n	80066ee <find_volume+0x4aa>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	e00e      	b.n	800670c <find_volume+0x4c8>
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	4613      	mov	r3, r2
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	4413      	add	r3, r2
 80066fc:	085a      	lsrs	r2, r3, #1
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800670c:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671c:	895b      	ldrh	r3, [r3, #10]
 800671e:	4619      	mov	r1, r3
 8006720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006722:	440b      	add	r3, r1
 8006724:	3b01      	subs	r3, #1
 8006726:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006728:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800672c:	8949      	ldrh	r1, [r1, #10]
 800672e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006732:	429a      	cmp	r2, r3
 8006734:	d201      	bcs.n	800673a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8006736:	230d      	movs	r3, #13
 8006738:	e0a9      	b.n	800688e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800673a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006740:	461a      	mov	r2, r3
 8006742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006746:	6113      	str	r3, [r2, #16]
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006752:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006756:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800675e:	2280      	movs	r2, #128	@ 0x80
 8006760:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006762:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006766:	2b03      	cmp	r3, #3
 8006768:	d17a      	bne.n	8006860 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	b21a      	sxth	r2, r3
 8006774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006776:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800677a:	b21b      	sxth	r3, r3
 800677c:	4313      	orrs	r3, r2
 800677e:	b21b      	sxth	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d16d      	bne.n	8006860 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006786:	3301      	adds	r3, #1
 8006788:	4619      	mov	r1, r3
 800678a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800678c:	f7fd ff8e 	bl	80046ac <move_window>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d164      	bne.n	8006860 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8006796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679c:	2200      	movs	r2, #0
 800679e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	b21a      	sxth	r2, r3
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b21b      	sxth	r3, r3
 80067b6:	4a38      	ldr	r2, [pc, #224]	@ (8006898 <find_volume+0x654>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d151      	bne.n	8006860 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	78db      	ldrb	r3, [r3, #3]
 80067c0:	061a      	lsls	r2, r3, #24
 80067c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c4:	789b      	ldrb	r3, [r3, #2]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	431a      	orrs	r2, r3
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	4313      	orrs	r3, r2
 80067d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	4a30      	ldr	r2, [pc, #192]	@ (800689c <find_volume+0x658>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d140      	bne.n	8006860 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80067de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e0:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80067e4:	061a      	lsls	r2, r3, #24
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	431a      	orrs	r2, r3
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	4313      	orrs	r3, r2
 80067fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067fc:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8006800:	4313      	orrs	r3, r2
 8006802:	4a27      	ldr	r2, [pc, #156]	@ (80068a0 <find_volume+0x65c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d12b      	bne.n	8006860 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800680e:	061a      	lsls	r2, r3, #24
 8006810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006812:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	431a      	orrs	r2, r3
 800681a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681c:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	4313      	orrs	r3, r2
 8006824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006826:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800682a:	4313      	orrs	r3, r2
 800682c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800682e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006832:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800683a:	061a      	lsls	r2, r3, #24
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8006842:	041b      	lsls	r3, r3, #16
 8006844:	431a      	orrs	r2, r3
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	4313      	orrs	r3, r2
 8006850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006852:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8006856:	4313      	orrs	r3, r2
 8006858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800685a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800685e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006866:	461a      	mov	r2, r3
 8006868:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800686c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <find_volume+0x660>)
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <find_volume+0x660>)
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	4b0a      	ldr	r3, [pc, #40]	@ (80068a4 <find_volume+0x660>)
 800687c:	881a      	ldrh	r2, [r3, #0]
 800687e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006884:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006886:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006888:	f7fd fe94 	bl	80045b4 <clear_lock>
#endif

	return FR_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3758      	adds	r7, #88	@ 0x58
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	ffffaa55 	.word	0xffffaa55
 800689c:	41615252 	.word	0x41615252
 80068a0:	61417272 	.word	0x61417272
 80068a4:	200023e0 	.word	0x200023e0

080068a8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d02a      	beq.n	8006910 <validate+0x68>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d024      	beq.n	8006910 <validate+0x68>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01b      	beq.n	8006910 <validate+0x68>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e4:	88da      	ldrh	r2, [r3, #6]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ec:	889b      	ldrh	r3, [r3, #4]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d10e      	bne.n	8006910 <validate+0x68>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	4618      	mov	r0, r3
 8006902:	f7fd fbad 	bl	8004060 <disk_status>
 8006906:	4603      	mov	r3, r0
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8006910:	2309      	movs	r3, #9
 8006912:	e000      	b.n	8006916 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006932:	f107 0310 	add.w	r3, r7, #16
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff fbd2 	bl	80060e0 <get_ldnumber>
 800693c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	da01      	bge.n	8006948 <f_mount+0x28>
 8006944:	230b      	movs	r3, #11
 8006946:	e02f      	b.n	80069a8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006948:	4a19      	ldr	r2, [pc, #100]	@ (80069b0 <f_mount+0x90>)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006950:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006958:	69b8      	ldr	r0, [r7, #24]
 800695a:	f7fd fe2b 	bl	80045b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006974:	2200      	movs	r2, #0
 8006976:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	490d      	ldr	r1, [pc, #52]	@ (80069b0 <f_mount+0x90>)
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <f_mount+0x6e>
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d001      	beq.n	8006992 <f_mount+0x72>
 800698e:	2300      	movs	r3, #0
 8006990:	e00a      	b.n	80069a8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006992:	f107 0108 	add.w	r1, r7, #8
 8006996:	f107 030c 	add.w	r3, r7, #12
 800699a:	2200      	movs	r2, #0
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff fc51 	bl	8006244 <find_volume>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200023dc 	.word	0x200023dc

080069b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80069c2:	f843 0c4c 	str.w	r0, [r3, #-76]
 80069c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80069ca:	f843 1c50 	str.w	r1, [r3, #-80]
 80069ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80069d2:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80069d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80069da:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <f_open+0x32>
 80069e2:	2309      	movs	r3, #9
 80069e4:	e2f3      	b.n	8006fce <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 80069e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80069ea:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f2:	461a      	mov	r2, r3
 80069f4:	2300      	movs	r3, #0
 80069f6:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80069f8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80069fc:	461a      	mov	r2, r3
 80069fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006a02:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006a0e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006a12:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006a16:	f023 0301 	bic.w	r3, r3, #1
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	f107 0118 	add.w	r1, r7, #24
 8006a20:	3910      	subs	r1, #16
 8006a22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006a26:	3b18      	subs	r3, #24
 8006a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff fc09 	bl	8006244 <find_volume>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006a38:	f102 0217 	add.w	r2, r2, #23
 8006a3c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006a3e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a42:	f103 0317 	add.w	r3, r3, #23
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f040 82bb 	bne.w	8006fc4 <f_open+0x610>
		INIT_BUF(dj);
 8006a4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006a52:	461a      	mov	r2, r3
 8006a54:	f107 0318 	add.w	r3, r7, #24
 8006a58:	3b04      	subs	r3, #4
 8006a5a:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 8006a5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006a62:	461a      	mov	r2, r3
 8006a64:	4bd3      	ldr	r3, [pc, #844]	@ (8006db4 <f_open+0x400>)
 8006a66:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8006a6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006a6e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8006a72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006a76:	3b18      	subs	r3, #24
 8006a78:	4611      	mov	r1, r2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff faba 	bl	8005ff4 <follow_path>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006a86:	f102 0217 	add.w	r2, r2, #23
 8006a8a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006a8c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006a90:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8006a94:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006a98:	f102 0210 	add.w	r2, r2, #16
 8006a9c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006a9e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006aa2:	f103 0317 	add.w	r3, r3, #23
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d124      	bne.n	8006af6 <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8006aac:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006ab0:	f103 0310 	add.w	r3, r3, #16
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <f_open+0x114>
				res = FR_INVALID_NAME;
 8006aba:	2306      	movs	r3, #6
 8006abc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006ac0:	f102 0217 	add.w	r2, r2, #23
 8006ac4:	7013      	strb	r3, [r2, #0]
 8006ac6:	e016      	b.n	8006af6 <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ac8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006acc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	bf8c      	ite	hi
 8006ad4:	2301      	movhi	r3, #1
 8006ad6:	2300      	movls	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006ae0:	3b18      	subs	r3, #24
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fd fbd1 	bl	800428c <chk_lock>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006af0:	f102 0217 	add.w	r2, r2, #23
 8006af4:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006af6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006afa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006afe:	f003 031c 	and.w	r3, r3, #28
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 813c 	beq.w	8006d80 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8006b08:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006b0c:	f103 0317 	add.w	r3, r3, #23
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d02e      	beq.n	8006b74 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006b16:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006b1a:	f103 0317 	add.w	r3, r3, #23
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d112      	bne.n	8006b4a <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006b24:	f7fd fc22 	bl	800436c <enq_lock>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d007      	beq.n	8006b3e <f_open+0x18a>
 8006b2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006b32:	3b18      	subs	r3, #24
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe ff7b 	bl	8005a30 <dir_register>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	e000      	b.n	8006b40 <f_open+0x18c>
 8006b3e:	2312      	movs	r3, #18
 8006b40:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006b44:	f102 0217 	add.w	r2, r2, #23
 8006b48:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006b4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b54:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006b58:	f043 0308 	orr.w	r3, r3, #8
 8006b5c:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8006b60:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b64:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8006b68:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006b6c:	f102 0210 	add.w	r2, r2, #16
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e01f      	b.n	8006bb4 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006b74:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006b78:	f103 0310 	add.w	r3, r3, #16
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330b      	adds	r3, #11
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	f003 0311 	and.w	r3, r3, #17
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <f_open+0x1e4>
					res = FR_DENIED;
 8006b8a:	2307      	movs	r3, #7
 8006b8c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006b90:	f102 0217 	add.w	r2, r2, #23
 8006b94:	7013      	strb	r3, [r2, #0]
 8006b96:	e00d      	b.n	8006bb4 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006b98:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b9c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <f_open+0x200>
						res = FR_EXIST;
 8006ba8:	2308      	movs	r3, #8
 8006baa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006bae:	f102 0217 	add.w	r2, r2, #23
 8006bb2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006bb4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006bb8:	f103 0317 	add.w	r3, r3, #23
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f040 8113 	bne.w	8006dea <f_open+0x436>
 8006bc4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006bc8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 810a 	beq.w	8006dea <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 8006bd6:	f7fd f9e1 	bl	8003f9c <get_fattime>
 8006bda:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006bde:	f103 030c 	add.w	r3, r3, #12
 8006be2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006be4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006be8:	f103 0310 	add.w	r3, r3, #16
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330e      	adds	r3, #14
 8006bf0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006bf4:	f102 020c 	add.w	r2, r2, #12
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c02:	f103 030c 	add.w	r3, r3, #12
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c12:	f103 0310 	add.w	r3, r3, #16
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330f      	adds	r3, #15
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c22:	f103 030c 	add.w	r3, r3, #12
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	0c1a      	lsrs	r2, r3, #16
 8006c2a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c2e:	f103 0310 	add.w	r3, r3, #16
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3310      	adds	r3, #16
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c3e:	f103 030c 	add.w	r3, r3, #12
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	0e1a      	lsrs	r2, r3, #24
 8006c46:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c4a:	f103 0310 	add.w	r3, r3, #16
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3311      	adds	r3, #17
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006c56:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c5a:	f103 0310 	add.w	r3, r3, #16
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330b      	adds	r3, #11
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006c66:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c6a:	f103 0310 	add.w	r3, r3, #16
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	331c      	adds	r3, #28
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c7a:	f103 0310 	add.w	r3, r3, #16
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	331d      	adds	r3, #29
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c8a:	f103 0310 	add.w	r3, r3, #16
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	331e      	adds	r3, #30
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c9a:	f103 0310 	add.w	r3, r3, #16
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	331f      	adds	r3, #31
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006ca6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006caa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006cae:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006cb2:	f102 0210 	add.w	r2, r2, #16
 8006cb6:	6811      	ldr	r1, [r2, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fc09 	bl	80054d0 <ld_clust>
 8006cbe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006cc2:	f103 0308 	add.w	r3, r3, #8
 8006cc6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8006cc8:	2100      	movs	r1, #0
 8006cca:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006cce:	f103 0310 	add.w	r3, r3, #16
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	f7fe fc2a 	bl	800552c <st_clust>
				dj.fs->wflag = 1;
 8006cd8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006cdc:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8006ce8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006cec:	f103 0308 	add.w	r3, r3, #8
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d079      	beq.n	8006dea <f_open+0x436>
					dw = dj.fs->winsect;
 8006cf6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006cfa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006d08:	f102 020c 	add.w	r2, r2, #12
 8006d0c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006d0e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006d12:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006d16:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006d1a:	f102 0208 	add.w	r2, r2, #8
 8006d1e:	6811      	ldr	r1, [r2, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe f826 	bl	8004d72 <remove_chain>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006d2c:	f102 0217 	add.w	r2, r2, #23
 8006d30:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006d32:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006d36:	f103 0317 	add.w	r3, r3, #23
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d154      	bne.n	8006dea <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006d40:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006d44:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 8006d48:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006d4c:	f103 0308 	add.w	r3, r3, #8
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d58:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8006d5a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006d5e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006d62:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006d66:	f102 020c 	add.w	r2, r2, #12
 8006d6a:	6811      	ldr	r1, [r2, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd fc9d 	bl	80046ac <move_window>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006d78:	f102 0217 	add.w	r2, r2, #23
 8006d7c:	7013      	strb	r3, [r2, #0]
 8006d7e:	e034      	b.n	8006dea <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006d80:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006d84:	f103 0317 	add.w	r3, r3, #23
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d12d      	bne.n	8006dea <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006d8e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006d92:	f103 0310 	add.w	r3, r3, #16
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330b      	adds	r3, #11
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <f_open+0x404>
					res = FR_NO_FILE;
 8006da4:	2304      	movs	r3, #4
 8006da6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006daa:	f102 0217 	add.w	r2, r2, #23
 8006dae:	7013      	strb	r3, [r2, #0]
 8006db0:	e01b      	b.n	8006dea <f_open+0x436>
 8006db2:	bf00      	nop
 8006db4:	200023fc 	.word	0x200023fc
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006db8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006dbc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d010      	beq.n	8006dea <f_open+0x436>
 8006dc8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006dcc:	f103 0310 	add.w	r3, r3, #16
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330b      	adds	r3, #11
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <f_open+0x436>
						res = FR_DENIED;
 8006dde:	2307      	movs	r3, #7
 8006de0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006de4:	f102 0217 	add.w	r2, r2, #23
 8006de8:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006dea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006dee:	f103 0317 	add.w	r3, r3, #23
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d155      	bne.n	8006ea4 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006df8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006dfc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <f_open+0x46a>
				mode |= FA__WRITTEN;
 8006e08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006e12:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006e16:	f043 0320 	orr.w	r3, r3, #32
 8006e1a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006e1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006e22:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006e30:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006e34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e38:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8006e3a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006e3e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e46:	461a      	mov	r2, r3
 8006e48:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006e4c:	f103 0310 	add.w	r3, r3, #16
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e54:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006e58:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	bf8c      	ite	hi
 8006e60:	2301      	movhi	r3, #1
 8006e62:	2300      	movls	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006e6c:	3b18      	subs	r3, #24
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fd fa9f 	bl	80043b4 <inc_lock>
 8006e76:	4602      	mov	r2, r0
 8006e78:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006e7c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e84:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8006e86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006e8a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d105      	bne.n	8006ea4 <f_open+0x4f0>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006e9e:	f102 0217 	add.w	r2, r2, #23
 8006ea2:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006ea4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006ea8:	f103 0317 	add.w	r3, r3, #23
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f040 8088 	bne.w	8006fc4 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 8006eb4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006eb8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006ec6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006eca:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8006ecc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006ed0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed8:	2200      	movs	r2, #0
 8006eda:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006edc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006ee0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006ee4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006ee8:	f102 0210 	add.w	r2, r2, #16
 8006eec:	6811      	ldr	r1, [r2, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe faee 	bl	80054d0 <ld_clust>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006efa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f02:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006f04:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006f08:	f103 0310 	add.w	r3, r3, #16
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	331f      	adds	r3, #31
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	061a      	lsls	r2, r3, #24
 8006f14:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006f18:	f103 0310 	add.w	r3, r3, #16
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	331e      	adds	r3, #30
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	431a      	orrs	r2, r3
 8006f26:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006f2a:	f103 0310 	add.w	r3, r3, #16
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	331d      	adds	r3, #29
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006f3c:	f102 0210 	add.w	r2, r2, #16
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	321c      	adds	r2, #28
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006f4c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006f50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f54:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8006f56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006f5a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f62:	461a      	mov	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8006f68:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006f6c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f74:	461a      	mov	r2, r3
 8006f76:	2300      	movs	r3, #0
 8006f78:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006f7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006f7e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f86:	461a      	mov	r2, r3
 8006f88:	2300      	movs	r3, #0
 8006f8a:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006f8c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006f90:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006f94:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006f98:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006f9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006fa0:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8006fa2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006fa6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb4:	88da      	ldrh	r2, [r3, #6]
 8006fb6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006fba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fc2:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006fc4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006fc8:	f103 0317 	add.w	r3, r3, #23
 8006fcc:	781b      	ldrb	r3, [r3, #0]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop

08006fdc <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08c      	sub	sp, #48	@ 0x30
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fc57 	bl	80068a8 <validate>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006ffe:	7ffb      	ldrb	r3, [r7, #31]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <f_read+0x2c>
 8007004:	7ffb      	ldrb	r3, [r7, #31]
 8007006:	e1cd      	b.n	80073a4 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800700e:	79db      	ldrb	r3, [r3, #7]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800701a:	79db      	ldrb	r3, [r3, #7]
 800701c:	e1c2      	b.n	80073a4 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007024:	799b      	ldrb	r3, [r3, #6]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800702e:	2307      	movs	r3, #7
 8007030:	e1b8      	b.n	80073a4 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	429a      	cmp	r2, r3
 800704c:	f240 81a5 	bls.w	800739a <f_read+0x3be>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007054:	e1a1      	b.n	800739a <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800706a:	8952      	ldrh	r2, [r2, #10]
 800706c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007070:	fb01 f202 	mul.w	r2, r1, r2
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	2b00      	cmp	r3, #0
 8007078:	f040 8140 	bne.w	80072fc <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007090:	8952      	ldrh	r2, [r2, #10]
 8007092:	fbb3 f3f2 	udiv	r3, r3, r2
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070a4:	789b      	ldrb	r3, [r3, #2]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	4013      	ands	r3, r2
 80070ac:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d143      	bne.n	800713c <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d105      	bne.n	80070cc <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ca:	e01c      	b.n	8007106 <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	4619      	mov	r1, r3
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7fd ff4e 	bl	8004f84 <clmt_clust>
 80070e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80070ea:	e00c      	b.n	8007106 <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7fd fbe9 	bl	80048d6 <get_fat>
 8007104:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007108:	2b01      	cmp	r3, #1
 800710a:	d806      	bhi.n	800711a <f_read+0x13e>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007112:	2202      	movs	r2, #2
 8007114:	71da      	strb	r2, [r3, #7]
 8007116:	2302      	movs	r3, #2
 8007118:	e144      	b.n	80073a4 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007120:	d106      	bne.n	8007130 <f_read+0x154>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007128:	2201      	movs	r2, #1
 800712a:	71da      	strb	r2, [r3, #7]
 800712c:	2301      	movs	r3, #1
 800712e:	e139      	b.n	80073a4 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007136:	461a      	mov	r2, r3
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7fd fb9d 	bl	800488e <clust2sect>
 8007154:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <f_read+0x18e>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007162:	2202      	movs	r2, #2
 8007164:	71da      	strb	r2, [r3, #7]
 8007166:	2302      	movs	r3, #2
 8007168:	e11c      	b.n	80073a4 <f_read+0x3c8>
			sect += csect;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4413      	add	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800717e:	895b      	ldrh	r3, [r3, #10]
 8007180:	461a      	mov	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	fbb3 f3f2 	udiv	r3, r3, r2
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d066      	beq.n	800725e <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007190:	7dfa      	ldrb	r2, [r7, #23]
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	4413      	add	r3, r2
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071a2:	7892      	ldrb	r2, [r2, #2]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d90a      	bls.n	80071be <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071b4:	789b      	ldrb	r3, [r3, #2]
 80071b6:	461a      	mov	r2, r3
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ca:	7858      	ldrb	r0, [r3, #1]
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	6a39      	ldr	r1, [r7, #32]
 80071d2:	f7fc ff85 	bl	80040e0 <disk_read>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d006      	beq.n	80071ea <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071e2:	2201      	movs	r2, #1
 80071e4:	71da      	strb	r2, [r3, #7]
 80071e6:	2301      	movs	r3, #1
 80071e8:	e0dc      	b.n	80073a4 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071f0:	799b      	ldrb	r3, [r3, #6]
 80071f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d024      	beq.n	8007244 <f_read+0x268>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007208:	429a      	cmp	r2, r3
 800720a:	d91b      	bls.n	8007244 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007212:	699a      	ldr	r2, [r3, #24]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800721e:	6812      	ldr	r2, [r2, #0]
 8007220:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007224:	8952      	ldrh	r2, [r2, #10]
 8007226:	fb02 f303 	mul.w	r3, r2, r3
 800722a:	6a3a      	ldr	r2, [r7, #32]
 800722c:	18d0      	adds	r0, r2, r3
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800723c:	895b      	ldrh	r3, [r3, #10]
 800723e:	461a      	mov	r2, r3
 8007240:	f7fc ffac 	bl	800419c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007250:	895b      	ldrh	r3, [r3, #10]
 8007252:	461a      	mov	r2, r3
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	fb02 f303 	mul.w	r3, r2, r3
 800725a:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 800725c:	e085      	b.n	800736a <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d041      	beq.n	80072f0 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007272:	799b      	ldrb	r3, [r3, #6]
 8007274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	d023      	beq.n	80072c4 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007288:	7858      	ldrb	r0, [r3, #1]
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	2301      	movs	r3, #1
 8007296:	f7fc ff43 	bl	8004120 <disk_write>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a6:	2201      	movs	r2, #1
 80072a8:	71da      	strb	r2, [r3, #7]
 80072aa:	2301      	movs	r3, #1
 80072ac:	e07a      	b.n	80073a4 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072b4:	799b      	ldrb	r3, [r3, #6]
 80072b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c2:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d0:	7858      	ldrb	r0, [r3, #1]
 80072d2:	68f9      	ldr	r1, [r7, #12]
 80072d4:	2301      	movs	r3, #1
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	f7fc ff02 	bl	80040e0 <disk_read>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d006      	beq.n	80072f0 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072e8:	2201      	movs	r2, #1
 80072ea:	71da      	strb	r2, [r3, #7]
 80072ec:	2301      	movs	r3, #1
 80072ee:	e059      	b.n	80073a4 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072f6:	461a      	mov	r2, r3
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007308:	895b      	ldrh	r3, [r3, #10]
 800730a:	4618      	mov	r0, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800731a:	6812      	ldr	r2, [r2, #0]
 800731c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007320:	8952      	ldrh	r2, [r2, #10]
 8007322:	fbb3 f1f2 	udiv	r1, r3, r2
 8007326:	fb01 f202 	mul.w	r2, r1, r2
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	1ac3      	subs	r3, r0, r3
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 8007330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	429a      	cmp	r2, r3
 8007336:	d901      	bls.n	800733c <f_read+0x360>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007350:	8952      	ldrh	r2, [r2, #10]
 8007352:	fbb3 f1f2 	udiv	r1, r3, r2
 8007356:	fb01 f202 	mul.w	r2, r1, r2
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007362:	4619      	mov	r1, r3
 8007364:	6a38      	ldr	r0, [r7, #32]
 8007366:	f7fc ff19 	bl	800419c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800736a:	6a3a      	ldr	r2, [r7, #32]
 800736c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736e:	4413      	add	r3, r2
 8007370:	623b      	str	r3, [r7, #32]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	4413      	add	r3, r2
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007384:	6093      	str	r3, [r2, #8]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	441a      	add	r2, r3
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f47f ae5a 	bne.w	8007056 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3730      	adds	r7, #48	@ 0x30
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08a      	sub	sp, #40	@ 0x28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff fa6f 	bl	80068a8 <validate>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <f_write+0x2c>
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	e21e      	b.n	8007816 <f_write+0x46a>
	if (fp->err)							/* Check error */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073de:	79db      	ldrb	r3, [r3, #7]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ea:	79db      	ldrb	r3, [r3, #7]
 80073ec:	e213      	b.n	8007816 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073f4:	799b      	ldrb	r3, [r3, #6]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80073fe:	2307      	movs	r3, #7
 8007400:	e209      	b.n	8007816 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	441a      	add	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	429a      	cmp	r2, r3
 8007418:	f080 81d9 	bcs.w	80077ce <f_write+0x422>
 800741c:	2300      	movs	r3, #0
 800741e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007420:	e1d5      	b.n	80077ce <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007430:	6812      	ldr	r2, [r2, #0]
 8007432:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007436:	8952      	ldrh	r2, [r2, #10]
 8007438:	fbb3 f1f2 	udiv	r1, r3, r2
 800743c:	fb01 f202 	mul.w	r2, r1, r2
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	2b00      	cmp	r3, #0
 8007444:	f040 8169 	bne.w	800771a <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800745c:	8952      	ldrh	r2, [r2, #10]
 800745e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007462:	b2da      	uxtb	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007470:	789b      	ldrb	r3, [r3, #2]
 8007472:	3b01      	subs	r3, #1
 8007474:	b2db      	uxtb	r3, r3
 8007476:	4013      	ands	r3, r2
 8007478:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800747a:	7dbb      	ldrb	r3, [r7, #22]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d15f      	bne.n	8007540 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d111      	bne.n	80074b0 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d126      	bne.n	80074ea <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fd fcc4 	bl	8004e34 <create_chain>
 80074ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80074ae:	e01c      	b.n	80074ea <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d009      	beq.n	80074d0 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	4619      	mov	r1, r3
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f7fd fd5c 	bl	8004f84 <clmt_clust>
 80074cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80074ce:	e00c      	b.n	80074ea <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fd fca6 	bl	8004e34 <create_chain>
 80074e8:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8173 	beq.w	80077d8 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d106      	bne.n	8007506 <f_write+0x15a>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074fe:	2202      	movs	r2, #2
 8007500:	71da      	strb	r2, [r3, #7]
 8007502:	2302      	movs	r3, #2
 8007504:	e187      	b.n	8007816 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800750c:	d106      	bne.n	800751c <f_write+0x170>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007514:	2201      	movs	r2, #1
 8007516:	71da      	strb	r2, [r3, #7]
 8007518:	2301      	movs	r3, #1
 800751a:	e17c      	b.n	8007816 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007522:	461a      	mov	r2, r3
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <f_write+0x194>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800753a:	461a      	mov	r2, r3
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007546:	799b      	ldrb	r3, [r3, #6]
 8007548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d023      	beq.n	8007598 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800755c:	7858      	ldrb	r0, [r3, #1]
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	2301      	movs	r3, #1
 800756a:	f7fc fdd9 	bl	8004120 <disk_write>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d006      	beq.n	8007582 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800757a:	2201      	movs	r2, #1
 800757c:	71da      	strb	r2, [r3, #7]
 800757e:	2301      	movs	r3, #1
 8007580:	e149      	b.n	8007816 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007588:	799b      	ldrb	r3, [r3, #6]
 800758a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800758e:	b2da      	uxtb	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007596:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f7fd f96f 	bl	800488e <clust2sect>
 80075b0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <f_write+0x21a>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075be:	2202      	movs	r2, #2
 80075c0:	71da      	strb	r2, [r3, #7]
 80075c2:	2302      	movs	r3, #2
 80075c4:	e127      	b.n	8007816 <f_write+0x46a>
			sect += csect;
 80075c6:	7dbb      	ldrb	r3, [r7, #22]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4413      	add	r3, r2
 80075cc:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075da:	895b      	ldrh	r3, [r3, #10]
 80075dc:	461a      	mov	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075e4:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d069      	beq.n	80076c0 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80075ec:	7dba      	ldrb	r2, [r7, #22]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075fe:	7892      	ldrb	r2, [r2, #2]
 8007600:	4293      	cmp	r3, r2
 8007602:	d90a      	bls.n	800761a <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007610:	789b      	ldrb	r3, [r3, #2]
 8007612:	461a      	mov	r2, r3
 8007614:	7dbb      	ldrb	r3, [r7, #22]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007626:	7858      	ldrb	r0, [r3, #1]
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	69b9      	ldr	r1, [r7, #24]
 800762e:	f7fc fd77 	bl	8004120 <disk_write>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d006      	beq.n	8007646 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800763e:	2201      	movs	r2, #1
 8007640:	71da      	strb	r2, [r3, #7]
 8007642:	2301      	movs	r3, #1
 8007644:	e0e7      	b.n	8007816 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	429a      	cmp	r2, r3
 8007656:	d926      	bls.n	80076a6 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007672:	8952      	ldrh	r2, [r2, #10]
 8007674:	fb02 f303 	mul.w	r3, r2, r3
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	18d1      	adds	r1, r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007688:	895b      	ldrh	r3, [r3, #10]
 800768a:	461a      	mov	r2, r3
 800768c:	f7fc fd86 	bl	800419c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007696:	799b      	ldrb	r3, [r3, #6]
 8007698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800769c:	b2da      	uxtb	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076a4:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b2:	895b      	ldrh	r3, [r3, #10]
 80076b4:	461a      	mov	r2, r3
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	fb02 f303 	mul.w	r3, r2, r3
 80076bc:	623b      	str	r3, [r7, #32]
				continue;
 80076be:	e06e      	b.n	800779e <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d01f      	beq.n	800770e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d215      	bcs.n	800770e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ee:	7858      	ldrb	r0, [r3, #1]
 80076f0:	68f9      	ldr	r1, [r7, #12]
 80076f2:	2301      	movs	r3, #1
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	f7fc fcf3 	bl	80040e0 <disk_read>
 80076fa:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d006      	beq.n	800770e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007706:	2201      	movs	r2, #1
 8007708:	71da      	strb	r2, [r3, #7]
 800770a:	2301      	movs	r3, #1
 800770c:	e083      	b.n	8007816 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007714:	461a      	mov	r2, r3
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007726:	895b      	ldrh	r3, [r3, #10]
 8007728:	4618      	mov	r0, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800773e:	8952      	ldrh	r2, [r2, #10]
 8007740:	fbb3 f1f2 	udiv	r1, r3, r2
 8007744:	fb01 f202 	mul.w	r2, r1, r2
 8007748:	1a9b      	subs	r3, r3, r2
 800774a:	1ac3      	subs	r3, r0, r3
 800774c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800774e:	6a3a      	ldr	r2, [r7, #32]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d901      	bls.n	800775a <f_write+0x3ae>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800776e:	8952      	ldrh	r2, [r2, #10]
 8007770:	fbb3 f1f2 	udiv	r1, r3, r2
 8007774:	fb01 f202 	mul.w	r2, r1, r2
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	6a3a      	ldr	r2, [r7, #32]
 8007780:	69b9      	ldr	r1, [r7, #24]
 8007782:	4618      	mov	r0, r3
 8007784:	f7fc fd0a 	bl	800419c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800778e:	799b      	ldrb	r3, [r3, #6]
 8007790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007794:	b2da      	uxtb	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800779c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	4413      	add	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	4413      	add	r3, r2
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80077b8:	6093      	str	r3, [r2, #8]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	441a      	add	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f47f ae26 	bne.w	8007422 <f_write+0x76>
 80077d6:	e000      	b.n	80077da <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077d8:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d907      	bls.n	80077fe <f_write+0x452>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80077fc:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007804:	799b      	ldrb	r3, [r3, #6]
 8007806:	f043 0320 	orr.w	r3, r3, #32
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007812:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3728      	adds	r7, #40	@ 0x28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b086      	sub	sp, #24
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff f83e 	bl	80068a8 <validate>
 800782c:	4603      	mov	r3, r0
 800782e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 80bc 	bne.w	80079b0 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800783e:	799b      	ldrb	r3, [r3, #6]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80b3 	beq.w	80079b0 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007850:	799b      	ldrb	r3, [r3, #6]
 8007852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01e      	beq.n	8007898 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007866:	7858      	ldrb	r0, [r3, #1]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	2301      	movs	r3, #1
 8007874:	f7fc fc54 	bl	8004120 <disk_write>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800787e:	2301      	movs	r3, #1
 8007880:	e097      	b.n	80079b2 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007888:	799b      	ldrb	r3, [r3, #6]
 800788a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788e:	b2da      	uxtb	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007896:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7fc fefe 	bl	80046ac <move_window>
 80078b0:	4603      	mov	r3, r0
 80078b2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d17a      	bne.n	80079b0 <f_sync+0x192>
				dir = fp->dir_ptr;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	330b      	adds	r3, #11
 80078c8:	781a      	ldrb	r2, [r3, #0]
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	330b      	adds	r3, #11
 80078ce:	f042 0220 	orr.w	r2, r2, #32
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	331c      	adds	r3, #28
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	331d      	adds	r3, #29
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	0c1a      	lsrs	r2, r3, #16
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	331e      	adds	r3, #30
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	0e1a      	lsrs	r2, r3, #24
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	331f      	adds	r3, #31
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	4619      	mov	r1, r3
 800792a:	6938      	ldr	r0, [r7, #16]
 800792c:	f7fd fdfe 	bl	800552c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007930:	f7fc fb34 	bl	8003f9c <get_fattime>
 8007934:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3316      	adds	r3, #22
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	b29b      	uxth	r3, r3
 8007944:	0a1b      	lsrs	r3, r3, #8
 8007946:	b29a      	uxth	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	3317      	adds	r3, #23
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	0c1a      	lsrs	r2, r3, #16
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3318      	adds	r3, #24
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	0e1a      	lsrs	r2, r3, #24
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	3319      	adds	r3, #25
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	3312      	adds	r3, #18
 800796c:	2200      	movs	r2, #0
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3313      	adds	r3, #19
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800797e:	799b      	ldrb	r3, [r3, #6]
 8007980:	f023 0320 	bic.w	r3, r3, #32
 8007984:	b2da      	uxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800798c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800799a:	2201      	movs	r2, #1
 800799c:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fc feb2 	bl	8004710 <sync_fs>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff ff2b 	bl	800781e <f_sync>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d119      	bne.n	8007a06 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fe ff68 	bl	80068a8 <validate>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d111      	bne.n	8007a06 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fc fd9e 	bl	800452c <dec_lock>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a00:	461a      	mov	r2, r3
 8007a02:	2300      	movs	r3, #0
 8007a04:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b090      	sub	sp, #64	@ 0x40
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7fe ff44 	bl	80068a8 <validate>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007a26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <f_lseek+0x24>
 8007a2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a32:	e2da      	b.n	8007fea <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a3a:	79db      	ldrb	r3, [r3, #7]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d004      	beq.n	8007a4a <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a46:	79db      	ldrb	r3, [r3, #7]
 8007a48:	e2cf      	b.n	8007fea <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8124 	beq.w	8007ca0 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a5e:	d16c      	bne.n	8007b3a <f_lseek+0x12a>
			tbl = fp->cltbl;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a68:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	2302      	movs	r3, #2
 8007a76:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d046      	beq.n	8007b16 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	3302      	adds	r3, #2
 8007a94:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fc ff13 	bl	80048d6 <get_fat>
 8007ab0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d806      	bhi.n	8007ac6 <f_lseek+0xb6>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007abe:	2202      	movs	r2, #2
 8007ac0:	71da      	strb	r2, [r3, #7]
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e291      	b.n	8007fea <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007acc:	d106      	bne.n	8007adc <f_lseek+0xcc>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	71da      	strb	r2, [r3, #7]
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e286      	b.n	8007fea <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d0d7      	beq.n	8007a96 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d809      	bhi.n	8007b02 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8007aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af0:	1d1a      	adds	r2, r3, #4
 8007af2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	1d1a      	adds	r2, r3, #4
 8007afc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d3b8      	bcc.n	8007a88 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b20:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d803      	bhi.n	8007b32 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	e259      	b.n	8007fe6 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007b32:	2311      	movs	r3, #17
 8007b34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007b38:	e255      	b.n	8007fe6 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d904      	bls.n	8007b52 <f_lseek+0x142>
				ofs = fp->fsize;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b58:	461a      	mov	r2, r3
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8240 	beq.w	8007fe6 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7fd fa09 	bl	8004f84 <clmt_clust>
 8007b72:	4602      	mov	r2, r0
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b7a:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f7fc fe7d 	bl	800488e <clust2sect>
 8007b94:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <f_lseek+0x19a>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	71da      	strb	r2, [r3, #7]
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e21f      	b.n	8007fea <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bba:	8952      	ldrh	r2, [r2, #10]
 8007bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bcc:	7892      	ldrb	r2, [r2, #2]
 8007bce:	3a01      	subs	r2, #1
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bec:	8952      	ldrh	r2, [r2, #10]
 8007bee:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bf2:	fb01 f202 	mul.w	r2, r1, r2
 8007bf6:	1a9b      	subs	r3, r3, r2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 81f4 	beq.w	8007fe6 <f_lseek+0x5d6>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	f000 81ec 	beq.w	8007fe6 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c14:	799b      	ldrb	r3, [r3, #6]
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d023      	beq.n	8007c66 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c2a:	7858      	ldrb	r0, [r3, #1]
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	2301      	movs	r3, #1
 8007c38:	f7fc fa72 	bl	8004120 <disk_write>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d006      	beq.n	8007c50 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c48:	2201      	movs	r2, #1
 8007c4a:	71da      	strb	r2, [r3, #7]
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e1cc      	b.n	8007fea <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c56:	799b      	ldrb	r3, [r3, #6]
 8007c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c64:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c72:	7858      	ldrb	r0, [r3, #1]
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	2301      	movs	r3, #1
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	f7fc fa31 	bl	80040e0 <disk_read>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d006      	beq.n	8007c92 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	71da      	strb	r2, [r3, #7]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e1ab      	b.n	8007fea <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c98:	461a      	mov	r2, r3
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	6193      	str	r3, [r2, #24]
 8007c9e:	e1a2      	b.n	8007fe6 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d90c      	bls.n	8007cc8 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cb4:	799b      	ldrb	r3, [r3, #6]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d104      	bne.n	8007cc8 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce0:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8100 	beq.w	8007eea <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cf6:	789b      	ldrb	r3, [r3, #2]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d06:	895b      	ldrh	r3, [r3, #10]
 8007d08:	fb02 f303 	mul.w	r3, r2, r3
 8007d0c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d021      	beq.n	8007d58 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	1e5a      	subs	r2, r3, #1
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	1e59      	subs	r1, r3, #1
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d315      	bcc.n	8007d58 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	425b      	negs	r3, r3
 8007d34:	4013      	ands	r3, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d3c:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d56:	e031      	b.n	8007dbc <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d123      	bne.n	8007db0 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fd f85e 	bl	8004e34 <create_chain>
 8007d78:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d106      	bne.n	8007d8e <f_lseek+0x37e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d86:	2202      	movs	r2, #2
 8007d88:	71da      	strb	r2, [r3, #7]
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e12d      	b.n	8007fea <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d94:	d106      	bne.n	8007da4 <f_lseek+0x394>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	71da      	strb	r2, [r3, #7]
 8007da0:	2301      	movs	r3, #1
 8007da2:	e122      	b.n	8007fea <f_lseek+0x5da>
					fp->sclust = clst;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007daa:	461a      	mov	r2, r3
 8007dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dae:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007db6:	461a      	mov	r2, r3
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 8093 	beq.w	8007eea <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8007dc4:	e052      	b.n	8007e6c <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dcc:	799b      	ldrb	r3, [r3, #6]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00e      	beq.n	8007df4 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fd f827 	bl	8004e34 <create_chain>
 8007de6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10b      	bne.n	8007e06 <f_lseek+0x3f6>
							ofs = bcs; break;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	603b      	str	r3, [r7, #0]
 8007df2:	e03f      	b.n	8007e74 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fc fd69 	bl	80048d6 <get_fat>
 8007e04:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e0c:	d106      	bne.n	8007e1c <f_lseek+0x40c>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e14:	2201      	movs	r2, #1
 8007e16:	71da      	strb	r2, [r3, #7]
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0e6      	b.n	8007fea <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d909      	bls.n	8007e36 <f_lseek+0x426>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d306      	bcc.n	8007e44 <f_lseek+0x434>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	71da      	strb	r2, [r3, #7]
 8007e40:	2302      	movs	r3, #2
 8007e42:	e0d2      	b.n	8007fea <f_lseek+0x5da>
					fp->clust = clst;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4e:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e62:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d8a8      	bhi.n	8007dc6 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	4413      	add	r3, r2
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e86:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e94:	895b      	ldrh	r3, [r3, #10]
 8007e96:	461a      	mov	r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e9e:	fb01 f202 	mul.w	r2, r1, r2
 8007ea2:	1a9b      	subs	r3, r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d020      	beq.n	8007eea <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fc fceb 	bl	800488e <clust2sect>
 8007eb8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <f_lseek+0x4be>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	71da      	strb	r2, [r3, #7]
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e08d      	b.n	8007fea <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eda:	895b      	ldrh	r3, [r3, #10]
 8007edc:	461a      	mov	r2, r3
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ee6:	4413      	add	r3, r2
 8007ee8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ef8:	6812      	ldr	r2, [r2, #0]
 8007efa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007efe:	8952      	ldrh	r2, [r2, #10]
 8007f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f04:	fb01 f202 	mul.w	r2, r1, r2
 8007f08:	1a9b      	subs	r3, r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d04e      	beq.n	8007fac <f_lseek+0x59c>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d047      	beq.n	8007fac <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f22:	799b      	ldrb	r3, [r3, #6]
 8007f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d023      	beq.n	8007f74 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f38:	7858      	ldrb	r0, [r3, #1]
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f42:	699a      	ldr	r2, [r3, #24]
 8007f44:	2301      	movs	r3, #1
 8007f46:	f7fc f8eb 	bl	8004120 <disk_write>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d006      	beq.n	8007f5e <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f56:	2201      	movs	r2, #1
 8007f58:	71da      	strb	r2, [r3, #7]
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e045      	b.n	8007fea <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f64:	799b      	ldrb	r3, [r3, #6]
 8007f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f72:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f80:	7858      	ldrb	r0, [r3, #1]
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	2301      	movs	r3, #1
 8007f86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f88:	f7fc f8aa 	bl	80040e0 <disk_read>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d006      	beq.n	8007fa0 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f98:	2201      	movs	r2, #1
 8007f9a:	71da      	strb	r2, [r3, #7]
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e024      	b.n	8007fea <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007faa:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d912      	bls.n	8007fe6 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fce:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fd6:	799b      	ldrb	r3, [r3, #6]
 8007fd8:	f043 0320 	orr.w	r3, r3, #32
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fe4:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3740      	adds	r7, #64	@ 0x40
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b088      	sub	sp, #32
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008006:	e01c      	b.n	8008042 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008008:	f107 0310 	add.w	r3, r7, #16
 800800c:	f107 0114 	add.w	r1, r7, #20
 8008010:	2201      	movs	r2, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fe ffe2 	bl	8006fdc <f_read>
		if (rc != 1) break;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d117      	bne.n	800804e <f_gets+0x5c>
		c = s[0];
 800801e:	7d3b      	ldrb	r3, [r7, #20]
 8008020:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	2b0d      	cmp	r3, #13
 8008026:	d00b      	beq.n	8008040 <f_gets+0x4e>
		*p++ = c;
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	61ba      	str	r2, [r7, #24]
 800802e:	7dfa      	ldrb	r2, [r7, #23]
 8008030:	701a      	strb	r2, [r3, #0]
		n++;
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	3301      	adds	r3, #1
 8008036:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	2b0a      	cmp	r3, #10
 800803c:	d009      	beq.n	8008052 <f_gets+0x60>
 800803e:	e000      	b.n	8008042 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008040:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	3b01      	subs	r3, #1
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	429a      	cmp	r2, r3
 800804a:	dbdd      	blt.n	8008008 <f_gets+0x16>
 800804c:	e002      	b.n	8008054 <f_gets+0x62>
		if (rc != 1) break;
 800804e:	bf00      	nop
 8008050:	e000      	b.n	8008054 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008052:	bf00      	nop
	}
	*p = 0;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <f_gets+0x72>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	e000      	b.n	8008066 <f_gets+0x74>
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	2b0a      	cmp	r3, #10
 800807e:	d103      	bne.n	8008088 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008080:	210d      	movs	r1, #13
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff fff3 	bl	800806e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	db25      	blt.n	80080e0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	60fa      	str	r2, [r7, #12]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	4413      	add	r3, r2
 800809e:	78fa      	ldrb	r2, [r7, #3]
 80080a0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b3c      	cmp	r3, #60	@ 0x3c
 80080a6:	dd12      	ble.n	80080ce <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f103 010c 	add.w	r1, r3, #12
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	f107 0308 	add.w	r3, r7, #8
 80080b8:	f7ff f978 	bl	80073ac <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d101      	bne.n	80080c8 <putc_bfd+0x5a>
 80080c4:	2300      	movs	r3, #0
 80080c6:	e001      	b.n	80080cc <putc_bfd+0x5e>
 80080c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080cc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	609a      	str	r2, [r3, #8]
 80080de:	e000      	b.n	80080e2 <putc_bfd+0x74>
	if (i < 0) return;
 80080e0:	bf00      	nop
}
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80080e8:	b590      	push	{r4, r7, lr}
 80080ea:	b097      	sub	sp, #92	@ 0x5c
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80080fe:	e009      	b.n	8008114 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	f107 030c 	add.w	r3, r7, #12
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff ffad 	bl	800806e <putc_bfd>
	while (*str)			/* Put the string */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f1      	bne.n	8008100 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	db15      	blt.n	800814e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	461c      	mov	r4, r3
 8008128:	f107 0208 	add.w	r2, r7, #8
 800812c:	f107 030c 	add.w	r3, r7, #12
 8008130:	f103 010c 	add.w	r1, r3, #12
 8008134:	4613      	mov	r3, r2
 8008136:	4622      	mov	r2, r4
 8008138:	f7ff f938 	bl	80073ac <f_write>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	4293      	cmp	r3, r2
 8008148:	d101      	bne.n	800814e <f_puts+0x66>
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	e001      	b.n	8008152 <f_puts+0x6a>
	return EOF;
 800814e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008152:	4618      	mov	r0, r3
 8008154:	375c      	adds	r7, #92	@ 0x5c
 8008156:	46bd      	mov	sp, r7
 8008158:	bd90      	pop	{r4, r7, pc}
	...

0800815c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800816a:	2301      	movs	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008172:	4b1e      	ldr	r3, [pc, #120]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 8008174:	7a5b      	ldrb	r3, [r3, #9]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b01      	cmp	r3, #1
 800817a:	d831      	bhi.n	80081e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800817c:	4b1b      	ldr	r3, [pc, #108]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 800817e:	7a5b      	ldrb	r3, [r3, #9]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	461a      	mov	r2, r3
 8008184:	4b19      	ldr	r3, [pc, #100]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 8008186:	2100      	movs	r1, #0
 8008188:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800818a:	4b18      	ldr	r3, [pc, #96]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 800818c:	7a5b      	ldrb	r3, [r3, #9]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	4a16      	ldr	r2, [pc, #88]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800819a:	4b14      	ldr	r3, [pc, #80]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 800819c:	7a5b      	ldrb	r3, [r3, #9]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	461a      	mov	r2, r3
 80081a2:	4b12      	ldr	r3, [pc, #72]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 80081a4:	4413      	add	r3, r2
 80081a6:	79fa      	ldrb	r2, [r7, #7]
 80081a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80081aa:	4b10      	ldr	r3, [pc, #64]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 80081ac:	7a5b      	ldrb	r3, [r3, #9]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	b2d1      	uxtb	r1, r2
 80081b4:	4a0d      	ldr	r2, [pc, #52]	@ (80081ec <FATFS_LinkDriverEx+0x90>)
 80081b6:	7251      	strb	r1, [r2, #9]
 80081b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80081ba:	7dbb      	ldrb	r3, [r7, #22]
 80081bc:	3330      	adds	r3, #48	@ 0x30
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	3301      	adds	r3, #1
 80081c8:	223a      	movs	r2, #58	@ 0x3a
 80081ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	3302      	adds	r3, #2
 80081d0:	222f      	movs	r2, #47	@ 0x2f
 80081d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	3303      	adds	r3, #3
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr
 80081ec:	200025fc 	.word	0x200025fc

080081f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081fa:	2200      	movs	r2, #0
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff ffac 	bl	800815c <FATFS_LinkDriverEx>
 8008204:	4603      	mov	r3, r0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008220:	d802      	bhi.n	8008228 <ff_convert+0x18>
		c = chr;
 8008222:	88fb      	ldrh	r3, [r7, #6]
 8008224:	81fb      	strh	r3, [r7, #14]
 8008226:	e025      	b.n	8008274 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	2bff      	cmp	r3, #255	@ 0xff
 8008232:	d805      	bhi.n	8008240 <ff_convert+0x30>
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	3b80      	subs	r3, #128	@ 0x80
 8008238:	4a11      	ldr	r2, [pc, #68]	@ (8008280 <ff_convert+0x70>)
 800823a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800823e:	e000      	b.n	8008242 <ff_convert+0x32>
 8008240:	2300      	movs	r3, #0
 8008242:	81fb      	strh	r3, [r7, #14]
 8008244:	e016      	b.n	8008274 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008246:	2300      	movs	r3, #0
 8008248:	81fb      	strh	r3, [r7, #14]
 800824a:	e009      	b.n	8008260 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800824c:	89fb      	ldrh	r3, [r7, #14]
 800824e:	4a0c      	ldr	r2, [pc, #48]	@ (8008280 <ff_convert+0x70>)
 8008250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008254:	88fa      	ldrh	r2, [r7, #6]
 8008256:	429a      	cmp	r2, r3
 8008258:	d006      	beq.n	8008268 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800825a:	89fb      	ldrh	r3, [r7, #14]
 800825c:	3301      	adds	r3, #1
 800825e:	81fb      	strh	r3, [r7, #14]
 8008260:	89fb      	ldrh	r3, [r7, #14]
 8008262:	2b7f      	cmp	r3, #127	@ 0x7f
 8008264:	d9f2      	bls.n	800824c <ff_convert+0x3c>
 8008266:	e000      	b.n	800826a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008268:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800826a:	89fb      	ldrh	r3, [r7, #14]
 800826c:	3380      	adds	r3, #128	@ 0x80
 800826e:	b29b      	uxth	r3, r3
 8008270:	b2db      	uxtb	r3, r3
 8008272:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008274:	89fb      	ldrh	r3, [r7, #14]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr
 8008280:	0800cfb8 	.word	0x0800cfb8

08008284 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	e002      	b.n	800829a <ff_wtoupper+0x16>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	4a0f      	ldr	r2, [pc, #60]	@ (80082d8 <ff_wtoupper+0x54>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d006      	beq.n	80082b4 <ff_wtoupper+0x30>
 80082a6:	4a0c      	ldr	r2, [pc, #48]	@ (80082d8 <ff_wtoupper+0x54>)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082ae:	88fa      	ldrh	r2, [r7, #6]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d1ef      	bne.n	8008294 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80082b4:	4a08      	ldr	r2, [pc, #32]	@ (80082d8 <ff_wtoupper+0x54>)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <ff_wtoupper+0x46>
 80082c0:	4a06      	ldr	r2, [pc, #24]	@ (80082dc <ff_wtoupper+0x58>)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c8:	e000      	b.n	80082cc <ff_wtoupper+0x48>
 80082ca:	88fb      	ldrh	r3, [r7, #6]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	0800d0b8 	.word	0x0800d0b8
 80082dc:	0800d298 	.word	0x0800d298

080082e0 <__cvt>:
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e6:	461d      	mov	r5, r3
 80082e8:	bfbb      	ittet	lt
 80082ea:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80082ee:	461d      	movlt	r5, r3
 80082f0:	2300      	movge	r3, #0
 80082f2:	232d      	movlt	r3, #45	@ 0x2d
 80082f4:	b088      	sub	sp, #32
 80082f6:	4614      	mov	r4, r2
 80082f8:	bfb8      	it	lt
 80082fa:	4614      	movlt	r4, r2
 80082fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80082fe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008300:	7013      	strb	r3, [r2, #0]
 8008302:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008304:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008308:	f023 0820 	bic.w	r8, r3, #32
 800830c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008310:	d005      	beq.n	800831e <__cvt+0x3e>
 8008312:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008316:	d100      	bne.n	800831a <__cvt+0x3a>
 8008318:	3601      	adds	r6, #1
 800831a:	2302      	movs	r3, #2
 800831c:	e000      	b.n	8008320 <__cvt+0x40>
 800831e:	2303      	movs	r3, #3
 8008320:	aa07      	add	r2, sp, #28
 8008322:	9204      	str	r2, [sp, #16]
 8008324:	aa06      	add	r2, sp, #24
 8008326:	e9cd a202 	strd	sl, r2, [sp, #8]
 800832a:	e9cd 3600 	strd	r3, r6, [sp]
 800832e:	4622      	mov	r2, r4
 8008330:	462b      	mov	r3, r5
 8008332:	f001 f881 	bl	8009438 <_dtoa_r>
 8008336:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800833a:	4607      	mov	r7, r0
 800833c:	d119      	bne.n	8008372 <__cvt+0x92>
 800833e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008340:	07db      	lsls	r3, r3, #31
 8008342:	d50e      	bpl.n	8008362 <__cvt+0x82>
 8008344:	eb00 0906 	add.w	r9, r0, r6
 8008348:	2200      	movs	r2, #0
 800834a:	2300      	movs	r3, #0
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	f7f8 fb2a 	bl	80009a8 <__aeabi_dcmpeq>
 8008354:	b108      	cbz	r0, 800835a <__cvt+0x7a>
 8008356:	f8cd 901c 	str.w	r9, [sp, #28]
 800835a:	2230      	movs	r2, #48	@ 0x30
 800835c:	9b07      	ldr	r3, [sp, #28]
 800835e:	454b      	cmp	r3, r9
 8008360:	d31e      	bcc.n	80083a0 <__cvt+0xc0>
 8008362:	4638      	mov	r0, r7
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008368:	1bdb      	subs	r3, r3, r7
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	b008      	add	sp, #32
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008376:	eb00 0906 	add.w	r9, r0, r6
 800837a:	d1e5      	bne.n	8008348 <__cvt+0x68>
 800837c:	7803      	ldrb	r3, [r0, #0]
 800837e:	2b30      	cmp	r3, #48	@ 0x30
 8008380:	d10a      	bne.n	8008398 <__cvt+0xb8>
 8008382:	2200      	movs	r2, #0
 8008384:	2300      	movs	r3, #0
 8008386:	4620      	mov	r0, r4
 8008388:	4629      	mov	r1, r5
 800838a:	f7f8 fb0d 	bl	80009a8 <__aeabi_dcmpeq>
 800838e:	b918      	cbnz	r0, 8008398 <__cvt+0xb8>
 8008390:	f1c6 0601 	rsb	r6, r6, #1
 8008394:	f8ca 6000 	str.w	r6, [sl]
 8008398:	f8da 3000 	ldr.w	r3, [sl]
 800839c:	4499      	add	r9, r3
 800839e:	e7d3      	b.n	8008348 <__cvt+0x68>
 80083a0:	1c59      	adds	r1, r3, #1
 80083a2:	9107      	str	r1, [sp, #28]
 80083a4:	701a      	strb	r2, [r3, #0]
 80083a6:	e7d9      	b.n	800835c <__cvt+0x7c>

080083a8 <__exponent>:
 80083a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083aa:	2900      	cmp	r1, #0
 80083ac:	bfb6      	itet	lt
 80083ae:	232d      	movlt	r3, #45	@ 0x2d
 80083b0:	232b      	movge	r3, #43	@ 0x2b
 80083b2:	4249      	neglt	r1, r1
 80083b4:	2909      	cmp	r1, #9
 80083b6:	7002      	strb	r2, [r0, #0]
 80083b8:	7043      	strb	r3, [r0, #1]
 80083ba:	dd29      	ble.n	8008410 <__exponent+0x68>
 80083bc:	f10d 0307 	add.w	r3, sp, #7
 80083c0:	461d      	mov	r5, r3
 80083c2:	270a      	movs	r7, #10
 80083c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80083c8:	461a      	mov	r2, r3
 80083ca:	fb07 1416 	mls	r4, r7, r6, r1
 80083ce:	3430      	adds	r4, #48	@ 0x30
 80083d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80083d4:	460c      	mov	r4, r1
 80083d6:	2c63      	cmp	r4, #99	@ 0x63
 80083d8:	4631      	mov	r1, r6
 80083da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80083de:	dcf1      	bgt.n	80083c4 <__exponent+0x1c>
 80083e0:	3130      	adds	r1, #48	@ 0x30
 80083e2:	1e94      	subs	r4, r2, #2
 80083e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80083e8:	4623      	mov	r3, r4
 80083ea:	1c41      	adds	r1, r0, #1
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	d30a      	bcc.n	8008406 <__exponent+0x5e>
 80083f0:	f10d 0309 	add.w	r3, sp, #9
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	42ac      	cmp	r4, r5
 80083f8:	bf88      	it	hi
 80083fa:	2300      	movhi	r3, #0
 80083fc:	3302      	adds	r3, #2
 80083fe:	4403      	add	r3, r0
 8008400:	1a18      	subs	r0, r3, r0
 8008402:	b003      	add	sp, #12
 8008404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008406:	f813 6b01 	ldrb.w	r6, [r3], #1
 800840a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800840e:	e7ed      	b.n	80083ec <__exponent+0x44>
 8008410:	2330      	movs	r3, #48	@ 0x30
 8008412:	3130      	adds	r1, #48	@ 0x30
 8008414:	7083      	strb	r3, [r0, #2]
 8008416:	70c1      	strb	r1, [r0, #3]
 8008418:	1d03      	adds	r3, r0, #4
 800841a:	e7f1      	b.n	8008400 <__exponent+0x58>

0800841c <_printf_float>:
 800841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	b091      	sub	sp, #68	@ 0x44
 8008422:	460c      	mov	r4, r1
 8008424:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008428:	4616      	mov	r6, r2
 800842a:	461f      	mov	r7, r3
 800842c:	4605      	mov	r5, r0
 800842e:	f000 fef1 	bl	8009214 <_localeconv_r>
 8008432:	6803      	ldr	r3, [r0, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	9308      	str	r3, [sp, #32]
 8008438:	f7f7 fe8a 	bl	8000150 <strlen>
 800843c:	2300      	movs	r3, #0
 800843e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008440:	f8d8 3000 	ldr.w	r3, [r8]
 8008444:	9009      	str	r0, [sp, #36]	@ 0x24
 8008446:	3307      	adds	r3, #7
 8008448:	f023 0307 	bic.w	r3, r3, #7
 800844c:	f103 0208 	add.w	r2, r3, #8
 8008450:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008454:	f8d4 b000 	ldr.w	fp, [r4]
 8008458:	f8c8 2000 	str.w	r2, [r8]
 800845c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008460:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008464:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008466:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800846a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800846e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008472:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008476:	4b9c      	ldr	r3, [pc, #624]	@ (80086e8 <_printf_float+0x2cc>)
 8008478:	f7f8 fac8 	bl	8000a0c <__aeabi_dcmpun>
 800847c:	bb70      	cbnz	r0, 80084dc <_printf_float+0xc0>
 800847e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008482:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008486:	4b98      	ldr	r3, [pc, #608]	@ (80086e8 <_printf_float+0x2cc>)
 8008488:	f7f8 faa2 	bl	80009d0 <__aeabi_dcmple>
 800848c:	bb30      	cbnz	r0, 80084dc <_printf_float+0xc0>
 800848e:	2200      	movs	r2, #0
 8008490:	2300      	movs	r3, #0
 8008492:	4640      	mov	r0, r8
 8008494:	4649      	mov	r1, r9
 8008496:	f7f8 fa91 	bl	80009bc <__aeabi_dcmplt>
 800849a:	b110      	cbz	r0, 80084a2 <_printf_float+0x86>
 800849c:	232d      	movs	r3, #45	@ 0x2d
 800849e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084a2:	4a92      	ldr	r2, [pc, #584]	@ (80086ec <_printf_float+0x2d0>)
 80084a4:	4b92      	ldr	r3, [pc, #584]	@ (80086f0 <_printf_float+0x2d4>)
 80084a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80084aa:	bf94      	ite	ls
 80084ac:	4690      	movls	r8, r2
 80084ae:	4698      	movhi	r8, r3
 80084b0:	2303      	movs	r3, #3
 80084b2:	f04f 0900 	mov.w	r9, #0
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	f02b 0304 	bic.w	r3, fp, #4
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	4633      	mov	r3, r6
 80084c0:	4621      	mov	r1, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	9700      	str	r7, [sp, #0]
 80084c6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80084c8:	f000 f9d4 	bl	8008874 <_printf_common>
 80084cc:	3001      	adds	r0, #1
 80084ce:	f040 8090 	bne.w	80085f2 <_printf_float+0x1d6>
 80084d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084d6:	b011      	add	sp, #68	@ 0x44
 80084d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	4649      	mov	r1, r9
 80084e4:	f7f8 fa92 	bl	8000a0c <__aeabi_dcmpun>
 80084e8:	b148      	cbz	r0, 80084fe <_printf_float+0xe2>
 80084ea:	464b      	mov	r3, r9
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bfb8      	it	lt
 80084f0:	232d      	movlt	r3, #45	@ 0x2d
 80084f2:	4a80      	ldr	r2, [pc, #512]	@ (80086f4 <_printf_float+0x2d8>)
 80084f4:	bfb8      	it	lt
 80084f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80084fa:	4b7f      	ldr	r3, [pc, #508]	@ (80086f8 <_printf_float+0x2dc>)
 80084fc:	e7d3      	b.n	80084a6 <_printf_float+0x8a>
 80084fe:	6863      	ldr	r3, [r4, #4]
 8008500:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	d13f      	bne.n	8008588 <_printf_float+0x16c>
 8008508:	2306      	movs	r3, #6
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	9206      	str	r2, [sp, #24]
 8008516:	aa0e      	add	r2, sp, #56	@ 0x38
 8008518:	e9cd a204 	strd	sl, r2, [sp, #16]
 800851c:	aa0d      	add	r2, sp, #52	@ 0x34
 800851e:	9203      	str	r2, [sp, #12]
 8008520:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008524:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008528:	6863      	ldr	r3, [r4, #4]
 800852a:	4642      	mov	r2, r8
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4628      	mov	r0, r5
 8008530:	464b      	mov	r3, r9
 8008532:	910a      	str	r1, [sp, #40]	@ 0x28
 8008534:	f7ff fed4 	bl	80082e0 <__cvt>
 8008538:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800853a:	4680      	mov	r8, r0
 800853c:	2947      	cmp	r1, #71	@ 0x47
 800853e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008540:	d128      	bne.n	8008594 <_printf_float+0x178>
 8008542:	1cc8      	adds	r0, r1, #3
 8008544:	db02      	blt.n	800854c <_printf_float+0x130>
 8008546:	6863      	ldr	r3, [r4, #4]
 8008548:	4299      	cmp	r1, r3
 800854a:	dd40      	ble.n	80085ce <_printf_float+0x1b2>
 800854c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008550:	fa5f fa8a 	uxtb.w	sl, sl
 8008554:	4652      	mov	r2, sl
 8008556:	3901      	subs	r1, #1
 8008558:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800855c:	910d      	str	r1, [sp, #52]	@ 0x34
 800855e:	f7ff ff23 	bl	80083a8 <__exponent>
 8008562:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008564:	4681      	mov	r9, r0
 8008566:	1813      	adds	r3, r2, r0
 8008568:	2a01      	cmp	r2, #1
 800856a:	6123      	str	r3, [r4, #16]
 800856c:	dc02      	bgt.n	8008574 <_printf_float+0x158>
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	07d2      	lsls	r2, r2, #31
 8008572:	d501      	bpl.n	8008578 <_printf_float+0x15c>
 8008574:	3301      	adds	r3, #1
 8008576:	6123      	str	r3, [r4, #16]
 8008578:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800857c:	2b00      	cmp	r3, #0
 800857e:	d09e      	beq.n	80084be <_printf_float+0xa2>
 8008580:	232d      	movs	r3, #45	@ 0x2d
 8008582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008586:	e79a      	b.n	80084be <_printf_float+0xa2>
 8008588:	2947      	cmp	r1, #71	@ 0x47
 800858a:	d1bf      	bne.n	800850c <_printf_float+0xf0>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1bd      	bne.n	800850c <_printf_float+0xf0>
 8008590:	2301      	movs	r3, #1
 8008592:	e7ba      	b.n	800850a <_printf_float+0xee>
 8008594:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008598:	d9dc      	bls.n	8008554 <_printf_float+0x138>
 800859a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800859e:	d118      	bne.n	80085d2 <_printf_float+0x1b6>
 80085a0:	2900      	cmp	r1, #0
 80085a2:	6863      	ldr	r3, [r4, #4]
 80085a4:	dd0b      	ble.n	80085be <_printf_float+0x1a2>
 80085a6:	6121      	str	r1, [r4, #16]
 80085a8:	b913      	cbnz	r3, 80085b0 <_printf_float+0x194>
 80085aa:	6822      	ldr	r2, [r4, #0]
 80085ac:	07d0      	lsls	r0, r2, #31
 80085ae:	d502      	bpl.n	80085b6 <_printf_float+0x19a>
 80085b0:	3301      	adds	r3, #1
 80085b2:	440b      	add	r3, r1
 80085b4:	6123      	str	r3, [r4, #16]
 80085b6:	f04f 0900 	mov.w	r9, #0
 80085ba:	65a1      	str	r1, [r4, #88]	@ 0x58
 80085bc:	e7dc      	b.n	8008578 <_printf_float+0x15c>
 80085be:	b913      	cbnz	r3, 80085c6 <_printf_float+0x1aa>
 80085c0:	6822      	ldr	r2, [r4, #0]
 80085c2:	07d2      	lsls	r2, r2, #31
 80085c4:	d501      	bpl.n	80085ca <_printf_float+0x1ae>
 80085c6:	3302      	adds	r3, #2
 80085c8:	e7f4      	b.n	80085b4 <_printf_float+0x198>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e7f2      	b.n	80085b4 <_printf_float+0x198>
 80085ce:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80085d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085d4:	4299      	cmp	r1, r3
 80085d6:	db05      	blt.n	80085e4 <_printf_float+0x1c8>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	6121      	str	r1, [r4, #16]
 80085dc:	07d8      	lsls	r0, r3, #31
 80085de:	d5ea      	bpl.n	80085b6 <_printf_float+0x19a>
 80085e0:	1c4b      	adds	r3, r1, #1
 80085e2:	e7e7      	b.n	80085b4 <_printf_float+0x198>
 80085e4:	2900      	cmp	r1, #0
 80085e6:	bfcc      	ite	gt
 80085e8:	2201      	movgt	r2, #1
 80085ea:	f1c1 0202 	rsble	r2, r1, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	e7e0      	b.n	80085b4 <_printf_float+0x198>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	055a      	lsls	r2, r3, #21
 80085f6:	d407      	bmi.n	8008608 <_printf_float+0x1ec>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	4642      	mov	r2, r8
 80085fc:	4631      	mov	r1, r6
 80085fe:	4628      	mov	r0, r5
 8008600:	47b8      	blx	r7
 8008602:	3001      	adds	r0, #1
 8008604:	d12b      	bne.n	800865e <_printf_float+0x242>
 8008606:	e764      	b.n	80084d2 <_printf_float+0xb6>
 8008608:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800860c:	f240 80dc 	bls.w	80087c8 <_printf_float+0x3ac>
 8008610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008614:	2200      	movs	r2, #0
 8008616:	2300      	movs	r3, #0
 8008618:	f7f8 f9c6 	bl	80009a8 <__aeabi_dcmpeq>
 800861c:	2800      	cmp	r0, #0
 800861e:	d033      	beq.n	8008688 <_printf_float+0x26c>
 8008620:	2301      	movs	r3, #1
 8008622:	4631      	mov	r1, r6
 8008624:	4628      	mov	r0, r5
 8008626:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <_printf_float+0x2e0>)
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f af51 	beq.w	80084d2 <_printf_float+0xb6>
 8008630:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008634:	4543      	cmp	r3, r8
 8008636:	db02      	blt.n	800863e <_printf_float+0x222>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	07d8      	lsls	r0, r3, #31
 800863c:	d50f      	bpl.n	800865e <_printf_float+0x242>
 800863e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	47b8      	blx	r7
 8008648:	3001      	adds	r0, #1
 800864a:	f43f af42 	beq.w	80084d2 <_printf_float+0xb6>
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008656:	f104 0a1a 	add.w	sl, r4, #26
 800865a:	45c8      	cmp	r8, r9
 800865c:	dc09      	bgt.n	8008672 <_printf_float+0x256>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	079b      	lsls	r3, r3, #30
 8008662:	f100 8102 	bmi.w	800886a <_printf_float+0x44e>
 8008666:	68e0      	ldr	r0, [r4, #12]
 8008668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800866a:	4298      	cmp	r0, r3
 800866c:	bfb8      	it	lt
 800866e:	4618      	movlt	r0, r3
 8008670:	e731      	b.n	80084d6 <_printf_float+0xba>
 8008672:	2301      	movs	r3, #1
 8008674:	4652      	mov	r2, sl
 8008676:	4631      	mov	r1, r6
 8008678:	4628      	mov	r0, r5
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	f43f af28 	beq.w	80084d2 <_printf_float+0xb6>
 8008682:	f109 0901 	add.w	r9, r9, #1
 8008686:	e7e8      	b.n	800865a <_printf_float+0x23e>
 8008688:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800868a:	2b00      	cmp	r3, #0
 800868c:	dc38      	bgt.n	8008700 <_printf_float+0x2e4>
 800868e:	2301      	movs	r3, #1
 8008690:	4631      	mov	r1, r6
 8008692:	4628      	mov	r0, r5
 8008694:	4a19      	ldr	r2, [pc, #100]	@ (80086fc <_printf_float+0x2e0>)
 8008696:	47b8      	blx	r7
 8008698:	3001      	adds	r0, #1
 800869a:	f43f af1a 	beq.w	80084d2 <_printf_float+0xb6>
 800869e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80086a2:	ea59 0303 	orrs.w	r3, r9, r3
 80086a6:	d102      	bne.n	80086ae <_printf_float+0x292>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	07d9      	lsls	r1, r3, #31
 80086ac:	d5d7      	bpl.n	800865e <_printf_float+0x242>
 80086ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086b2:	4631      	mov	r1, r6
 80086b4:	4628      	mov	r0, r5
 80086b6:	47b8      	blx	r7
 80086b8:	3001      	adds	r0, #1
 80086ba:	f43f af0a 	beq.w	80084d2 <_printf_float+0xb6>
 80086be:	f04f 0a00 	mov.w	sl, #0
 80086c2:	f104 0b1a 	add.w	fp, r4, #26
 80086c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086c8:	425b      	negs	r3, r3
 80086ca:	4553      	cmp	r3, sl
 80086cc:	dc01      	bgt.n	80086d2 <_printf_float+0x2b6>
 80086ce:	464b      	mov	r3, r9
 80086d0:	e793      	b.n	80085fa <_printf_float+0x1de>
 80086d2:	2301      	movs	r3, #1
 80086d4:	465a      	mov	r2, fp
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	47b8      	blx	r7
 80086dc:	3001      	adds	r0, #1
 80086de:	f43f aef8 	beq.w	80084d2 <_printf_float+0xb6>
 80086e2:	f10a 0a01 	add.w	sl, sl, #1
 80086e6:	e7ee      	b.n	80086c6 <_printf_float+0x2aa>
 80086e8:	7fefffff 	.word	0x7fefffff
 80086ec:	0800d478 	.word	0x0800d478
 80086f0:	0800d47c 	.word	0x0800d47c
 80086f4:	0800d480 	.word	0x0800d480
 80086f8:	0800d484 	.word	0x0800d484
 80086fc:	0800d488 	.word	0x0800d488
 8008700:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008702:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008706:	4553      	cmp	r3, sl
 8008708:	bfa8      	it	ge
 800870a:	4653      	movge	r3, sl
 800870c:	2b00      	cmp	r3, #0
 800870e:	4699      	mov	r9, r3
 8008710:	dc36      	bgt.n	8008780 <_printf_float+0x364>
 8008712:	f04f 0b00 	mov.w	fp, #0
 8008716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800871a:	f104 021a 	add.w	r2, r4, #26
 800871e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008720:	930a      	str	r3, [sp, #40]	@ 0x28
 8008722:	eba3 0309 	sub.w	r3, r3, r9
 8008726:	455b      	cmp	r3, fp
 8008728:	dc31      	bgt.n	800878e <_printf_float+0x372>
 800872a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800872c:	459a      	cmp	sl, r3
 800872e:	dc3a      	bgt.n	80087a6 <_printf_float+0x38a>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	07da      	lsls	r2, r3, #31
 8008734:	d437      	bmi.n	80087a6 <_printf_float+0x38a>
 8008736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008738:	ebaa 0903 	sub.w	r9, sl, r3
 800873c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800873e:	ebaa 0303 	sub.w	r3, sl, r3
 8008742:	4599      	cmp	r9, r3
 8008744:	bfa8      	it	ge
 8008746:	4699      	movge	r9, r3
 8008748:	f1b9 0f00 	cmp.w	r9, #0
 800874c:	dc33      	bgt.n	80087b6 <_printf_float+0x39a>
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008756:	f104 0b1a 	add.w	fp, r4, #26
 800875a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800875c:	ebaa 0303 	sub.w	r3, sl, r3
 8008760:	eba3 0309 	sub.w	r3, r3, r9
 8008764:	4543      	cmp	r3, r8
 8008766:	f77f af7a 	ble.w	800865e <_printf_float+0x242>
 800876a:	2301      	movs	r3, #1
 800876c:	465a      	mov	r2, fp
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	f43f aeac 	beq.w	80084d2 <_printf_float+0xb6>
 800877a:	f108 0801 	add.w	r8, r8, #1
 800877e:	e7ec      	b.n	800875a <_printf_float+0x33e>
 8008780:	4642      	mov	r2, r8
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	d1c2      	bne.n	8008712 <_printf_float+0x2f6>
 800878c:	e6a1      	b.n	80084d2 <_printf_float+0xb6>
 800878e:	2301      	movs	r3, #1
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	920a      	str	r2, [sp, #40]	@ 0x28
 8008796:	47b8      	blx	r7
 8008798:	3001      	adds	r0, #1
 800879a:	f43f ae9a 	beq.w	80084d2 <_printf_float+0xb6>
 800879e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087a0:	f10b 0b01 	add.w	fp, fp, #1
 80087a4:	e7bb      	b.n	800871e <_printf_float+0x302>
 80087a6:	4631      	mov	r1, r6
 80087a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087ac:	4628      	mov	r0, r5
 80087ae:	47b8      	blx	r7
 80087b0:	3001      	adds	r0, #1
 80087b2:	d1c0      	bne.n	8008736 <_printf_float+0x31a>
 80087b4:	e68d      	b.n	80084d2 <_printf_float+0xb6>
 80087b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087b8:	464b      	mov	r3, r9
 80087ba:	4631      	mov	r1, r6
 80087bc:	4628      	mov	r0, r5
 80087be:	4442      	add	r2, r8
 80087c0:	47b8      	blx	r7
 80087c2:	3001      	adds	r0, #1
 80087c4:	d1c3      	bne.n	800874e <_printf_float+0x332>
 80087c6:	e684      	b.n	80084d2 <_printf_float+0xb6>
 80087c8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80087cc:	f1ba 0f01 	cmp.w	sl, #1
 80087d0:	dc01      	bgt.n	80087d6 <_printf_float+0x3ba>
 80087d2:	07db      	lsls	r3, r3, #31
 80087d4:	d536      	bpl.n	8008844 <_printf_float+0x428>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4642      	mov	r2, r8
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	f43f ae76 	beq.w	80084d2 <_printf_float+0xb6>
 80087e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087ea:	4631      	mov	r1, r6
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	f43f ae6e 	beq.w	80084d2 <_printf_float+0xb6>
 80087f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80087fa:	2200      	movs	r2, #0
 80087fc:	2300      	movs	r3, #0
 80087fe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008802:	f7f8 f8d1 	bl	80009a8 <__aeabi_dcmpeq>
 8008806:	b9c0      	cbnz	r0, 800883a <_printf_float+0x41e>
 8008808:	4653      	mov	r3, sl
 800880a:	f108 0201 	add.w	r2, r8, #1
 800880e:	4631      	mov	r1, r6
 8008810:	4628      	mov	r0, r5
 8008812:	47b8      	blx	r7
 8008814:	3001      	adds	r0, #1
 8008816:	d10c      	bne.n	8008832 <_printf_float+0x416>
 8008818:	e65b      	b.n	80084d2 <_printf_float+0xb6>
 800881a:	2301      	movs	r3, #1
 800881c:	465a      	mov	r2, fp
 800881e:	4631      	mov	r1, r6
 8008820:	4628      	mov	r0, r5
 8008822:	47b8      	blx	r7
 8008824:	3001      	adds	r0, #1
 8008826:	f43f ae54 	beq.w	80084d2 <_printf_float+0xb6>
 800882a:	f108 0801 	add.w	r8, r8, #1
 800882e:	45d0      	cmp	r8, sl
 8008830:	dbf3      	blt.n	800881a <_printf_float+0x3fe>
 8008832:	464b      	mov	r3, r9
 8008834:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008838:	e6e0      	b.n	80085fc <_printf_float+0x1e0>
 800883a:	f04f 0800 	mov.w	r8, #0
 800883e:	f104 0b1a 	add.w	fp, r4, #26
 8008842:	e7f4      	b.n	800882e <_printf_float+0x412>
 8008844:	2301      	movs	r3, #1
 8008846:	4642      	mov	r2, r8
 8008848:	e7e1      	b.n	800880e <_printf_float+0x3f2>
 800884a:	2301      	movs	r3, #1
 800884c:	464a      	mov	r2, r9
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	f43f ae3c 	beq.w	80084d2 <_printf_float+0xb6>
 800885a:	f108 0801 	add.w	r8, r8, #1
 800885e:	68e3      	ldr	r3, [r4, #12]
 8008860:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008862:	1a5b      	subs	r3, r3, r1
 8008864:	4543      	cmp	r3, r8
 8008866:	dcf0      	bgt.n	800884a <_printf_float+0x42e>
 8008868:	e6fd      	b.n	8008666 <_printf_float+0x24a>
 800886a:	f04f 0800 	mov.w	r8, #0
 800886e:	f104 0919 	add.w	r9, r4, #25
 8008872:	e7f4      	b.n	800885e <_printf_float+0x442>

08008874 <_printf_common>:
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	4616      	mov	r6, r2
 800887a:	4698      	mov	r8, r3
 800887c:	688a      	ldr	r2, [r1, #8]
 800887e:	690b      	ldr	r3, [r1, #16]
 8008880:	4607      	mov	r7, r0
 8008882:	4293      	cmp	r3, r2
 8008884:	bfb8      	it	lt
 8008886:	4613      	movlt	r3, r2
 8008888:	6033      	str	r3, [r6, #0]
 800888a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800888e:	460c      	mov	r4, r1
 8008890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008894:	b10a      	cbz	r2, 800889a <_printf_common+0x26>
 8008896:	3301      	adds	r3, #1
 8008898:	6033      	str	r3, [r6, #0]
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	0699      	lsls	r1, r3, #26
 800889e:	bf42      	ittt	mi
 80088a0:	6833      	ldrmi	r3, [r6, #0]
 80088a2:	3302      	addmi	r3, #2
 80088a4:	6033      	strmi	r3, [r6, #0]
 80088a6:	6825      	ldr	r5, [r4, #0]
 80088a8:	f015 0506 	ands.w	r5, r5, #6
 80088ac:	d106      	bne.n	80088bc <_printf_common+0x48>
 80088ae:	f104 0a19 	add.w	sl, r4, #25
 80088b2:	68e3      	ldr	r3, [r4, #12]
 80088b4:	6832      	ldr	r2, [r6, #0]
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	dc2b      	bgt.n	8008914 <_printf_common+0xa0>
 80088bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088c0:	6822      	ldr	r2, [r4, #0]
 80088c2:	3b00      	subs	r3, #0
 80088c4:	bf18      	it	ne
 80088c6:	2301      	movne	r3, #1
 80088c8:	0692      	lsls	r2, r2, #26
 80088ca:	d430      	bmi.n	800892e <_printf_common+0xba>
 80088cc:	4641      	mov	r1, r8
 80088ce:	4638      	mov	r0, r7
 80088d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088d4:	47c8      	blx	r9
 80088d6:	3001      	adds	r0, #1
 80088d8:	d023      	beq.n	8008922 <_printf_common+0xae>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	6922      	ldr	r2, [r4, #16]
 80088de:	f003 0306 	and.w	r3, r3, #6
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	bf14      	ite	ne
 80088e6:	2500      	movne	r5, #0
 80088e8:	6833      	ldreq	r3, [r6, #0]
 80088ea:	f04f 0600 	mov.w	r6, #0
 80088ee:	bf08      	it	eq
 80088f0:	68e5      	ldreq	r5, [r4, #12]
 80088f2:	f104 041a 	add.w	r4, r4, #26
 80088f6:	bf08      	it	eq
 80088f8:	1aed      	subeq	r5, r5, r3
 80088fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80088fe:	bf08      	it	eq
 8008900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008904:	4293      	cmp	r3, r2
 8008906:	bfc4      	itt	gt
 8008908:	1a9b      	subgt	r3, r3, r2
 800890a:	18ed      	addgt	r5, r5, r3
 800890c:	42b5      	cmp	r5, r6
 800890e:	d11a      	bne.n	8008946 <_printf_common+0xd2>
 8008910:	2000      	movs	r0, #0
 8008912:	e008      	b.n	8008926 <_printf_common+0xb2>
 8008914:	2301      	movs	r3, #1
 8008916:	4652      	mov	r2, sl
 8008918:	4641      	mov	r1, r8
 800891a:	4638      	mov	r0, r7
 800891c:	47c8      	blx	r9
 800891e:	3001      	adds	r0, #1
 8008920:	d103      	bne.n	800892a <_printf_common+0xb6>
 8008922:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892a:	3501      	adds	r5, #1
 800892c:	e7c1      	b.n	80088b2 <_printf_common+0x3e>
 800892e:	2030      	movs	r0, #48	@ 0x30
 8008930:	18e1      	adds	r1, r4, r3
 8008932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800893c:	4422      	add	r2, r4
 800893e:	3302      	adds	r3, #2
 8008940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008944:	e7c2      	b.n	80088cc <_printf_common+0x58>
 8008946:	2301      	movs	r3, #1
 8008948:	4622      	mov	r2, r4
 800894a:	4641      	mov	r1, r8
 800894c:	4638      	mov	r0, r7
 800894e:	47c8      	blx	r9
 8008950:	3001      	adds	r0, #1
 8008952:	d0e6      	beq.n	8008922 <_printf_common+0xae>
 8008954:	3601      	adds	r6, #1
 8008956:	e7d9      	b.n	800890c <_printf_common+0x98>

08008958 <_printf_i>:
 8008958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	7e0f      	ldrb	r7, [r1, #24]
 800895e:	4691      	mov	r9, r2
 8008960:	2f78      	cmp	r7, #120	@ 0x78
 8008962:	4680      	mov	r8, r0
 8008964:	460c      	mov	r4, r1
 8008966:	469a      	mov	sl, r3
 8008968:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800896a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800896e:	d807      	bhi.n	8008980 <_printf_i+0x28>
 8008970:	2f62      	cmp	r7, #98	@ 0x62
 8008972:	d80a      	bhi.n	800898a <_printf_i+0x32>
 8008974:	2f00      	cmp	r7, #0
 8008976:	f000 80d3 	beq.w	8008b20 <_printf_i+0x1c8>
 800897a:	2f58      	cmp	r7, #88	@ 0x58
 800897c:	f000 80ba 	beq.w	8008af4 <_printf_i+0x19c>
 8008980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008988:	e03a      	b.n	8008a00 <_printf_i+0xa8>
 800898a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800898e:	2b15      	cmp	r3, #21
 8008990:	d8f6      	bhi.n	8008980 <_printf_i+0x28>
 8008992:	a101      	add	r1, pc, #4	@ (adr r1, 8008998 <_printf_i+0x40>)
 8008994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008998:	080089f1 	.word	0x080089f1
 800899c:	08008a05 	.word	0x08008a05
 80089a0:	08008981 	.word	0x08008981
 80089a4:	08008981 	.word	0x08008981
 80089a8:	08008981 	.word	0x08008981
 80089ac:	08008981 	.word	0x08008981
 80089b0:	08008a05 	.word	0x08008a05
 80089b4:	08008981 	.word	0x08008981
 80089b8:	08008981 	.word	0x08008981
 80089bc:	08008981 	.word	0x08008981
 80089c0:	08008981 	.word	0x08008981
 80089c4:	08008b07 	.word	0x08008b07
 80089c8:	08008a2f 	.word	0x08008a2f
 80089cc:	08008ac1 	.word	0x08008ac1
 80089d0:	08008981 	.word	0x08008981
 80089d4:	08008981 	.word	0x08008981
 80089d8:	08008b29 	.word	0x08008b29
 80089dc:	08008981 	.word	0x08008981
 80089e0:	08008a2f 	.word	0x08008a2f
 80089e4:	08008981 	.word	0x08008981
 80089e8:	08008981 	.word	0x08008981
 80089ec:	08008ac9 	.word	0x08008ac9
 80089f0:	6833      	ldr	r3, [r6, #0]
 80089f2:	1d1a      	adds	r2, r3, #4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6032      	str	r2, [r6, #0]
 80089f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a00:	2301      	movs	r3, #1
 8008a02:	e09e      	b.n	8008b42 <_printf_i+0x1ea>
 8008a04:	6833      	ldr	r3, [r6, #0]
 8008a06:	6820      	ldr	r0, [r4, #0]
 8008a08:	1d19      	adds	r1, r3, #4
 8008a0a:	6031      	str	r1, [r6, #0]
 8008a0c:	0606      	lsls	r6, r0, #24
 8008a0e:	d501      	bpl.n	8008a14 <_printf_i+0xbc>
 8008a10:	681d      	ldr	r5, [r3, #0]
 8008a12:	e003      	b.n	8008a1c <_printf_i+0xc4>
 8008a14:	0645      	lsls	r5, r0, #25
 8008a16:	d5fb      	bpl.n	8008a10 <_printf_i+0xb8>
 8008a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	da03      	bge.n	8008a28 <_printf_i+0xd0>
 8008a20:	232d      	movs	r3, #45	@ 0x2d
 8008a22:	426d      	negs	r5, r5
 8008a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a28:	230a      	movs	r3, #10
 8008a2a:	4859      	ldr	r0, [pc, #356]	@ (8008b90 <_printf_i+0x238>)
 8008a2c:	e011      	b.n	8008a52 <_printf_i+0xfa>
 8008a2e:	6821      	ldr	r1, [r4, #0]
 8008a30:	6833      	ldr	r3, [r6, #0]
 8008a32:	0608      	lsls	r0, r1, #24
 8008a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a38:	d402      	bmi.n	8008a40 <_printf_i+0xe8>
 8008a3a:	0649      	lsls	r1, r1, #25
 8008a3c:	bf48      	it	mi
 8008a3e:	b2ad      	uxthmi	r5, r5
 8008a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a42:	6033      	str	r3, [r6, #0]
 8008a44:	bf14      	ite	ne
 8008a46:	230a      	movne	r3, #10
 8008a48:	2308      	moveq	r3, #8
 8008a4a:	4851      	ldr	r0, [pc, #324]	@ (8008b90 <_printf_i+0x238>)
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a52:	6866      	ldr	r6, [r4, #4]
 8008a54:	2e00      	cmp	r6, #0
 8008a56:	bfa8      	it	ge
 8008a58:	6821      	ldrge	r1, [r4, #0]
 8008a5a:	60a6      	str	r6, [r4, #8]
 8008a5c:	bfa4      	itt	ge
 8008a5e:	f021 0104 	bicge.w	r1, r1, #4
 8008a62:	6021      	strge	r1, [r4, #0]
 8008a64:	b90d      	cbnz	r5, 8008a6a <_printf_i+0x112>
 8008a66:	2e00      	cmp	r6, #0
 8008a68:	d04b      	beq.n	8008b02 <_printf_i+0x1aa>
 8008a6a:	4616      	mov	r6, r2
 8008a6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a70:	fb03 5711 	mls	r7, r3, r1, r5
 8008a74:	5dc7      	ldrb	r7, [r0, r7]
 8008a76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a7a:	462f      	mov	r7, r5
 8008a7c:	42bb      	cmp	r3, r7
 8008a7e:	460d      	mov	r5, r1
 8008a80:	d9f4      	bls.n	8008a6c <_printf_i+0x114>
 8008a82:	2b08      	cmp	r3, #8
 8008a84:	d10b      	bne.n	8008a9e <_printf_i+0x146>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	07df      	lsls	r7, r3, #31
 8008a8a:	d508      	bpl.n	8008a9e <_printf_i+0x146>
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	6861      	ldr	r1, [r4, #4]
 8008a90:	4299      	cmp	r1, r3
 8008a92:	bfde      	ittt	le
 8008a94:	2330      	movle	r3, #48	@ 0x30
 8008a96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a9a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008a9e:	1b92      	subs	r2, r2, r6
 8008aa0:	6122      	str	r2, [r4, #16]
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f8cd a000 	str.w	sl, [sp]
 8008aac:	aa03      	add	r2, sp, #12
 8008aae:	f7ff fee1 	bl	8008874 <_printf_common>
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d14a      	bne.n	8008b4c <_printf_i+0x1f4>
 8008ab6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008aba:	b004      	add	sp, #16
 8008abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	f043 0320 	orr.w	r3, r3, #32
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	2778      	movs	r7, #120	@ 0x78
 8008aca:	4832      	ldr	r0, [pc, #200]	@ (8008b94 <_printf_i+0x23c>)
 8008acc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	6831      	ldr	r1, [r6, #0]
 8008ad4:	061f      	lsls	r7, r3, #24
 8008ad6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ada:	d402      	bmi.n	8008ae2 <_printf_i+0x18a>
 8008adc:	065f      	lsls	r7, r3, #25
 8008ade:	bf48      	it	mi
 8008ae0:	b2ad      	uxthmi	r5, r5
 8008ae2:	6031      	str	r1, [r6, #0]
 8008ae4:	07d9      	lsls	r1, r3, #31
 8008ae6:	bf44      	itt	mi
 8008ae8:	f043 0320 	orrmi.w	r3, r3, #32
 8008aec:	6023      	strmi	r3, [r4, #0]
 8008aee:	b11d      	cbz	r5, 8008af8 <_printf_i+0x1a0>
 8008af0:	2310      	movs	r3, #16
 8008af2:	e7ab      	b.n	8008a4c <_printf_i+0xf4>
 8008af4:	4826      	ldr	r0, [pc, #152]	@ (8008b90 <_printf_i+0x238>)
 8008af6:	e7e9      	b.n	8008acc <_printf_i+0x174>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	f023 0320 	bic.w	r3, r3, #32
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	e7f6      	b.n	8008af0 <_printf_i+0x198>
 8008b02:	4616      	mov	r6, r2
 8008b04:	e7bd      	b.n	8008a82 <_printf_i+0x12a>
 8008b06:	6833      	ldr	r3, [r6, #0]
 8008b08:	6825      	ldr	r5, [r4, #0]
 8008b0a:	1d18      	adds	r0, r3, #4
 8008b0c:	6961      	ldr	r1, [r4, #20]
 8008b0e:	6030      	str	r0, [r6, #0]
 8008b10:	062e      	lsls	r6, r5, #24
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	d501      	bpl.n	8008b1a <_printf_i+0x1c2>
 8008b16:	6019      	str	r1, [r3, #0]
 8008b18:	e002      	b.n	8008b20 <_printf_i+0x1c8>
 8008b1a:	0668      	lsls	r0, r5, #25
 8008b1c:	d5fb      	bpl.n	8008b16 <_printf_i+0x1be>
 8008b1e:	8019      	strh	r1, [r3, #0]
 8008b20:	2300      	movs	r3, #0
 8008b22:	4616      	mov	r6, r2
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	e7bc      	b.n	8008aa2 <_printf_i+0x14a>
 8008b28:	6833      	ldr	r3, [r6, #0]
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	1d1a      	adds	r2, r3, #4
 8008b2e:	6032      	str	r2, [r6, #0]
 8008b30:	681e      	ldr	r6, [r3, #0]
 8008b32:	6862      	ldr	r2, [r4, #4]
 8008b34:	4630      	mov	r0, r6
 8008b36:	f000 fbe4 	bl	8009302 <memchr>
 8008b3a:	b108      	cbz	r0, 8008b40 <_printf_i+0x1e8>
 8008b3c:	1b80      	subs	r0, r0, r6
 8008b3e:	6060      	str	r0, [r4, #4]
 8008b40:	6863      	ldr	r3, [r4, #4]
 8008b42:	6123      	str	r3, [r4, #16]
 8008b44:	2300      	movs	r3, #0
 8008b46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b4a:	e7aa      	b.n	8008aa2 <_printf_i+0x14a>
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	4649      	mov	r1, r9
 8008b50:	4640      	mov	r0, r8
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	47d0      	blx	sl
 8008b56:	3001      	adds	r0, #1
 8008b58:	d0ad      	beq.n	8008ab6 <_printf_i+0x15e>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	079b      	lsls	r3, r3, #30
 8008b5e:	d413      	bmi.n	8008b88 <_printf_i+0x230>
 8008b60:	68e0      	ldr	r0, [r4, #12]
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	4298      	cmp	r0, r3
 8008b66:	bfb8      	it	lt
 8008b68:	4618      	movlt	r0, r3
 8008b6a:	e7a6      	b.n	8008aba <_printf_i+0x162>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4632      	mov	r2, r6
 8008b70:	4649      	mov	r1, r9
 8008b72:	4640      	mov	r0, r8
 8008b74:	47d0      	blx	sl
 8008b76:	3001      	adds	r0, #1
 8008b78:	d09d      	beq.n	8008ab6 <_printf_i+0x15e>
 8008b7a:	3501      	adds	r5, #1
 8008b7c:	68e3      	ldr	r3, [r4, #12]
 8008b7e:	9903      	ldr	r1, [sp, #12]
 8008b80:	1a5b      	subs	r3, r3, r1
 8008b82:	42ab      	cmp	r3, r5
 8008b84:	dcf2      	bgt.n	8008b6c <_printf_i+0x214>
 8008b86:	e7eb      	b.n	8008b60 <_printf_i+0x208>
 8008b88:	2500      	movs	r5, #0
 8008b8a:	f104 0619 	add.w	r6, r4, #25
 8008b8e:	e7f5      	b.n	8008b7c <_printf_i+0x224>
 8008b90:	0800d48a 	.word	0x0800d48a
 8008b94:	0800d49b 	.word	0x0800d49b

08008b98 <_scanf_float>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	b087      	sub	sp, #28
 8008b9e:	9303      	str	r3, [sp, #12]
 8008ba0:	688b      	ldr	r3, [r1, #8]
 8008ba2:	4617      	mov	r7, r2
 8008ba4:	1e5a      	subs	r2, r3, #1
 8008ba6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008baa:	bf82      	ittt	hi
 8008bac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008bb0:	eb03 0b05 	addhi.w	fp, r3, r5
 8008bb4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008bb8:	460a      	mov	r2, r1
 8008bba:	f04f 0500 	mov.w	r5, #0
 8008bbe:	bf88      	it	hi
 8008bc0:	608b      	strhi	r3, [r1, #8]
 8008bc2:	680b      	ldr	r3, [r1, #0]
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008bca:	f842 3b1c 	str.w	r3, [r2], #28
 8008bce:	460c      	mov	r4, r1
 8008bd0:	bf98      	it	ls
 8008bd2:	f04f 0b00 	movls.w	fp, #0
 8008bd6:	4616      	mov	r6, r2
 8008bd8:	46aa      	mov	sl, r5
 8008bda:	46a9      	mov	r9, r5
 8008bdc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008be0:	9201      	str	r2, [sp, #4]
 8008be2:	9502      	str	r5, [sp, #8]
 8008be4:	68a2      	ldr	r2, [r4, #8]
 8008be6:	b152      	cbz	r2, 8008bfe <_scanf_float+0x66>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b4e      	cmp	r3, #78	@ 0x4e
 8008bee:	d865      	bhi.n	8008cbc <_scanf_float+0x124>
 8008bf0:	2b40      	cmp	r3, #64	@ 0x40
 8008bf2:	d83d      	bhi.n	8008c70 <_scanf_float+0xd8>
 8008bf4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008bf8:	b2c8      	uxtb	r0, r1
 8008bfa:	280e      	cmp	r0, #14
 8008bfc:	d93b      	bls.n	8008c76 <_scanf_float+0xde>
 8008bfe:	f1b9 0f00 	cmp.w	r9, #0
 8008c02:	d003      	beq.n	8008c0c <_scanf_float+0x74>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008c10:	f1ba 0f01 	cmp.w	sl, #1
 8008c14:	f200 8118 	bhi.w	8008e48 <_scanf_float+0x2b0>
 8008c18:	9b01      	ldr	r3, [sp, #4]
 8008c1a:	429e      	cmp	r6, r3
 8008c1c:	f200 8109 	bhi.w	8008e32 <_scanf_float+0x29a>
 8008c20:	2001      	movs	r0, #1
 8008c22:	b007      	add	sp, #28
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008c2c:	2a0d      	cmp	r2, #13
 8008c2e:	d8e6      	bhi.n	8008bfe <_scanf_float+0x66>
 8008c30:	a101      	add	r1, pc, #4	@ (adr r1, 8008c38 <_scanf_float+0xa0>)
 8008c32:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008d7f 	.word	0x08008d7f
 8008c3c:	08008bff 	.word	0x08008bff
 8008c40:	08008bff 	.word	0x08008bff
 8008c44:	08008bff 	.word	0x08008bff
 8008c48:	08008ddf 	.word	0x08008ddf
 8008c4c:	08008db7 	.word	0x08008db7
 8008c50:	08008bff 	.word	0x08008bff
 8008c54:	08008bff 	.word	0x08008bff
 8008c58:	08008d8d 	.word	0x08008d8d
 8008c5c:	08008bff 	.word	0x08008bff
 8008c60:	08008bff 	.word	0x08008bff
 8008c64:	08008bff 	.word	0x08008bff
 8008c68:	08008bff 	.word	0x08008bff
 8008c6c:	08008d45 	.word	0x08008d45
 8008c70:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008c74:	e7da      	b.n	8008c2c <_scanf_float+0x94>
 8008c76:	290e      	cmp	r1, #14
 8008c78:	d8c1      	bhi.n	8008bfe <_scanf_float+0x66>
 8008c7a:	a001      	add	r0, pc, #4	@ (adr r0, 8008c80 <_scanf_float+0xe8>)
 8008c7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c80:	08008d35 	.word	0x08008d35
 8008c84:	08008bff 	.word	0x08008bff
 8008c88:	08008d35 	.word	0x08008d35
 8008c8c:	08008dcb 	.word	0x08008dcb
 8008c90:	08008bff 	.word	0x08008bff
 8008c94:	08008cdd 	.word	0x08008cdd
 8008c98:	08008d1b 	.word	0x08008d1b
 8008c9c:	08008d1b 	.word	0x08008d1b
 8008ca0:	08008d1b 	.word	0x08008d1b
 8008ca4:	08008d1b 	.word	0x08008d1b
 8008ca8:	08008d1b 	.word	0x08008d1b
 8008cac:	08008d1b 	.word	0x08008d1b
 8008cb0:	08008d1b 	.word	0x08008d1b
 8008cb4:	08008d1b 	.word	0x08008d1b
 8008cb8:	08008d1b 	.word	0x08008d1b
 8008cbc:	2b6e      	cmp	r3, #110	@ 0x6e
 8008cbe:	d809      	bhi.n	8008cd4 <_scanf_float+0x13c>
 8008cc0:	2b60      	cmp	r3, #96	@ 0x60
 8008cc2:	d8b1      	bhi.n	8008c28 <_scanf_float+0x90>
 8008cc4:	2b54      	cmp	r3, #84	@ 0x54
 8008cc6:	d07b      	beq.n	8008dc0 <_scanf_float+0x228>
 8008cc8:	2b59      	cmp	r3, #89	@ 0x59
 8008cca:	d198      	bne.n	8008bfe <_scanf_float+0x66>
 8008ccc:	2d07      	cmp	r5, #7
 8008cce:	d196      	bne.n	8008bfe <_scanf_float+0x66>
 8008cd0:	2508      	movs	r5, #8
 8008cd2:	e02c      	b.n	8008d2e <_scanf_float+0x196>
 8008cd4:	2b74      	cmp	r3, #116	@ 0x74
 8008cd6:	d073      	beq.n	8008dc0 <_scanf_float+0x228>
 8008cd8:	2b79      	cmp	r3, #121	@ 0x79
 8008cda:	e7f6      	b.n	8008cca <_scanf_float+0x132>
 8008cdc:	6821      	ldr	r1, [r4, #0]
 8008cde:	05c8      	lsls	r0, r1, #23
 8008ce0:	d51b      	bpl.n	8008d1a <_scanf_float+0x182>
 8008ce2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008ce6:	6021      	str	r1, [r4, #0]
 8008ce8:	f109 0901 	add.w	r9, r9, #1
 8008cec:	f1bb 0f00 	cmp.w	fp, #0
 8008cf0:	d003      	beq.n	8008cfa <_scanf_float+0x162>
 8008cf2:	3201      	adds	r2, #1
 8008cf4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008cf8:	60a2      	str	r2, [r4, #8]
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	60a3      	str	r3, [r4, #8]
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	3301      	adds	r3, #1
 8008d04:	6123      	str	r3, [r4, #16]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	f340 8087 	ble.w	8008e20 <_scanf_float+0x288>
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	3301      	adds	r3, #1
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	e764      	b.n	8008be4 <_scanf_float+0x4c>
 8008d1a:	eb1a 0105 	adds.w	r1, sl, r5
 8008d1e:	f47f af6e 	bne.w	8008bfe <_scanf_float+0x66>
 8008d22:	460d      	mov	r5, r1
 8008d24:	468a      	mov	sl, r1
 8008d26:	6822      	ldr	r2, [r4, #0]
 8008d28:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008d2c:	6022      	str	r2, [r4, #0]
 8008d2e:	f806 3b01 	strb.w	r3, [r6], #1
 8008d32:	e7e2      	b.n	8008cfa <_scanf_float+0x162>
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	0610      	lsls	r0, r2, #24
 8008d38:	f57f af61 	bpl.w	8008bfe <_scanf_float+0x66>
 8008d3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	e7f4      	b.n	8008d2e <_scanf_float+0x196>
 8008d44:	f1ba 0f00 	cmp.w	sl, #0
 8008d48:	d10e      	bne.n	8008d68 <_scanf_float+0x1d0>
 8008d4a:	f1b9 0f00 	cmp.w	r9, #0
 8008d4e:	d10e      	bne.n	8008d6e <_scanf_float+0x1d6>
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d56:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d5a:	d108      	bne.n	8008d6e <_scanf_float+0x1d6>
 8008d5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d60:	f04f 0a01 	mov.w	sl, #1
 8008d64:	6022      	str	r2, [r4, #0]
 8008d66:	e7e2      	b.n	8008d2e <_scanf_float+0x196>
 8008d68:	f1ba 0f02 	cmp.w	sl, #2
 8008d6c:	d055      	beq.n	8008e1a <_scanf_float+0x282>
 8008d6e:	2d01      	cmp	r5, #1
 8008d70:	d002      	beq.n	8008d78 <_scanf_float+0x1e0>
 8008d72:	2d04      	cmp	r5, #4
 8008d74:	f47f af43 	bne.w	8008bfe <_scanf_float+0x66>
 8008d78:	3501      	adds	r5, #1
 8008d7a:	b2ed      	uxtb	r5, r5
 8008d7c:	e7d7      	b.n	8008d2e <_scanf_float+0x196>
 8008d7e:	f1ba 0f01 	cmp.w	sl, #1
 8008d82:	f47f af3c 	bne.w	8008bfe <_scanf_float+0x66>
 8008d86:	f04f 0a02 	mov.w	sl, #2
 8008d8a:	e7d0      	b.n	8008d2e <_scanf_float+0x196>
 8008d8c:	b97d      	cbnz	r5, 8008dae <_scanf_float+0x216>
 8008d8e:	f1b9 0f00 	cmp.w	r9, #0
 8008d92:	f47f af37 	bne.w	8008c04 <_scanf_float+0x6c>
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d9c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008da0:	f040 8103 	bne.w	8008faa <_scanf_float+0x412>
 8008da4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008da8:	2501      	movs	r5, #1
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	e7bf      	b.n	8008d2e <_scanf_float+0x196>
 8008dae:	2d03      	cmp	r5, #3
 8008db0:	d0e2      	beq.n	8008d78 <_scanf_float+0x1e0>
 8008db2:	2d05      	cmp	r5, #5
 8008db4:	e7de      	b.n	8008d74 <_scanf_float+0x1dc>
 8008db6:	2d02      	cmp	r5, #2
 8008db8:	f47f af21 	bne.w	8008bfe <_scanf_float+0x66>
 8008dbc:	2503      	movs	r5, #3
 8008dbe:	e7b6      	b.n	8008d2e <_scanf_float+0x196>
 8008dc0:	2d06      	cmp	r5, #6
 8008dc2:	f47f af1c 	bne.w	8008bfe <_scanf_float+0x66>
 8008dc6:	2507      	movs	r5, #7
 8008dc8:	e7b1      	b.n	8008d2e <_scanf_float+0x196>
 8008dca:	6822      	ldr	r2, [r4, #0]
 8008dcc:	0591      	lsls	r1, r2, #22
 8008dce:	f57f af16 	bpl.w	8008bfe <_scanf_float+0x66>
 8008dd2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008dd6:	6022      	str	r2, [r4, #0]
 8008dd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ddc:	e7a7      	b.n	8008d2e <_scanf_float+0x196>
 8008dde:	6822      	ldr	r2, [r4, #0]
 8008de0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008de4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008de8:	d006      	beq.n	8008df8 <_scanf_float+0x260>
 8008dea:	0550      	lsls	r0, r2, #21
 8008dec:	f57f af07 	bpl.w	8008bfe <_scanf_float+0x66>
 8008df0:	f1b9 0f00 	cmp.w	r9, #0
 8008df4:	f000 80d9 	beq.w	8008faa <_scanf_float+0x412>
 8008df8:	0591      	lsls	r1, r2, #22
 8008dfa:	bf58      	it	pl
 8008dfc:	9902      	ldrpl	r1, [sp, #8]
 8008dfe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e02:	bf58      	it	pl
 8008e04:	eba9 0101 	subpl.w	r1, r9, r1
 8008e08:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008e0c:	f04f 0900 	mov.w	r9, #0
 8008e10:	bf58      	it	pl
 8008e12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e16:	6022      	str	r2, [r4, #0]
 8008e18:	e789      	b.n	8008d2e <_scanf_float+0x196>
 8008e1a:	f04f 0a03 	mov.w	sl, #3
 8008e1e:	e786      	b.n	8008d2e <_scanf_float+0x196>
 8008e20:	4639      	mov	r1, r7
 8008e22:	4640      	mov	r0, r8
 8008e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e28:	4798      	blx	r3
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	f43f aeda 	beq.w	8008be4 <_scanf_float+0x4c>
 8008e30:	e6e5      	b.n	8008bfe <_scanf_float+0x66>
 8008e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e36:	463a      	mov	r2, r7
 8008e38:	4640      	mov	r0, r8
 8008e3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e3e:	4798      	blx	r3
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	6123      	str	r3, [r4, #16]
 8008e46:	e6e7      	b.n	8008c18 <_scanf_float+0x80>
 8008e48:	1e6b      	subs	r3, r5, #1
 8008e4a:	2b06      	cmp	r3, #6
 8008e4c:	d824      	bhi.n	8008e98 <_scanf_float+0x300>
 8008e4e:	2d02      	cmp	r5, #2
 8008e50:	d836      	bhi.n	8008ec0 <_scanf_float+0x328>
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	429e      	cmp	r6, r3
 8008e56:	f67f aee3 	bls.w	8008c20 <_scanf_float+0x88>
 8008e5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e5e:	463a      	mov	r2, r7
 8008e60:	4640      	mov	r0, r8
 8008e62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e66:	4798      	blx	r3
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	e7f0      	b.n	8008e52 <_scanf_float+0x2ba>
 8008e70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e74:	463a      	mov	r2, r7
 8008e76:	4640      	mov	r0, r8
 8008e78:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008e7c:	4798      	blx	r3
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	6123      	str	r3, [r4, #16]
 8008e84:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008e88:	fa5f fa8a 	uxtb.w	sl, sl
 8008e8c:	f1ba 0f02 	cmp.w	sl, #2
 8008e90:	d1ee      	bne.n	8008e70 <_scanf_float+0x2d8>
 8008e92:	3d03      	subs	r5, #3
 8008e94:	b2ed      	uxtb	r5, r5
 8008e96:	1b76      	subs	r6, r6, r5
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	05da      	lsls	r2, r3, #23
 8008e9c:	d530      	bpl.n	8008f00 <_scanf_float+0x368>
 8008e9e:	055b      	lsls	r3, r3, #21
 8008ea0:	d511      	bpl.n	8008ec6 <_scanf_float+0x32e>
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	429e      	cmp	r6, r3
 8008ea6:	f67f aebb 	bls.w	8008c20 <_scanf_float+0x88>
 8008eaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008eae:	463a      	mov	r2, r7
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008eb6:	4798      	blx	r3
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	e7f0      	b.n	8008ea2 <_scanf_float+0x30a>
 8008ec0:	46aa      	mov	sl, r5
 8008ec2:	46b3      	mov	fp, r6
 8008ec4:	e7de      	b.n	8008e84 <_scanf_float+0x2ec>
 8008ec6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	2965      	cmp	r1, #101	@ 0x65
 8008ece:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008ed2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008ed6:	6123      	str	r3, [r4, #16]
 8008ed8:	d00c      	beq.n	8008ef4 <_scanf_float+0x35c>
 8008eda:	2945      	cmp	r1, #69	@ 0x45
 8008edc:	d00a      	beq.n	8008ef4 <_scanf_float+0x35c>
 8008ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4798      	blx	r3
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	1eb5      	subs	r5, r6, #2
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	463a      	mov	r2, r7
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008efc:	4798      	blx	r3
 8008efe:	462e      	mov	r6, r5
 8008f00:	6822      	ldr	r2, [r4, #0]
 8008f02:	f012 0210 	ands.w	r2, r2, #16
 8008f06:	d001      	beq.n	8008f0c <_scanf_float+0x374>
 8008f08:	2000      	movs	r0, #0
 8008f0a:	e68a      	b.n	8008c22 <_scanf_float+0x8a>
 8008f0c:	7032      	strb	r2, [r6, #0]
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f18:	d11c      	bne.n	8008f54 <_scanf_float+0x3bc>
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	454b      	cmp	r3, r9
 8008f1e:	eba3 0209 	sub.w	r2, r3, r9
 8008f22:	d123      	bne.n	8008f6c <_scanf_float+0x3d4>
 8008f24:	2200      	movs	r2, #0
 8008f26:	4640      	mov	r0, r8
 8008f28:	9901      	ldr	r1, [sp, #4]
 8008f2a:	f002 fbed 	bl	800b708 <_strtod_r>
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	6825      	ldr	r5, [r4, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f015 0f02 	tst.w	r5, #2
 8008f38:	4606      	mov	r6, r0
 8008f3a:	460f      	mov	r7, r1
 8008f3c:	f103 0204 	add.w	r2, r3, #4
 8008f40:	d01f      	beq.n	8008f82 <_scanf_float+0x3ea>
 8008f42:	9903      	ldr	r1, [sp, #12]
 8008f44:	600a      	str	r2, [r1, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	e9c3 6700 	strd	r6, r7, [r3]
 8008f4c:	68e3      	ldr	r3, [r4, #12]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	60e3      	str	r3, [r4, #12]
 8008f52:	e7d9      	b.n	8008f08 <_scanf_float+0x370>
 8008f54:	9b04      	ldr	r3, [sp, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0e4      	beq.n	8008f24 <_scanf_float+0x38c>
 8008f5a:	9905      	ldr	r1, [sp, #20]
 8008f5c:	230a      	movs	r3, #10
 8008f5e:	4640      	mov	r0, r8
 8008f60:	3101      	adds	r1, #1
 8008f62:	f002 fc51 	bl	800b808 <_strtol_r>
 8008f66:	9b04      	ldr	r3, [sp, #16]
 8008f68:	9e05      	ldr	r6, [sp, #20]
 8008f6a:	1ac2      	subs	r2, r0, r3
 8008f6c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008f70:	429e      	cmp	r6, r3
 8008f72:	bf28      	it	cs
 8008f74:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008f78:	4630      	mov	r0, r6
 8008f7a:	490d      	ldr	r1, [pc, #52]	@ (8008fb0 <_scanf_float+0x418>)
 8008f7c:	f000 f8de 	bl	800913c <siprintf>
 8008f80:	e7d0      	b.n	8008f24 <_scanf_float+0x38c>
 8008f82:	076d      	lsls	r5, r5, #29
 8008f84:	d4dd      	bmi.n	8008f42 <_scanf_float+0x3aa>
 8008f86:	9d03      	ldr	r5, [sp, #12]
 8008f88:	602a      	str	r2, [r5, #0]
 8008f8a:	681d      	ldr	r5, [r3, #0]
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	f7f7 fd3c 	bl	8000a0c <__aeabi_dcmpun>
 8008f94:	b120      	cbz	r0, 8008fa0 <_scanf_float+0x408>
 8008f96:	4807      	ldr	r0, [pc, #28]	@ (8008fb4 <_scanf_float+0x41c>)
 8008f98:	f000 f9c2 	bl	8009320 <nanf>
 8008f9c:	6028      	str	r0, [r5, #0]
 8008f9e:	e7d5      	b.n	8008f4c <_scanf_float+0x3b4>
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 fd90 	bl	8000ac8 <__aeabi_d2f>
 8008fa8:	e7f8      	b.n	8008f9c <_scanf_float+0x404>
 8008faa:	f04f 0900 	mov.w	r9, #0
 8008fae:	e62d      	b.n	8008c0c <_scanf_float+0x74>
 8008fb0:	0800d4ac 	.word	0x0800d4ac
 8008fb4:	0800d845 	.word	0x0800d845

08008fb8 <std>:
 8008fb8:	2300      	movs	r3, #0
 8008fba:	b510      	push	{r4, lr}
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fc6:	6083      	str	r3, [r0, #8]
 8008fc8:	8181      	strh	r1, [r0, #12]
 8008fca:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fcc:	81c2      	strh	r2, [r0, #14]
 8008fce:	6183      	str	r3, [r0, #24]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	305c      	adds	r0, #92	@ 0x5c
 8008fd6:	f000 f914 	bl	8009202 <memset>
 8008fda:	4b0d      	ldr	r3, [pc, #52]	@ (8009010 <std+0x58>)
 8008fdc:	6224      	str	r4, [r4, #32]
 8008fde:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8009014 <std+0x5c>)
 8008fe2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8009018 <std+0x60>)
 8008fe6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800901c <std+0x64>)
 8008fea:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fec:	4b0c      	ldr	r3, [pc, #48]	@ (8009020 <std+0x68>)
 8008fee:	429c      	cmp	r4, r3
 8008ff0:	d006      	beq.n	8009000 <std+0x48>
 8008ff2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ff6:	4294      	cmp	r4, r2
 8008ff8:	d002      	beq.n	8009000 <std+0x48>
 8008ffa:	33d0      	adds	r3, #208	@ 0xd0
 8008ffc:	429c      	cmp	r4, r3
 8008ffe:	d105      	bne.n	800900c <std+0x54>
 8009000:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009008:	f000 b978 	b.w	80092fc <__retarget_lock_init_recursive>
 800900c:	bd10      	pop	{r4, pc}
 800900e:	bf00      	nop
 8009010:	0800917d 	.word	0x0800917d
 8009014:	0800919f 	.word	0x0800919f
 8009018:	080091d7 	.word	0x080091d7
 800901c:	080091fb 	.word	0x080091fb
 8009020:	20002608 	.word	0x20002608

08009024 <stdio_exit_handler>:
 8009024:	4a02      	ldr	r2, [pc, #8]	@ (8009030 <stdio_exit_handler+0xc>)
 8009026:	4903      	ldr	r1, [pc, #12]	@ (8009034 <stdio_exit_handler+0x10>)
 8009028:	4803      	ldr	r0, [pc, #12]	@ (8009038 <stdio_exit_handler+0x14>)
 800902a:	f000 b869 	b.w	8009100 <_fwalk_sglue>
 800902e:	bf00      	nop
 8009030:	20000058 	.word	0x20000058
 8009034:	0800bbbd 	.word	0x0800bbbd
 8009038:	20000068 	.word	0x20000068

0800903c <cleanup_stdio>:
 800903c:	6841      	ldr	r1, [r0, #4]
 800903e:	4b0c      	ldr	r3, [pc, #48]	@ (8009070 <cleanup_stdio+0x34>)
 8009040:	b510      	push	{r4, lr}
 8009042:	4299      	cmp	r1, r3
 8009044:	4604      	mov	r4, r0
 8009046:	d001      	beq.n	800904c <cleanup_stdio+0x10>
 8009048:	f002 fdb8 	bl	800bbbc <_fflush_r>
 800904c:	68a1      	ldr	r1, [r4, #8]
 800904e:	4b09      	ldr	r3, [pc, #36]	@ (8009074 <cleanup_stdio+0x38>)
 8009050:	4299      	cmp	r1, r3
 8009052:	d002      	beq.n	800905a <cleanup_stdio+0x1e>
 8009054:	4620      	mov	r0, r4
 8009056:	f002 fdb1 	bl	800bbbc <_fflush_r>
 800905a:	68e1      	ldr	r1, [r4, #12]
 800905c:	4b06      	ldr	r3, [pc, #24]	@ (8009078 <cleanup_stdio+0x3c>)
 800905e:	4299      	cmp	r1, r3
 8009060:	d004      	beq.n	800906c <cleanup_stdio+0x30>
 8009062:	4620      	mov	r0, r4
 8009064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009068:	f002 bda8 	b.w	800bbbc <_fflush_r>
 800906c:	bd10      	pop	{r4, pc}
 800906e:	bf00      	nop
 8009070:	20002608 	.word	0x20002608
 8009074:	20002670 	.word	0x20002670
 8009078:	200026d8 	.word	0x200026d8

0800907c <global_stdio_init.part.0>:
 800907c:	b510      	push	{r4, lr}
 800907e:	4b0b      	ldr	r3, [pc, #44]	@ (80090ac <global_stdio_init.part.0+0x30>)
 8009080:	4c0b      	ldr	r4, [pc, #44]	@ (80090b0 <global_stdio_init.part.0+0x34>)
 8009082:	4a0c      	ldr	r2, [pc, #48]	@ (80090b4 <global_stdio_init.part.0+0x38>)
 8009084:	4620      	mov	r0, r4
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	2104      	movs	r1, #4
 800908a:	2200      	movs	r2, #0
 800908c:	f7ff ff94 	bl	8008fb8 <std>
 8009090:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009094:	2201      	movs	r2, #1
 8009096:	2109      	movs	r1, #9
 8009098:	f7ff ff8e 	bl	8008fb8 <std>
 800909c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090a0:	2202      	movs	r2, #2
 80090a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a6:	2112      	movs	r1, #18
 80090a8:	f7ff bf86 	b.w	8008fb8 <std>
 80090ac:	20002740 	.word	0x20002740
 80090b0:	20002608 	.word	0x20002608
 80090b4:	08009025 	.word	0x08009025

080090b8 <__sfp_lock_acquire>:
 80090b8:	4801      	ldr	r0, [pc, #4]	@ (80090c0 <__sfp_lock_acquire+0x8>)
 80090ba:	f000 b920 	b.w	80092fe <__retarget_lock_acquire_recursive>
 80090be:	bf00      	nop
 80090c0:	20002749 	.word	0x20002749

080090c4 <__sfp_lock_release>:
 80090c4:	4801      	ldr	r0, [pc, #4]	@ (80090cc <__sfp_lock_release+0x8>)
 80090c6:	f000 b91b 	b.w	8009300 <__retarget_lock_release_recursive>
 80090ca:	bf00      	nop
 80090cc:	20002749 	.word	0x20002749

080090d0 <__sinit>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	4604      	mov	r4, r0
 80090d4:	f7ff fff0 	bl	80090b8 <__sfp_lock_acquire>
 80090d8:	6a23      	ldr	r3, [r4, #32]
 80090da:	b11b      	cbz	r3, 80090e4 <__sinit+0x14>
 80090dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e0:	f7ff bff0 	b.w	80090c4 <__sfp_lock_release>
 80090e4:	4b04      	ldr	r3, [pc, #16]	@ (80090f8 <__sinit+0x28>)
 80090e6:	6223      	str	r3, [r4, #32]
 80090e8:	4b04      	ldr	r3, [pc, #16]	@ (80090fc <__sinit+0x2c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1f5      	bne.n	80090dc <__sinit+0xc>
 80090f0:	f7ff ffc4 	bl	800907c <global_stdio_init.part.0>
 80090f4:	e7f2      	b.n	80090dc <__sinit+0xc>
 80090f6:	bf00      	nop
 80090f8:	0800903d 	.word	0x0800903d
 80090fc:	20002740 	.word	0x20002740

08009100 <_fwalk_sglue>:
 8009100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009104:	4607      	mov	r7, r0
 8009106:	4688      	mov	r8, r1
 8009108:	4614      	mov	r4, r2
 800910a:	2600      	movs	r6, #0
 800910c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009110:	f1b9 0901 	subs.w	r9, r9, #1
 8009114:	d505      	bpl.n	8009122 <_fwalk_sglue+0x22>
 8009116:	6824      	ldr	r4, [r4, #0]
 8009118:	2c00      	cmp	r4, #0
 800911a:	d1f7      	bne.n	800910c <_fwalk_sglue+0xc>
 800911c:	4630      	mov	r0, r6
 800911e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009122:	89ab      	ldrh	r3, [r5, #12]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d907      	bls.n	8009138 <_fwalk_sglue+0x38>
 8009128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800912c:	3301      	adds	r3, #1
 800912e:	d003      	beq.n	8009138 <_fwalk_sglue+0x38>
 8009130:	4629      	mov	r1, r5
 8009132:	4638      	mov	r0, r7
 8009134:	47c0      	blx	r8
 8009136:	4306      	orrs	r6, r0
 8009138:	3568      	adds	r5, #104	@ 0x68
 800913a:	e7e9      	b.n	8009110 <_fwalk_sglue+0x10>

0800913c <siprintf>:
 800913c:	b40e      	push	{r1, r2, r3}
 800913e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009142:	b500      	push	{lr}
 8009144:	b09c      	sub	sp, #112	@ 0x70
 8009146:	ab1d      	add	r3, sp, #116	@ 0x74
 8009148:	9002      	str	r0, [sp, #8]
 800914a:	9006      	str	r0, [sp, #24]
 800914c:	9107      	str	r1, [sp, #28]
 800914e:	9104      	str	r1, [sp, #16]
 8009150:	4808      	ldr	r0, [pc, #32]	@ (8009174 <siprintf+0x38>)
 8009152:	4909      	ldr	r1, [pc, #36]	@ (8009178 <siprintf+0x3c>)
 8009154:	f853 2b04 	ldr.w	r2, [r3], #4
 8009158:	9105      	str	r1, [sp, #20]
 800915a:	6800      	ldr	r0, [r0, #0]
 800915c:	a902      	add	r1, sp, #8
 800915e:	9301      	str	r3, [sp, #4]
 8009160:	f002 fbb0 	bl	800b8c4 <_svfiprintf_r>
 8009164:	2200      	movs	r2, #0
 8009166:	9b02      	ldr	r3, [sp, #8]
 8009168:	701a      	strb	r2, [r3, #0]
 800916a:	b01c      	add	sp, #112	@ 0x70
 800916c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009170:	b003      	add	sp, #12
 8009172:	4770      	bx	lr
 8009174:	20000064 	.word	0x20000064
 8009178:	ffff0208 	.word	0xffff0208

0800917c <__sread>:
 800917c:	b510      	push	{r4, lr}
 800917e:	460c      	mov	r4, r1
 8009180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009184:	f000 f86c 	bl	8009260 <_read_r>
 8009188:	2800      	cmp	r0, #0
 800918a:	bfab      	itete	ge
 800918c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800918e:	89a3      	ldrhlt	r3, [r4, #12]
 8009190:	181b      	addge	r3, r3, r0
 8009192:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009196:	bfac      	ite	ge
 8009198:	6563      	strge	r3, [r4, #84]	@ 0x54
 800919a:	81a3      	strhlt	r3, [r4, #12]
 800919c:	bd10      	pop	{r4, pc}

0800919e <__swrite>:
 800919e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a2:	461f      	mov	r7, r3
 80091a4:	898b      	ldrh	r3, [r1, #12]
 80091a6:	4605      	mov	r5, r0
 80091a8:	05db      	lsls	r3, r3, #23
 80091aa:	460c      	mov	r4, r1
 80091ac:	4616      	mov	r6, r2
 80091ae:	d505      	bpl.n	80091bc <__swrite+0x1e>
 80091b0:	2302      	movs	r3, #2
 80091b2:	2200      	movs	r2, #0
 80091b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b8:	f000 f840 	bl	800923c <_lseek_r>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	4632      	mov	r2, r6
 80091c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	4628      	mov	r0, r5
 80091c8:	463b      	mov	r3, r7
 80091ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091d2:	f000 b857 	b.w	8009284 <_write_r>

080091d6 <__sseek>:
 80091d6:	b510      	push	{r4, lr}
 80091d8:	460c      	mov	r4, r1
 80091da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091de:	f000 f82d 	bl	800923c <_lseek_r>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	bf15      	itete	ne
 80091e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091f2:	81a3      	strheq	r3, [r4, #12]
 80091f4:	bf18      	it	ne
 80091f6:	81a3      	strhne	r3, [r4, #12]
 80091f8:	bd10      	pop	{r4, pc}

080091fa <__sclose>:
 80091fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fe:	f000 b80d 	b.w	800921c <_close_r>

08009202 <memset>:
 8009202:	4603      	mov	r3, r0
 8009204:	4402      	add	r2, r0
 8009206:	4293      	cmp	r3, r2
 8009208:	d100      	bne.n	800920c <memset+0xa>
 800920a:	4770      	bx	lr
 800920c:	f803 1b01 	strb.w	r1, [r3], #1
 8009210:	e7f9      	b.n	8009206 <memset+0x4>
	...

08009214 <_localeconv_r>:
 8009214:	4800      	ldr	r0, [pc, #0]	@ (8009218 <_localeconv_r+0x4>)
 8009216:	4770      	bx	lr
 8009218:	200001a4 	.word	0x200001a4

0800921c <_close_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	2300      	movs	r3, #0
 8009220:	4d05      	ldr	r5, [pc, #20]	@ (8009238 <_close_r+0x1c>)
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	f7f9 f893 	bl	8002352 <_close>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_close_r+0x1a>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_close_r+0x1a>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20002744 	.word	0x20002744

0800923c <_lseek_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	2200      	movs	r2, #0
 8009246:	4d05      	ldr	r5, [pc, #20]	@ (800925c <_lseek_r+0x20>)
 8009248:	602a      	str	r2, [r5, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f7f9 f8a5 	bl	800239a <_lseek>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_lseek_r+0x1e>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_lseek_r+0x1e>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20002744 	.word	0x20002744

08009260 <_read_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	2200      	movs	r2, #0
 800926a:	4d05      	ldr	r5, [pc, #20]	@ (8009280 <_read_r+0x20>)
 800926c:	602a      	str	r2, [r5, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f7f9 f836 	bl	80022e0 <_read>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_read_r+0x1e>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_read_r+0x1e>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	20002744 	.word	0x20002744

08009284 <_write_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	4611      	mov	r1, r2
 800928c:	2200      	movs	r2, #0
 800928e:	4d05      	ldr	r5, [pc, #20]	@ (80092a4 <_write_r+0x20>)
 8009290:	602a      	str	r2, [r5, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	f7f9 f841 	bl	800231a <_write>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_write_r+0x1e>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_write_r+0x1e>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	20002744 	.word	0x20002744

080092a8 <__errno>:
 80092a8:	4b01      	ldr	r3, [pc, #4]	@ (80092b0 <__errno+0x8>)
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	20000064 	.word	0x20000064

080092b4 <__libc_init_array>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	2600      	movs	r6, #0
 80092b8:	4d0c      	ldr	r5, [pc, #48]	@ (80092ec <__libc_init_array+0x38>)
 80092ba:	4c0d      	ldr	r4, [pc, #52]	@ (80092f0 <__libc_init_array+0x3c>)
 80092bc:	1b64      	subs	r4, r4, r5
 80092be:	10a4      	asrs	r4, r4, #2
 80092c0:	42a6      	cmp	r6, r4
 80092c2:	d109      	bne.n	80092d8 <__libc_init_array+0x24>
 80092c4:	f003 fb66 	bl	800c994 <_init>
 80092c8:	2600      	movs	r6, #0
 80092ca:	4d0a      	ldr	r5, [pc, #40]	@ (80092f4 <__libc_init_array+0x40>)
 80092cc:	4c0a      	ldr	r4, [pc, #40]	@ (80092f8 <__libc_init_array+0x44>)
 80092ce:	1b64      	subs	r4, r4, r5
 80092d0:	10a4      	asrs	r4, r4, #2
 80092d2:	42a6      	cmp	r6, r4
 80092d4:	d105      	bne.n	80092e2 <__libc_init_array+0x2e>
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092dc:	4798      	blx	r3
 80092de:	3601      	adds	r6, #1
 80092e0:	e7ee      	b.n	80092c0 <__libc_init_array+0xc>
 80092e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e6:	4798      	blx	r3
 80092e8:	3601      	adds	r6, #1
 80092ea:	e7f2      	b.n	80092d2 <__libc_init_array+0x1e>
 80092ec:	0800d8b0 	.word	0x0800d8b0
 80092f0:	0800d8b0 	.word	0x0800d8b0
 80092f4:	0800d8b0 	.word	0x0800d8b0
 80092f8:	0800d8b4 	.word	0x0800d8b4

080092fc <__retarget_lock_init_recursive>:
 80092fc:	4770      	bx	lr

080092fe <__retarget_lock_acquire_recursive>:
 80092fe:	4770      	bx	lr

08009300 <__retarget_lock_release_recursive>:
 8009300:	4770      	bx	lr

08009302 <memchr>:
 8009302:	4603      	mov	r3, r0
 8009304:	b510      	push	{r4, lr}
 8009306:	b2c9      	uxtb	r1, r1
 8009308:	4402      	add	r2, r0
 800930a:	4293      	cmp	r3, r2
 800930c:	4618      	mov	r0, r3
 800930e:	d101      	bne.n	8009314 <memchr+0x12>
 8009310:	2000      	movs	r0, #0
 8009312:	e003      	b.n	800931c <memchr+0x1a>
 8009314:	7804      	ldrb	r4, [r0, #0]
 8009316:	3301      	adds	r3, #1
 8009318:	428c      	cmp	r4, r1
 800931a:	d1f6      	bne.n	800930a <memchr+0x8>
 800931c:	bd10      	pop	{r4, pc}
	...

08009320 <nanf>:
 8009320:	4800      	ldr	r0, [pc, #0]	@ (8009324 <nanf+0x4>)
 8009322:	4770      	bx	lr
 8009324:	7fc00000 	.word	0x7fc00000

08009328 <quorem>:
 8009328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	6903      	ldr	r3, [r0, #16]
 800932e:	690c      	ldr	r4, [r1, #16]
 8009330:	4607      	mov	r7, r0
 8009332:	42a3      	cmp	r3, r4
 8009334:	db7e      	blt.n	8009434 <quorem+0x10c>
 8009336:	3c01      	subs	r4, #1
 8009338:	00a3      	lsls	r3, r4, #2
 800933a:	f100 0514 	add.w	r5, r0, #20
 800933e:	f101 0814 	add.w	r8, r1, #20
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800934e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009352:	3301      	adds	r3, #1
 8009354:	429a      	cmp	r2, r3
 8009356:	fbb2 f6f3 	udiv	r6, r2, r3
 800935a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800935e:	d32e      	bcc.n	80093be <quorem+0x96>
 8009360:	f04f 0a00 	mov.w	sl, #0
 8009364:	46c4      	mov	ip, r8
 8009366:	46ae      	mov	lr, r5
 8009368:	46d3      	mov	fp, sl
 800936a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800936e:	b298      	uxth	r0, r3
 8009370:	fb06 a000 	mla	r0, r6, r0, sl
 8009374:	0c1b      	lsrs	r3, r3, #16
 8009376:	0c02      	lsrs	r2, r0, #16
 8009378:	fb06 2303 	mla	r3, r6, r3, r2
 800937c:	f8de 2000 	ldr.w	r2, [lr]
 8009380:	b280      	uxth	r0, r0
 8009382:	b292      	uxth	r2, r2
 8009384:	1a12      	subs	r2, r2, r0
 8009386:	445a      	add	r2, fp
 8009388:	f8de 0000 	ldr.w	r0, [lr]
 800938c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009390:	b29b      	uxth	r3, r3
 8009392:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009396:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800939a:	b292      	uxth	r2, r2
 800939c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093a0:	45e1      	cmp	r9, ip
 80093a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093a6:	f84e 2b04 	str.w	r2, [lr], #4
 80093aa:	d2de      	bcs.n	800936a <quorem+0x42>
 80093ac:	9b00      	ldr	r3, [sp, #0]
 80093ae:	58eb      	ldr	r3, [r5, r3]
 80093b0:	b92b      	cbnz	r3, 80093be <quorem+0x96>
 80093b2:	9b01      	ldr	r3, [sp, #4]
 80093b4:	3b04      	subs	r3, #4
 80093b6:	429d      	cmp	r5, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	d32f      	bcc.n	800941c <quorem+0xf4>
 80093bc:	613c      	str	r4, [r7, #16]
 80093be:	4638      	mov	r0, r7
 80093c0:	f001 f9c2 	bl	800a748 <__mcmp>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	db25      	blt.n	8009414 <quorem+0xec>
 80093c8:	4629      	mov	r1, r5
 80093ca:	2000      	movs	r0, #0
 80093cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80093d0:	f8d1 c000 	ldr.w	ip, [r1]
 80093d4:	fa1f fe82 	uxth.w	lr, r2
 80093d8:	fa1f f38c 	uxth.w	r3, ip
 80093dc:	eba3 030e 	sub.w	r3, r3, lr
 80093e0:	4403      	add	r3, r0
 80093e2:	0c12      	lsrs	r2, r2, #16
 80093e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093f2:	45c1      	cmp	r9, r8
 80093f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093f8:	f841 3b04 	str.w	r3, [r1], #4
 80093fc:	d2e6      	bcs.n	80093cc <quorem+0xa4>
 80093fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009406:	b922      	cbnz	r2, 8009412 <quorem+0xea>
 8009408:	3b04      	subs	r3, #4
 800940a:	429d      	cmp	r5, r3
 800940c:	461a      	mov	r2, r3
 800940e:	d30b      	bcc.n	8009428 <quorem+0x100>
 8009410:	613c      	str	r4, [r7, #16]
 8009412:	3601      	adds	r6, #1
 8009414:	4630      	mov	r0, r6
 8009416:	b003      	add	sp, #12
 8009418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941c:	6812      	ldr	r2, [r2, #0]
 800941e:	3b04      	subs	r3, #4
 8009420:	2a00      	cmp	r2, #0
 8009422:	d1cb      	bne.n	80093bc <quorem+0x94>
 8009424:	3c01      	subs	r4, #1
 8009426:	e7c6      	b.n	80093b6 <quorem+0x8e>
 8009428:	6812      	ldr	r2, [r2, #0]
 800942a:	3b04      	subs	r3, #4
 800942c:	2a00      	cmp	r2, #0
 800942e:	d1ef      	bne.n	8009410 <quorem+0xe8>
 8009430:	3c01      	subs	r4, #1
 8009432:	e7ea      	b.n	800940a <quorem+0xe2>
 8009434:	2000      	movs	r0, #0
 8009436:	e7ee      	b.n	8009416 <quorem+0xee>

08009438 <_dtoa_r>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	4614      	mov	r4, r2
 800943e:	461d      	mov	r5, r3
 8009440:	69c7      	ldr	r7, [r0, #28]
 8009442:	b097      	sub	sp, #92	@ 0x5c
 8009444:	4683      	mov	fp, r0
 8009446:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800944a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800944c:	b97f      	cbnz	r7, 800946e <_dtoa_r+0x36>
 800944e:	2010      	movs	r0, #16
 8009450:	f000 fe02 	bl	800a058 <malloc>
 8009454:	4602      	mov	r2, r0
 8009456:	f8cb 001c 	str.w	r0, [fp, #28]
 800945a:	b920      	cbnz	r0, 8009466 <_dtoa_r+0x2e>
 800945c:	21ef      	movs	r1, #239	@ 0xef
 800945e:	4ba8      	ldr	r3, [pc, #672]	@ (8009700 <_dtoa_r+0x2c8>)
 8009460:	48a8      	ldr	r0, [pc, #672]	@ (8009704 <_dtoa_r+0x2cc>)
 8009462:	f002 fc23 	bl	800bcac <__assert_func>
 8009466:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800946a:	6007      	str	r7, [r0, #0]
 800946c:	60c7      	str	r7, [r0, #12]
 800946e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	b159      	cbz	r1, 800948e <_dtoa_r+0x56>
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	2301      	movs	r3, #1
 800947a:	4093      	lsls	r3, r2
 800947c:	604a      	str	r2, [r1, #4]
 800947e:	608b      	str	r3, [r1, #8]
 8009480:	4658      	mov	r0, fp
 8009482:	f000 fedf 	bl	800a244 <_Bfree>
 8009486:	2200      	movs	r2, #0
 8009488:	f8db 301c 	ldr.w	r3, [fp, #28]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	1e2b      	subs	r3, r5, #0
 8009490:	bfaf      	iteee	ge
 8009492:	2300      	movge	r3, #0
 8009494:	2201      	movlt	r2, #1
 8009496:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800949a:	9303      	strlt	r3, [sp, #12]
 800949c:	bfa8      	it	ge
 800949e:	6033      	strge	r3, [r6, #0]
 80094a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80094a4:	4b98      	ldr	r3, [pc, #608]	@ (8009708 <_dtoa_r+0x2d0>)
 80094a6:	bfb8      	it	lt
 80094a8:	6032      	strlt	r2, [r6, #0]
 80094aa:	ea33 0308 	bics.w	r3, r3, r8
 80094ae:	d112      	bne.n	80094d6 <_dtoa_r+0x9e>
 80094b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80094bc:	4323      	orrs	r3, r4
 80094be:	f000 8550 	beq.w	8009f62 <_dtoa_r+0xb2a>
 80094c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800970c <_dtoa_r+0x2d4>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8552 	beq.w	8009f72 <_dtoa_r+0xb3a>
 80094ce:	f10a 0303 	add.w	r3, sl, #3
 80094d2:	f000 bd4c 	b.w	8009f6e <_dtoa_r+0xb36>
 80094d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e2:	2200      	movs	r2, #0
 80094e4:	2300      	movs	r3, #0
 80094e6:	f7f7 fa5f 	bl	80009a8 <__aeabi_dcmpeq>
 80094ea:	4607      	mov	r7, r0
 80094ec:	b158      	cbz	r0, 8009506 <_dtoa_r+0xce>
 80094ee:	2301      	movs	r3, #1
 80094f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094f6:	b113      	cbz	r3, 80094fe <_dtoa_r+0xc6>
 80094f8:	4b85      	ldr	r3, [pc, #532]	@ (8009710 <_dtoa_r+0x2d8>)
 80094fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009714 <_dtoa_r+0x2dc>
 8009502:	f000 bd36 	b.w	8009f72 <_dtoa_r+0xb3a>
 8009506:	ab14      	add	r3, sp, #80	@ 0x50
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	ab15      	add	r3, sp, #84	@ 0x54
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	4658      	mov	r0, fp
 8009510:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009514:	f001 fa30 	bl	800a978 <__d2b>
 8009518:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800951c:	4681      	mov	r9, r0
 800951e:	2e00      	cmp	r6, #0
 8009520:	d077      	beq.n	8009612 <_dtoa_r+0x1da>
 8009522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009528:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800952c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009530:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009534:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009538:	9712      	str	r7, [sp, #72]	@ 0x48
 800953a:	4619      	mov	r1, r3
 800953c:	2200      	movs	r2, #0
 800953e:	4b76      	ldr	r3, [pc, #472]	@ (8009718 <_dtoa_r+0x2e0>)
 8009540:	f7f6 fe12 	bl	8000168 <__aeabi_dsub>
 8009544:	a368      	add	r3, pc, #416	@ (adr r3, 80096e8 <_dtoa_r+0x2b0>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f7f6 ffc5 	bl	80004d8 <__aeabi_dmul>
 800954e:	a368      	add	r3, pc, #416	@ (adr r3, 80096f0 <_dtoa_r+0x2b8>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f6 fe0a 	bl	800016c <__adddf3>
 8009558:	4604      	mov	r4, r0
 800955a:	4630      	mov	r0, r6
 800955c:	460d      	mov	r5, r1
 800955e:	f7f6 ff51 	bl	8000404 <__aeabi_i2d>
 8009562:	a365      	add	r3, pc, #404	@ (adr r3, 80096f8 <_dtoa_r+0x2c0>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f6 ffb6 	bl	80004d8 <__aeabi_dmul>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4620      	mov	r0, r4
 8009572:	4629      	mov	r1, r5
 8009574:	f7f6 fdfa 	bl	800016c <__adddf3>
 8009578:	4604      	mov	r4, r0
 800957a:	460d      	mov	r5, r1
 800957c:	f7f7 fa5c 	bl	8000a38 <__aeabi_d2iz>
 8009580:	2200      	movs	r2, #0
 8009582:	4607      	mov	r7, r0
 8009584:	2300      	movs	r3, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 fa17 	bl	80009bc <__aeabi_dcmplt>
 800958e:	b140      	cbz	r0, 80095a2 <_dtoa_r+0x16a>
 8009590:	4638      	mov	r0, r7
 8009592:	f7f6 ff37 	bl	8000404 <__aeabi_i2d>
 8009596:	4622      	mov	r2, r4
 8009598:	462b      	mov	r3, r5
 800959a:	f7f7 fa05 	bl	80009a8 <__aeabi_dcmpeq>
 800959e:	b900      	cbnz	r0, 80095a2 <_dtoa_r+0x16a>
 80095a0:	3f01      	subs	r7, #1
 80095a2:	2f16      	cmp	r7, #22
 80095a4:	d853      	bhi.n	800964e <_dtoa_r+0x216>
 80095a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095aa:	4b5c      	ldr	r3, [pc, #368]	@ (800971c <_dtoa_r+0x2e4>)
 80095ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f7 fa02 	bl	80009bc <__aeabi_dcmplt>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d04a      	beq.n	8009652 <_dtoa_r+0x21a>
 80095bc:	2300      	movs	r3, #0
 80095be:	3f01      	subs	r7, #1
 80095c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095c4:	1b9b      	subs	r3, r3, r6
 80095c6:	1e5a      	subs	r2, r3, #1
 80095c8:	bf46      	itte	mi
 80095ca:	f1c3 0801 	rsbmi	r8, r3, #1
 80095ce:	2300      	movmi	r3, #0
 80095d0:	f04f 0800 	movpl.w	r8, #0
 80095d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80095d6:	bf48      	it	mi
 80095d8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80095da:	2f00      	cmp	r7, #0
 80095dc:	db3b      	blt.n	8009656 <_dtoa_r+0x21e>
 80095de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e0:	970e      	str	r7, [sp, #56]	@ 0x38
 80095e2:	443b      	add	r3, r7
 80095e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e6:	2300      	movs	r3, #0
 80095e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80095ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095ec:	2b09      	cmp	r3, #9
 80095ee:	d866      	bhi.n	80096be <_dtoa_r+0x286>
 80095f0:	2b05      	cmp	r3, #5
 80095f2:	bfc4      	itt	gt
 80095f4:	3b04      	subgt	r3, #4
 80095f6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80095f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095fa:	bfc8      	it	gt
 80095fc:	2400      	movgt	r4, #0
 80095fe:	f1a3 0302 	sub.w	r3, r3, #2
 8009602:	bfd8      	it	le
 8009604:	2401      	movle	r4, #1
 8009606:	2b03      	cmp	r3, #3
 8009608:	d864      	bhi.n	80096d4 <_dtoa_r+0x29c>
 800960a:	e8df f003 	tbb	[pc, r3]
 800960e:	382b      	.short	0x382b
 8009610:	5636      	.short	0x5636
 8009612:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009616:	441e      	add	r6, r3
 8009618:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800961c:	2b20      	cmp	r3, #32
 800961e:	bfc1      	itttt	gt
 8009620:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009624:	fa08 f803 	lslgt.w	r8, r8, r3
 8009628:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800962c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009630:	bfd6      	itet	le
 8009632:	f1c3 0320 	rsble	r3, r3, #32
 8009636:	ea48 0003 	orrgt.w	r0, r8, r3
 800963a:	fa04 f003 	lslle.w	r0, r4, r3
 800963e:	f7f6 fed1 	bl	80003e4 <__aeabi_ui2d>
 8009642:	2201      	movs	r2, #1
 8009644:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009648:	3e01      	subs	r6, #1
 800964a:	9212      	str	r2, [sp, #72]	@ 0x48
 800964c:	e775      	b.n	800953a <_dtoa_r+0x102>
 800964e:	2301      	movs	r3, #1
 8009650:	e7b6      	b.n	80095c0 <_dtoa_r+0x188>
 8009652:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009654:	e7b5      	b.n	80095c2 <_dtoa_r+0x18a>
 8009656:	427b      	negs	r3, r7
 8009658:	930a      	str	r3, [sp, #40]	@ 0x28
 800965a:	2300      	movs	r3, #0
 800965c:	eba8 0807 	sub.w	r8, r8, r7
 8009660:	930e      	str	r3, [sp, #56]	@ 0x38
 8009662:	e7c2      	b.n	80095ea <_dtoa_r+0x1b2>
 8009664:	2300      	movs	r3, #0
 8009666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009668:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800966a:	2b00      	cmp	r3, #0
 800966c:	dc35      	bgt.n	80096da <_dtoa_r+0x2a2>
 800966e:	2301      	movs	r3, #1
 8009670:	461a      	mov	r2, r3
 8009672:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009676:	9221      	str	r2, [sp, #132]	@ 0x84
 8009678:	e00b      	b.n	8009692 <_dtoa_r+0x25a>
 800967a:	2301      	movs	r3, #1
 800967c:	e7f3      	b.n	8009666 <_dtoa_r+0x22e>
 800967e:	2300      	movs	r3, #0
 8009680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009682:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009684:	18fb      	adds	r3, r7, r3
 8009686:	9308      	str	r3, [sp, #32]
 8009688:	3301      	adds	r3, #1
 800968a:	2b01      	cmp	r3, #1
 800968c:	9307      	str	r3, [sp, #28]
 800968e:	bfb8      	it	lt
 8009690:	2301      	movlt	r3, #1
 8009692:	2100      	movs	r1, #0
 8009694:	2204      	movs	r2, #4
 8009696:	f8db 001c 	ldr.w	r0, [fp, #28]
 800969a:	f102 0514 	add.w	r5, r2, #20
 800969e:	429d      	cmp	r5, r3
 80096a0:	d91f      	bls.n	80096e2 <_dtoa_r+0x2aa>
 80096a2:	6041      	str	r1, [r0, #4]
 80096a4:	4658      	mov	r0, fp
 80096a6:	f000 fd8d 	bl	800a1c4 <_Balloc>
 80096aa:	4682      	mov	sl, r0
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d139      	bne.n	8009724 <_dtoa_r+0x2ec>
 80096b0:	4602      	mov	r2, r0
 80096b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80096b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009720 <_dtoa_r+0x2e8>)
 80096b8:	e6d2      	b.n	8009460 <_dtoa_r+0x28>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e7e0      	b.n	8009680 <_dtoa_r+0x248>
 80096be:	2401      	movs	r4, #1
 80096c0:	2300      	movs	r3, #0
 80096c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80096c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096ca:	2200      	movs	r2, #0
 80096cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80096d0:	2312      	movs	r3, #18
 80096d2:	e7d0      	b.n	8009676 <_dtoa_r+0x23e>
 80096d4:	2301      	movs	r3, #1
 80096d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096d8:	e7f5      	b.n	80096c6 <_dtoa_r+0x28e>
 80096da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80096e0:	e7d7      	b.n	8009692 <_dtoa_r+0x25a>
 80096e2:	3101      	adds	r1, #1
 80096e4:	0052      	lsls	r2, r2, #1
 80096e6:	e7d8      	b.n	800969a <_dtoa_r+0x262>
 80096e8:	636f4361 	.word	0x636f4361
 80096ec:	3fd287a7 	.word	0x3fd287a7
 80096f0:	8b60c8b3 	.word	0x8b60c8b3
 80096f4:	3fc68a28 	.word	0x3fc68a28
 80096f8:	509f79fb 	.word	0x509f79fb
 80096fc:	3fd34413 	.word	0x3fd34413
 8009700:	0800d4be 	.word	0x0800d4be
 8009704:	0800d4d5 	.word	0x0800d4d5
 8009708:	7ff00000 	.word	0x7ff00000
 800970c:	0800d4ba 	.word	0x0800d4ba
 8009710:	0800d489 	.word	0x0800d489
 8009714:	0800d488 	.word	0x0800d488
 8009718:	3ff80000 	.word	0x3ff80000
 800971c:	0800d5d0 	.word	0x0800d5d0
 8009720:	0800d52d 	.word	0x0800d52d
 8009724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009728:	6018      	str	r0, [r3, #0]
 800972a:	9b07      	ldr	r3, [sp, #28]
 800972c:	2b0e      	cmp	r3, #14
 800972e:	f200 80a4 	bhi.w	800987a <_dtoa_r+0x442>
 8009732:	2c00      	cmp	r4, #0
 8009734:	f000 80a1 	beq.w	800987a <_dtoa_r+0x442>
 8009738:	2f00      	cmp	r7, #0
 800973a:	dd33      	ble.n	80097a4 <_dtoa_r+0x36c>
 800973c:	4b86      	ldr	r3, [pc, #536]	@ (8009958 <_dtoa_r+0x520>)
 800973e:	f007 020f 	and.w	r2, r7, #15
 8009742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009746:	05f8      	lsls	r0, r7, #23
 8009748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800974c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009750:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009754:	d516      	bpl.n	8009784 <_dtoa_r+0x34c>
 8009756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800975a:	4b80      	ldr	r3, [pc, #512]	@ (800995c <_dtoa_r+0x524>)
 800975c:	2603      	movs	r6, #3
 800975e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009762:	f7f6 ffe3 	bl	800072c <__aeabi_ddiv>
 8009766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800976a:	f004 040f 	and.w	r4, r4, #15
 800976e:	4d7b      	ldr	r5, [pc, #492]	@ (800995c <_dtoa_r+0x524>)
 8009770:	b954      	cbnz	r4, 8009788 <_dtoa_r+0x350>
 8009772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800977a:	f7f6 ffd7 	bl	800072c <__aeabi_ddiv>
 800977e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009782:	e028      	b.n	80097d6 <_dtoa_r+0x39e>
 8009784:	2602      	movs	r6, #2
 8009786:	e7f2      	b.n	800976e <_dtoa_r+0x336>
 8009788:	07e1      	lsls	r1, r4, #31
 800978a:	d508      	bpl.n	800979e <_dtoa_r+0x366>
 800978c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009790:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009794:	f7f6 fea0 	bl	80004d8 <__aeabi_dmul>
 8009798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800979c:	3601      	adds	r6, #1
 800979e:	1064      	asrs	r4, r4, #1
 80097a0:	3508      	adds	r5, #8
 80097a2:	e7e5      	b.n	8009770 <_dtoa_r+0x338>
 80097a4:	f000 80d2 	beq.w	800994c <_dtoa_r+0x514>
 80097a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ac:	427c      	negs	r4, r7
 80097ae:	4b6a      	ldr	r3, [pc, #424]	@ (8009958 <_dtoa_r+0x520>)
 80097b0:	f004 020f 	and.w	r2, r4, #15
 80097b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f6 fe8c 	bl	80004d8 <__aeabi_dmul>
 80097c0:	2602      	movs	r6, #2
 80097c2:	2300      	movs	r3, #0
 80097c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c8:	4d64      	ldr	r5, [pc, #400]	@ (800995c <_dtoa_r+0x524>)
 80097ca:	1124      	asrs	r4, r4, #4
 80097cc:	2c00      	cmp	r4, #0
 80097ce:	f040 80b2 	bne.w	8009936 <_dtoa_r+0x4fe>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1d3      	bne.n	800977e <_dtoa_r+0x346>
 80097d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 80b7 	beq.w	8009950 <_dtoa_r+0x518>
 80097e2:	2200      	movs	r2, #0
 80097e4:	4620      	mov	r0, r4
 80097e6:	4629      	mov	r1, r5
 80097e8:	4b5d      	ldr	r3, [pc, #372]	@ (8009960 <_dtoa_r+0x528>)
 80097ea:	f7f7 f8e7 	bl	80009bc <__aeabi_dcmplt>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f000 80ae 	beq.w	8009950 <_dtoa_r+0x518>
 80097f4:	9b07      	ldr	r3, [sp, #28]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 80aa 	beq.w	8009950 <_dtoa_r+0x518>
 80097fc:	9b08      	ldr	r3, [sp, #32]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd37      	ble.n	8009872 <_dtoa_r+0x43a>
 8009802:	1e7b      	subs	r3, r7, #1
 8009804:	4620      	mov	r0, r4
 8009806:	9304      	str	r3, [sp, #16]
 8009808:	2200      	movs	r2, #0
 800980a:	4629      	mov	r1, r5
 800980c:	4b55      	ldr	r3, [pc, #340]	@ (8009964 <_dtoa_r+0x52c>)
 800980e:	f7f6 fe63 	bl	80004d8 <__aeabi_dmul>
 8009812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009816:	9c08      	ldr	r4, [sp, #32]
 8009818:	3601      	adds	r6, #1
 800981a:	4630      	mov	r0, r6
 800981c:	f7f6 fdf2 	bl	8000404 <__aeabi_i2d>
 8009820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009824:	f7f6 fe58 	bl	80004d8 <__aeabi_dmul>
 8009828:	2200      	movs	r2, #0
 800982a:	4b4f      	ldr	r3, [pc, #316]	@ (8009968 <_dtoa_r+0x530>)
 800982c:	f7f6 fc9e 	bl	800016c <__adddf3>
 8009830:	4605      	mov	r5, r0
 8009832:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009836:	2c00      	cmp	r4, #0
 8009838:	f040 809a 	bne.w	8009970 <_dtoa_r+0x538>
 800983c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009840:	2200      	movs	r2, #0
 8009842:	4b4a      	ldr	r3, [pc, #296]	@ (800996c <_dtoa_r+0x534>)
 8009844:	f7f6 fc90 	bl	8000168 <__aeabi_dsub>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009850:	462a      	mov	r2, r5
 8009852:	4633      	mov	r3, r6
 8009854:	f7f7 f8d0 	bl	80009f8 <__aeabi_dcmpgt>
 8009858:	2800      	cmp	r0, #0
 800985a:	f040 828e 	bne.w	8009d7a <_dtoa_r+0x942>
 800985e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009862:	462a      	mov	r2, r5
 8009864:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009868:	f7f7 f8a8 	bl	80009bc <__aeabi_dcmplt>
 800986c:	2800      	cmp	r0, #0
 800986e:	f040 8127 	bne.w	8009ac0 <_dtoa_r+0x688>
 8009872:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800987a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800987c:	2b00      	cmp	r3, #0
 800987e:	f2c0 8163 	blt.w	8009b48 <_dtoa_r+0x710>
 8009882:	2f0e      	cmp	r7, #14
 8009884:	f300 8160 	bgt.w	8009b48 <_dtoa_r+0x710>
 8009888:	4b33      	ldr	r3, [pc, #204]	@ (8009958 <_dtoa_r+0x520>)
 800988a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800988e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009892:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009896:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009898:	2b00      	cmp	r3, #0
 800989a:	da03      	bge.n	80098a4 <_dtoa_r+0x46c>
 800989c:	9b07      	ldr	r3, [sp, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f340 8100 	ble.w	8009aa4 <_dtoa_r+0x66c>
 80098a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098a8:	4656      	mov	r6, sl
 80098aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ae:	4620      	mov	r0, r4
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7f6 ff3b 	bl	800072c <__aeabi_ddiv>
 80098b6:	f7f7 f8bf 	bl	8000a38 <__aeabi_d2iz>
 80098ba:	4680      	mov	r8, r0
 80098bc:	f7f6 fda2 	bl	8000404 <__aeabi_i2d>
 80098c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098c4:	f7f6 fe08 	bl	80004d8 <__aeabi_dmul>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4620      	mov	r0, r4
 80098ce:	4629      	mov	r1, r5
 80098d0:	f7f6 fc4a 	bl	8000168 <__aeabi_dsub>
 80098d4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80098d8:	9d07      	ldr	r5, [sp, #28]
 80098da:	f806 4b01 	strb.w	r4, [r6], #1
 80098de:	eba6 040a 	sub.w	r4, r6, sl
 80098e2:	42a5      	cmp	r5, r4
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	f040 8116 	bne.w	8009b18 <_dtoa_r+0x6e0>
 80098ec:	f7f6 fc3e 	bl	800016c <__adddf3>
 80098f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098f4:	4604      	mov	r4, r0
 80098f6:	460d      	mov	r5, r1
 80098f8:	f7f7 f87e 	bl	80009f8 <__aeabi_dcmpgt>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f040 80f8 	bne.w	8009af2 <_dtoa_r+0x6ba>
 8009902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	f7f7 f84d 	bl	80009a8 <__aeabi_dcmpeq>
 800990e:	b118      	cbz	r0, 8009918 <_dtoa_r+0x4e0>
 8009910:	f018 0f01 	tst.w	r8, #1
 8009914:	f040 80ed 	bne.w	8009af2 <_dtoa_r+0x6ba>
 8009918:	4649      	mov	r1, r9
 800991a:	4658      	mov	r0, fp
 800991c:	f000 fc92 	bl	800a244 <_Bfree>
 8009920:	2300      	movs	r3, #0
 8009922:	7033      	strb	r3, [r6, #0]
 8009924:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009926:	3701      	adds	r7, #1
 8009928:	601f      	str	r7, [r3, #0]
 800992a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8320 	beq.w	8009f72 <_dtoa_r+0xb3a>
 8009932:	601e      	str	r6, [r3, #0]
 8009934:	e31d      	b.n	8009f72 <_dtoa_r+0xb3a>
 8009936:	07e2      	lsls	r2, r4, #31
 8009938:	d505      	bpl.n	8009946 <_dtoa_r+0x50e>
 800993a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800993e:	f7f6 fdcb 	bl	80004d8 <__aeabi_dmul>
 8009942:	2301      	movs	r3, #1
 8009944:	3601      	adds	r6, #1
 8009946:	1064      	asrs	r4, r4, #1
 8009948:	3508      	adds	r5, #8
 800994a:	e73f      	b.n	80097cc <_dtoa_r+0x394>
 800994c:	2602      	movs	r6, #2
 800994e:	e742      	b.n	80097d6 <_dtoa_r+0x39e>
 8009950:	9c07      	ldr	r4, [sp, #28]
 8009952:	9704      	str	r7, [sp, #16]
 8009954:	e761      	b.n	800981a <_dtoa_r+0x3e2>
 8009956:	bf00      	nop
 8009958:	0800d5d0 	.word	0x0800d5d0
 800995c:	0800d5a8 	.word	0x0800d5a8
 8009960:	3ff00000 	.word	0x3ff00000
 8009964:	40240000 	.word	0x40240000
 8009968:	401c0000 	.word	0x401c0000
 800996c:	40140000 	.word	0x40140000
 8009970:	4b70      	ldr	r3, [pc, #448]	@ (8009b34 <_dtoa_r+0x6fc>)
 8009972:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009974:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800997c:	4454      	add	r4, sl
 800997e:	2900      	cmp	r1, #0
 8009980:	d045      	beq.n	8009a0e <_dtoa_r+0x5d6>
 8009982:	2000      	movs	r0, #0
 8009984:	496c      	ldr	r1, [pc, #432]	@ (8009b38 <_dtoa_r+0x700>)
 8009986:	f7f6 fed1 	bl	800072c <__aeabi_ddiv>
 800998a:	4633      	mov	r3, r6
 800998c:	462a      	mov	r2, r5
 800998e:	f7f6 fbeb 	bl	8000168 <__aeabi_dsub>
 8009992:	4656      	mov	r6, sl
 8009994:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800999c:	f7f7 f84c 	bl	8000a38 <__aeabi_d2iz>
 80099a0:	4605      	mov	r5, r0
 80099a2:	f7f6 fd2f 	bl	8000404 <__aeabi_i2d>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ae:	f7f6 fbdb 	bl	8000168 <__aeabi_dsub>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	3530      	adds	r5, #48	@ 0x30
 80099b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099c0:	f806 5b01 	strb.w	r5, [r6], #1
 80099c4:	f7f6 fffa 	bl	80009bc <__aeabi_dcmplt>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d163      	bne.n	8009a94 <_dtoa_r+0x65c>
 80099cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099d0:	2000      	movs	r0, #0
 80099d2:	495a      	ldr	r1, [pc, #360]	@ (8009b3c <_dtoa_r+0x704>)
 80099d4:	f7f6 fbc8 	bl	8000168 <__aeabi_dsub>
 80099d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099dc:	f7f6 ffee 	bl	80009bc <__aeabi_dcmplt>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	f040 8087 	bne.w	8009af4 <_dtoa_r+0x6bc>
 80099e6:	42a6      	cmp	r6, r4
 80099e8:	f43f af43 	beq.w	8009872 <_dtoa_r+0x43a>
 80099ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099f0:	2200      	movs	r2, #0
 80099f2:	4b53      	ldr	r3, [pc, #332]	@ (8009b40 <_dtoa_r+0x708>)
 80099f4:	f7f6 fd70 	bl	80004d8 <__aeabi_dmul>
 80099f8:	2200      	movs	r2, #0
 80099fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a02:	4b4f      	ldr	r3, [pc, #316]	@ (8009b40 <_dtoa_r+0x708>)
 8009a04:	f7f6 fd68 	bl	80004d8 <__aeabi_dmul>
 8009a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a0c:	e7c4      	b.n	8009998 <_dtoa_r+0x560>
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	f7f6 fd61 	bl	80004d8 <__aeabi_dmul>
 8009a16:	4656      	mov	r6, sl
 8009a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a1c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a22:	f7f7 f809 	bl	8000a38 <__aeabi_d2iz>
 8009a26:	4605      	mov	r5, r0
 8009a28:	f7f6 fcec 	bl	8000404 <__aeabi_i2d>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a34:	f7f6 fb98 	bl	8000168 <__aeabi_dsub>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	3530      	adds	r5, #48	@ 0x30
 8009a3e:	f806 5b01 	strb.w	r5, [r6], #1
 8009a42:	42a6      	cmp	r6, r4
 8009a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a48:	f04f 0200 	mov.w	r2, #0
 8009a4c:	d124      	bne.n	8009a98 <_dtoa_r+0x660>
 8009a4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a52:	4b39      	ldr	r3, [pc, #228]	@ (8009b38 <_dtoa_r+0x700>)
 8009a54:	f7f6 fb8a 	bl	800016c <__adddf3>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a60:	f7f6 ffca 	bl	80009f8 <__aeabi_dcmpgt>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d145      	bne.n	8009af4 <_dtoa_r+0x6bc>
 8009a68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	4932      	ldr	r1, [pc, #200]	@ (8009b38 <_dtoa_r+0x700>)
 8009a70:	f7f6 fb7a 	bl	8000168 <__aeabi_dsub>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a7c:	f7f6 ff9e 	bl	80009bc <__aeabi_dcmplt>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f43f aef6 	beq.w	8009872 <_dtoa_r+0x43a>
 8009a86:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a88:	1e73      	subs	r3, r6, #1
 8009a8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a90:	2b30      	cmp	r3, #48	@ 0x30
 8009a92:	d0f8      	beq.n	8009a86 <_dtoa_r+0x64e>
 8009a94:	9f04      	ldr	r7, [sp, #16]
 8009a96:	e73f      	b.n	8009918 <_dtoa_r+0x4e0>
 8009a98:	4b29      	ldr	r3, [pc, #164]	@ (8009b40 <_dtoa_r+0x708>)
 8009a9a:	f7f6 fd1d 	bl	80004d8 <__aeabi_dmul>
 8009a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aa2:	e7bc      	b.n	8009a1e <_dtoa_r+0x5e6>
 8009aa4:	d10c      	bne.n	8009ac0 <_dtoa_r+0x688>
 8009aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	4b25      	ldr	r3, [pc, #148]	@ (8009b44 <_dtoa_r+0x70c>)
 8009aae:	f7f6 fd13 	bl	80004d8 <__aeabi_dmul>
 8009ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ab6:	f7f6 ff95 	bl	80009e4 <__aeabi_dcmpge>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f000 815b 	beq.w	8009d76 <_dtoa_r+0x93e>
 8009ac0:	2400      	movs	r4, #0
 8009ac2:	4625      	mov	r5, r4
 8009ac4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ac6:	4656      	mov	r6, sl
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	2700      	movs	r7, #0
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4658      	mov	r0, fp
 8009ad2:	f000 fbb7 	bl	800a244 <_Bfree>
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	d0dc      	beq.n	8009a94 <_dtoa_r+0x65c>
 8009ada:	b12f      	cbz	r7, 8009ae8 <_dtoa_r+0x6b0>
 8009adc:	42af      	cmp	r7, r5
 8009ade:	d003      	beq.n	8009ae8 <_dtoa_r+0x6b0>
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	4658      	mov	r0, fp
 8009ae4:	f000 fbae 	bl	800a244 <_Bfree>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4658      	mov	r0, fp
 8009aec:	f000 fbaa 	bl	800a244 <_Bfree>
 8009af0:	e7d0      	b.n	8009a94 <_dtoa_r+0x65c>
 8009af2:	9704      	str	r7, [sp, #16]
 8009af4:	4633      	mov	r3, r6
 8009af6:	461e      	mov	r6, r3
 8009af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009afc:	2a39      	cmp	r2, #57	@ 0x39
 8009afe:	d107      	bne.n	8009b10 <_dtoa_r+0x6d8>
 8009b00:	459a      	cmp	sl, r3
 8009b02:	d1f8      	bne.n	8009af6 <_dtoa_r+0x6be>
 8009b04:	9a04      	ldr	r2, [sp, #16]
 8009b06:	3201      	adds	r2, #1
 8009b08:	9204      	str	r2, [sp, #16]
 8009b0a:	2230      	movs	r2, #48	@ 0x30
 8009b0c:	f88a 2000 	strb.w	r2, [sl]
 8009b10:	781a      	ldrb	r2, [r3, #0]
 8009b12:	3201      	adds	r2, #1
 8009b14:	701a      	strb	r2, [r3, #0]
 8009b16:	e7bd      	b.n	8009a94 <_dtoa_r+0x65c>
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4b09      	ldr	r3, [pc, #36]	@ (8009b40 <_dtoa_r+0x708>)
 8009b1c:	f7f6 fcdc 	bl	80004d8 <__aeabi_dmul>
 8009b20:	2200      	movs	r2, #0
 8009b22:	2300      	movs	r3, #0
 8009b24:	4604      	mov	r4, r0
 8009b26:	460d      	mov	r5, r1
 8009b28:	f7f6 ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	f43f aebc 	beq.w	80098aa <_dtoa_r+0x472>
 8009b32:	e6f1      	b.n	8009918 <_dtoa_r+0x4e0>
 8009b34:	0800d5d0 	.word	0x0800d5d0
 8009b38:	3fe00000 	.word	0x3fe00000
 8009b3c:	3ff00000 	.word	0x3ff00000
 8009b40:	40240000 	.word	0x40240000
 8009b44:	40140000 	.word	0x40140000
 8009b48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	f000 80db 	beq.w	8009d06 <_dtoa_r+0x8ce>
 8009b50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009b52:	2a01      	cmp	r2, #1
 8009b54:	f300 80bf 	bgt.w	8009cd6 <_dtoa_r+0x89e>
 8009b58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	f000 80b7 	beq.w	8009cce <_dtoa_r+0x896>
 8009b60:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b64:	4646      	mov	r6, r8
 8009b66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	441a      	add	r2, r3
 8009b6e:	4658      	mov	r0, fp
 8009b70:	4498      	add	r8, r3
 8009b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b74:	f000 fc64 	bl	800a440 <__i2b>
 8009b78:	4605      	mov	r5, r0
 8009b7a:	b15e      	cbz	r6, 8009b94 <_dtoa_r+0x75c>
 8009b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	dd08      	ble.n	8009b94 <_dtoa_r+0x75c>
 8009b82:	42b3      	cmp	r3, r6
 8009b84:	bfa8      	it	ge
 8009b86:	4633      	movge	r3, r6
 8009b88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b8a:	eba8 0803 	sub.w	r8, r8, r3
 8009b8e:	1af6      	subs	r6, r6, r3
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b96:	b1f3      	cbz	r3, 8009bd6 <_dtoa_r+0x79e>
 8009b98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 80b7 	beq.w	8009d0e <_dtoa_r+0x8d6>
 8009ba0:	b18c      	cbz	r4, 8009bc6 <_dtoa_r+0x78e>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4658      	mov	r0, fp
 8009ba8:	f000 fd08 	bl	800a5bc <__pow5mult>
 8009bac:	464a      	mov	r2, r9
 8009bae:	4601      	mov	r1, r0
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	4658      	mov	r0, fp
 8009bb4:	f000 fc5a 	bl	800a46c <__multiply>
 8009bb8:	4649      	mov	r1, r9
 8009bba:	9004      	str	r0, [sp, #16]
 8009bbc:	4658      	mov	r0, fp
 8009bbe:	f000 fb41 	bl	800a244 <_Bfree>
 8009bc2:	9b04      	ldr	r3, [sp, #16]
 8009bc4:	4699      	mov	r9, r3
 8009bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bc8:	1b1a      	subs	r2, r3, r4
 8009bca:	d004      	beq.n	8009bd6 <_dtoa_r+0x79e>
 8009bcc:	4649      	mov	r1, r9
 8009bce:	4658      	mov	r0, fp
 8009bd0:	f000 fcf4 	bl	800a5bc <__pow5mult>
 8009bd4:	4681      	mov	r9, r0
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	4658      	mov	r0, fp
 8009bda:	f000 fc31 	bl	800a440 <__i2b>
 8009bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009be0:	4604      	mov	r4, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 81c9 	beq.w	8009f7a <_dtoa_r+0xb42>
 8009be8:	461a      	mov	r2, r3
 8009bea:	4601      	mov	r1, r0
 8009bec:	4658      	mov	r0, fp
 8009bee:	f000 fce5 	bl	800a5bc <__pow5mult>
 8009bf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	f300 808f 	bgt.w	8009d1a <_dtoa_r+0x8e2>
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f040 8087 	bne.w	8009d12 <_dtoa_r+0x8da>
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f040 8083 	bne.w	8009d16 <_dtoa_r+0x8de>
 8009c10:	9b03      	ldr	r3, [sp, #12]
 8009c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c16:	0d1b      	lsrs	r3, r3, #20
 8009c18:	051b      	lsls	r3, r3, #20
 8009c1a:	b12b      	cbz	r3, 8009c28 <_dtoa_r+0x7f0>
 8009c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c1e:	f108 0801 	add.w	r8, r8, #1
 8009c22:	3301      	adds	r3, #1
 8009c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c26:	2301      	movs	r3, #1
 8009c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 81aa 	beq.w	8009f86 <_dtoa_r+0xb4e>
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c38:	6918      	ldr	r0, [r3, #16]
 8009c3a:	f000 fbb5 	bl	800a3a8 <__hi0bits>
 8009c3e:	f1c0 0020 	rsb	r0, r0, #32
 8009c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c44:	4418      	add	r0, r3
 8009c46:	f010 001f 	ands.w	r0, r0, #31
 8009c4a:	d071      	beq.n	8009d30 <_dtoa_r+0x8f8>
 8009c4c:	f1c0 0320 	rsb	r3, r0, #32
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	dd65      	ble.n	8009d20 <_dtoa_r+0x8e8>
 8009c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c56:	f1c0 001c 	rsb	r0, r0, #28
 8009c5a:	4403      	add	r3, r0
 8009c5c:	4480      	add	r8, r0
 8009c5e:	4406      	add	r6, r0
 8009c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c62:	f1b8 0f00 	cmp.w	r8, #0
 8009c66:	dd05      	ble.n	8009c74 <_dtoa_r+0x83c>
 8009c68:	4649      	mov	r1, r9
 8009c6a:	4642      	mov	r2, r8
 8009c6c:	4658      	mov	r0, fp
 8009c6e:	f000 fcff 	bl	800a670 <__lshift>
 8009c72:	4681      	mov	r9, r0
 8009c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	dd05      	ble.n	8009c86 <_dtoa_r+0x84e>
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f000 fcf6 	bl	800a670 <__lshift>
 8009c84:	4604      	mov	r4, r0
 8009c86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d053      	beq.n	8009d34 <_dtoa_r+0x8fc>
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4648      	mov	r0, r9
 8009c90:	f000 fd5a 	bl	800a748 <__mcmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	da4d      	bge.n	8009d34 <_dtoa_r+0x8fc>
 8009c98:	1e7b      	subs	r3, r7, #1
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	9304      	str	r3, [sp, #16]
 8009c9e:	220a      	movs	r2, #10
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4658      	mov	r0, fp
 8009ca4:	f000 faf0 	bl	800a288 <__multadd>
 8009ca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009caa:	4681      	mov	r9, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 816c 	beq.w	8009f8a <_dtoa_r+0xb52>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	220a      	movs	r2, #10
 8009cb8:	4658      	mov	r0, fp
 8009cba:	f000 fae5 	bl	800a288 <__multadd>
 8009cbe:	9b08      	ldr	r3, [sp, #32]
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	dc61      	bgt.n	8009d8a <_dtoa_r+0x952>
 8009cc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	dc3b      	bgt.n	8009d44 <_dtoa_r+0x90c>
 8009ccc:	e05d      	b.n	8009d8a <_dtoa_r+0x952>
 8009cce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cd0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cd4:	e746      	b.n	8009b64 <_dtoa_r+0x72c>
 8009cd6:	9b07      	ldr	r3, [sp, #28]
 8009cd8:	1e5c      	subs	r4, r3, #1
 8009cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cdc:	42a3      	cmp	r3, r4
 8009cde:	bfbf      	itttt	lt
 8009ce0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ce2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009ce4:	1ae3      	sublt	r3, r4, r3
 8009ce6:	18d2      	addlt	r2, r2, r3
 8009ce8:	bfa8      	it	ge
 8009cea:	1b1c      	subge	r4, r3, r4
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	bfbe      	ittt	lt
 8009cf0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009cf2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009cf4:	2400      	movlt	r4, #0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bfb5      	itete	lt
 8009cfa:	eba8 0603 	sublt.w	r6, r8, r3
 8009cfe:	4646      	movge	r6, r8
 8009d00:	2300      	movlt	r3, #0
 8009d02:	9b07      	ldrge	r3, [sp, #28]
 8009d04:	e730      	b.n	8009b68 <_dtoa_r+0x730>
 8009d06:	4646      	mov	r6, r8
 8009d08:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d0a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d0c:	e735      	b.n	8009b7a <_dtoa_r+0x742>
 8009d0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d10:	e75c      	b.n	8009bcc <_dtoa_r+0x794>
 8009d12:	2300      	movs	r3, #0
 8009d14:	e788      	b.n	8009c28 <_dtoa_r+0x7f0>
 8009d16:	9b02      	ldr	r3, [sp, #8]
 8009d18:	e786      	b.n	8009c28 <_dtoa_r+0x7f0>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d1e:	e788      	b.n	8009c32 <_dtoa_r+0x7fa>
 8009d20:	d09f      	beq.n	8009c62 <_dtoa_r+0x82a>
 8009d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d24:	331c      	adds	r3, #28
 8009d26:	441a      	add	r2, r3
 8009d28:	4498      	add	r8, r3
 8009d2a:	441e      	add	r6, r3
 8009d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d2e:	e798      	b.n	8009c62 <_dtoa_r+0x82a>
 8009d30:	4603      	mov	r3, r0
 8009d32:	e7f6      	b.n	8009d22 <_dtoa_r+0x8ea>
 8009d34:	9b07      	ldr	r3, [sp, #28]
 8009d36:	9704      	str	r7, [sp, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	dc20      	bgt.n	8009d7e <_dtoa_r+0x946>
 8009d3c:	9308      	str	r3, [sp, #32]
 8009d3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	dd1e      	ble.n	8009d82 <_dtoa_r+0x94a>
 8009d44:	9b08      	ldr	r3, [sp, #32]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f47f aebc 	bne.w	8009ac4 <_dtoa_r+0x68c>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	2205      	movs	r2, #5
 8009d50:	4658      	mov	r0, fp
 8009d52:	f000 fa99 	bl	800a288 <__multadd>
 8009d56:	4601      	mov	r1, r0
 8009d58:	4604      	mov	r4, r0
 8009d5a:	4648      	mov	r0, r9
 8009d5c:	f000 fcf4 	bl	800a748 <__mcmp>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	f77f aeaf 	ble.w	8009ac4 <_dtoa_r+0x68c>
 8009d66:	2331      	movs	r3, #49	@ 0x31
 8009d68:	4656      	mov	r6, sl
 8009d6a:	f806 3b01 	strb.w	r3, [r6], #1
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	3301      	adds	r3, #1
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	e6aa      	b.n	8009acc <_dtoa_r+0x694>
 8009d76:	9c07      	ldr	r4, [sp, #28]
 8009d78:	9704      	str	r7, [sp, #16]
 8009d7a:	4625      	mov	r5, r4
 8009d7c:	e7f3      	b.n	8009d66 <_dtoa_r+0x92e>
 8009d7e:	9b07      	ldr	r3, [sp, #28]
 8009d80:	9308      	str	r3, [sp, #32]
 8009d82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8104 	beq.w	8009f92 <_dtoa_r+0xb5a>
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	dd05      	ble.n	8009d9a <_dtoa_r+0x962>
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4632      	mov	r2, r6
 8009d92:	4658      	mov	r0, fp
 8009d94:	f000 fc6c 	bl	800a670 <__lshift>
 8009d98:	4605      	mov	r5, r0
 8009d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d05a      	beq.n	8009e56 <_dtoa_r+0xa1e>
 8009da0:	4658      	mov	r0, fp
 8009da2:	6869      	ldr	r1, [r5, #4]
 8009da4:	f000 fa0e 	bl	800a1c4 <_Balloc>
 8009da8:	4606      	mov	r6, r0
 8009daa:	b928      	cbnz	r0, 8009db8 <_dtoa_r+0x980>
 8009dac:	4602      	mov	r2, r0
 8009dae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009db2:	4b83      	ldr	r3, [pc, #524]	@ (8009fc0 <_dtoa_r+0xb88>)
 8009db4:	f7ff bb54 	b.w	8009460 <_dtoa_r+0x28>
 8009db8:	692a      	ldr	r2, [r5, #16]
 8009dba:	f105 010c 	add.w	r1, r5, #12
 8009dbe:	3202      	adds	r2, #2
 8009dc0:	0092      	lsls	r2, r2, #2
 8009dc2:	300c      	adds	r0, #12
 8009dc4:	f001 ff5e 	bl	800bc84 <memcpy>
 8009dc8:	2201      	movs	r2, #1
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4658      	mov	r0, fp
 8009dce:	f000 fc4f 	bl	800a670 <__lshift>
 8009dd2:	462f      	mov	r7, r5
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	f10a 0301 	add.w	r3, sl, #1
 8009dda:	9307      	str	r3, [sp, #28]
 8009ddc:	9b08      	ldr	r3, [sp, #32]
 8009dde:	4453      	add	r3, sl
 8009de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009de2:	9b02      	ldr	r3, [sp, #8]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dea:	9b07      	ldr	r3, [sp, #28]
 8009dec:	4621      	mov	r1, r4
 8009dee:	3b01      	subs	r3, #1
 8009df0:	4648      	mov	r0, r9
 8009df2:	9302      	str	r3, [sp, #8]
 8009df4:	f7ff fa98 	bl	8009328 <quorem>
 8009df8:	4639      	mov	r1, r7
 8009dfa:	9008      	str	r0, [sp, #32]
 8009dfc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e00:	4648      	mov	r0, r9
 8009e02:	f000 fca1 	bl	800a748 <__mcmp>
 8009e06:	462a      	mov	r2, r5
 8009e08:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4658      	mov	r0, fp
 8009e0e:	f000 fcb7 	bl	800a780 <__mdiff>
 8009e12:	68c2      	ldr	r2, [r0, #12]
 8009e14:	4606      	mov	r6, r0
 8009e16:	bb02      	cbnz	r2, 8009e5a <_dtoa_r+0xa22>
 8009e18:	4601      	mov	r1, r0
 8009e1a:	4648      	mov	r0, r9
 8009e1c:	f000 fc94 	bl	800a748 <__mcmp>
 8009e20:	4602      	mov	r2, r0
 8009e22:	4631      	mov	r1, r6
 8009e24:	4658      	mov	r0, fp
 8009e26:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e28:	f000 fa0c 	bl	800a244 <_Bfree>
 8009e2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e30:	9e07      	ldr	r6, [sp, #28]
 8009e32:	ea43 0102 	orr.w	r1, r3, r2
 8009e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e38:	4319      	orrs	r1, r3
 8009e3a:	d110      	bne.n	8009e5e <_dtoa_r+0xa26>
 8009e3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e40:	d029      	beq.n	8009e96 <_dtoa_r+0xa5e>
 8009e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dd02      	ble.n	8009e4e <_dtoa_r+0xa16>
 8009e48:	9b08      	ldr	r3, [sp, #32]
 8009e4a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e4e:	9b02      	ldr	r3, [sp, #8]
 8009e50:	f883 8000 	strb.w	r8, [r3]
 8009e54:	e63b      	b.n	8009ace <_dtoa_r+0x696>
 8009e56:	4628      	mov	r0, r5
 8009e58:	e7bb      	b.n	8009dd2 <_dtoa_r+0x99a>
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	e7e1      	b.n	8009e22 <_dtoa_r+0x9ea>
 8009e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	db04      	blt.n	8009e6e <_dtoa_r+0xa36>
 8009e64:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009e66:	430b      	orrs	r3, r1
 8009e68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e6a:	430b      	orrs	r3, r1
 8009e6c:	d120      	bne.n	8009eb0 <_dtoa_r+0xa78>
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	dded      	ble.n	8009e4e <_dtoa_r+0xa16>
 8009e72:	4649      	mov	r1, r9
 8009e74:	2201      	movs	r2, #1
 8009e76:	4658      	mov	r0, fp
 8009e78:	f000 fbfa 	bl	800a670 <__lshift>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4681      	mov	r9, r0
 8009e80:	f000 fc62 	bl	800a748 <__mcmp>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	dc03      	bgt.n	8009e90 <_dtoa_r+0xa58>
 8009e88:	d1e1      	bne.n	8009e4e <_dtoa_r+0xa16>
 8009e8a:	f018 0f01 	tst.w	r8, #1
 8009e8e:	d0de      	beq.n	8009e4e <_dtoa_r+0xa16>
 8009e90:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e94:	d1d8      	bne.n	8009e48 <_dtoa_r+0xa10>
 8009e96:	2339      	movs	r3, #57	@ 0x39
 8009e98:	9a02      	ldr	r2, [sp, #8]
 8009e9a:	7013      	strb	r3, [r2, #0]
 8009e9c:	4633      	mov	r3, r6
 8009e9e:	461e      	mov	r6, r3
 8009ea0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	2a39      	cmp	r2, #57	@ 0x39
 8009ea8:	d052      	beq.n	8009f50 <_dtoa_r+0xb18>
 8009eaa:	3201      	adds	r2, #1
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	e60e      	b.n	8009ace <_dtoa_r+0x696>
 8009eb0:	2a00      	cmp	r2, #0
 8009eb2:	dd07      	ble.n	8009ec4 <_dtoa_r+0xa8c>
 8009eb4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009eb8:	d0ed      	beq.n	8009e96 <_dtoa_r+0xa5e>
 8009eba:	9a02      	ldr	r2, [sp, #8]
 8009ebc:	f108 0301 	add.w	r3, r8, #1
 8009ec0:	7013      	strb	r3, [r2, #0]
 8009ec2:	e604      	b.n	8009ace <_dtoa_r+0x696>
 8009ec4:	9b07      	ldr	r3, [sp, #28]
 8009ec6:	9a07      	ldr	r2, [sp, #28]
 8009ec8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d028      	beq.n	8009f24 <_dtoa_r+0xaec>
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	220a      	movs	r2, #10
 8009ed8:	4658      	mov	r0, fp
 8009eda:	f000 f9d5 	bl	800a288 <__multadd>
 8009ede:	42af      	cmp	r7, r5
 8009ee0:	4681      	mov	r9, r0
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	f04f 020a 	mov.w	r2, #10
 8009eea:	4639      	mov	r1, r7
 8009eec:	4658      	mov	r0, fp
 8009eee:	d107      	bne.n	8009f00 <_dtoa_r+0xac8>
 8009ef0:	f000 f9ca 	bl	800a288 <__multadd>
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	9b07      	ldr	r3, [sp, #28]
 8009efa:	3301      	adds	r3, #1
 8009efc:	9307      	str	r3, [sp, #28]
 8009efe:	e774      	b.n	8009dea <_dtoa_r+0x9b2>
 8009f00:	f000 f9c2 	bl	800a288 <__multadd>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4607      	mov	r7, r0
 8009f08:	2300      	movs	r3, #0
 8009f0a:	220a      	movs	r2, #10
 8009f0c:	4658      	mov	r0, fp
 8009f0e:	f000 f9bb 	bl	800a288 <__multadd>
 8009f12:	4605      	mov	r5, r0
 8009f14:	e7f0      	b.n	8009ef8 <_dtoa_r+0xac0>
 8009f16:	9b08      	ldr	r3, [sp, #32]
 8009f18:	2700      	movs	r7, #0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	bfcc      	ite	gt
 8009f1e:	461e      	movgt	r6, r3
 8009f20:	2601      	movle	r6, #1
 8009f22:	4456      	add	r6, sl
 8009f24:	4649      	mov	r1, r9
 8009f26:	2201      	movs	r2, #1
 8009f28:	4658      	mov	r0, fp
 8009f2a:	f000 fba1 	bl	800a670 <__lshift>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4681      	mov	r9, r0
 8009f32:	f000 fc09 	bl	800a748 <__mcmp>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	dcb0      	bgt.n	8009e9c <_dtoa_r+0xa64>
 8009f3a:	d102      	bne.n	8009f42 <_dtoa_r+0xb0a>
 8009f3c:	f018 0f01 	tst.w	r8, #1
 8009f40:	d1ac      	bne.n	8009e9c <_dtoa_r+0xa64>
 8009f42:	4633      	mov	r3, r6
 8009f44:	461e      	mov	r6, r3
 8009f46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f4a:	2a30      	cmp	r2, #48	@ 0x30
 8009f4c:	d0fa      	beq.n	8009f44 <_dtoa_r+0xb0c>
 8009f4e:	e5be      	b.n	8009ace <_dtoa_r+0x696>
 8009f50:	459a      	cmp	sl, r3
 8009f52:	d1a4      	bne.n	8009e9e <_dtoa_r+0xa66>
 8009f54:	9b04      	ldr	r3, [sp, #16]
 8009f56:	3301      	adds	r3, #1
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	2331      	movs	r3, #49	@ 0x31
 8009f5c:	f88a 3000 	strb.w	r3, [sl]
 8009f60:	e5b5      	b.n	8009ace <_dtoa_r+0x696>
 8009f62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f64:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009fc4 <_dtoa_r+0xb8c>
 8009f68:	b11b      	cbz	r3, 8009f72 <_dtoa_r+0xb3a>
 8009f6a:	f10a 0308 	add.w	r3, sl, #8
 8009f6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	4650      	mov	r0, sl
 8009f74:	b017      	add	sp, #92	@ 0x5c
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	f77f ae3d 	ble.w	8009bfc <_dtoa_r+0x7c4>
 8009f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f86:	2001      	movs	r0, #1
 8009f88:	e65b      	b.n	8009c42 <_dtoa_r+0x80a>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f77f aed6 	ble.w	8009d3e <_dtoa_r+0x906>
 8009f92:	4656      	mov	r6, sl
 8009f94:	4621      	mov	r1, r4
 8009f96:	4648      	mov	r0, r9
 8009f98:	f7ff f9c6 	bl	8009328 <quorem>
 8009f9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009fa0:	9b08      	ldr	r3, [sp, #32]
 8009fa2:	f806 8b01 	strb.w	r8, [r6], #1
 8009fa6:	eba6 020a 	sub.w	r2, r6, sl
 8009faa:	4293      	cmp	r3, r2
 8009fac:	ddb3      	ble.n	8009f16 <_dtoa_r+0xade>
 8009fae:	4649      	mov	r1, r9
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	220a      	movs	r2, #10
 8009fb4:	4658      	mov	r0, fp
 8009fb6:	f000 f967 	bl	800a288 <__multadd>
 8009fba:	4681      	mov	r9, r0
 8009fbc:	e7ea      	b.n	8009f94 <_dtoa_r+0xb5c>
 8009fbe:	bf00      	nop
 8009fc0:	0800d52d 	.word	0x0800d52d
 8009fc4:	0800d4b1 	.word	0x0800d4b1

08009fc8 <_free_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4605      	mov	r5, r0
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	d040      	beq.n	800a052 <_free_r+0x8a>
 8009fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd4:	1f0c      	subs	r4, r1, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	bfb8      	it	lt
 8009fda:	18e4      	addlt	r4, r4, r3
 8009fdc:	f000 f8e6 	bl	800a1ac <__malloc_lock>
 8009fe0:	4a1c      	ldr	r2, [pc, #112]	@ (800a054 <_free_r+0x8c>)
 8009fe2:	6813      	ldr	r3, [r2, #0]
 8009fe4:	b933      	cbnz	r3, 8009ff4 <_free_r+0x2c>
 8009fe6:	6063      	str	r3, [r4, #4]
 8009fe8:	6014      	str	r4, [r2, #0]
 8009fea:	4628      	mov	r0, r5
 8009fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ff0:	f000 b8e2 	b.w	800a1b8 <__malloc_unlock>
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d908      	bls.n	800a00a <_free_r+0x42>
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	1821      	adds	r1, r4, r0
 8009ffc:	428b      	cmp	r3, r1
 8009ffe:	bf01      	itttt	eq
 800a000:	6819      	ldreq	r1, [r3, #0]
 800a002:	685b      	ldreq	r3, [r3, #4]
 800a004:	1809      	addeq	r1, r1, r0
 800a006:	6021      	streq	r1, [r4, #0]
 800a008:	e7ed      	b.n	8009fe6 <_free_r+0x1e>
 800a00a:	461a      	mov	r2, r3
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	b10b      	cbz	r3, 800a014 <_free_r+0x4c>
 800a010:	42a3      	cmp	r3, r4
 800a012:	d9fa      	bls.n	800a00a <_free_r+0x42>
 800a014:	6811      	ldr	r1, [r2, #0]
 800a016:	1850      	adds	r0, r2, r1
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d10b      	bne.n	800a034 <_free_r+0x6c>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	4401      	add	r1, r0
 800a020:	1850      	adds	r0, r2, r1
 800a022:	4283      	cmp	r3, r0
 800a024:	6011      	str	r1, [r2, #0]
 800a026:	d1e0      	bne.n	8009fea <_free_r+0x22>
 800a028:	6818      	ldr	r0, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	4408      	add	r0, r1
 800a02e:	6010      	str	r0, [r2, #0]
 800a030:	6053      	str	r3, [r2, #4]
 800a032:	e7da      	b.n	8009fea <_free_r+0x22>
 800a034:	d902      	bls.n	800a03c <_free_r+0x74>
 800a036:	230c      	movs	r3, #12
 800a038:	602b      	str	r3, [r5, #0]
 800a03a:	e7d6      	b.n	8009fea <_free_r+0x22>
 800a03c:	6820      	ldr	r0, [r4, #0]
 800a03e:	1821      	adds	r1, r4, r0
 800a040:	428b      	cmp	r3, r1
 800a042:	bf01      	itttt	eq
 800a044:	6819      	ldreq	r1, [r3, #0]
 800a046:	685b      	ldreq	r3, [r3, #4]
 800a048:	1809      	addeq	r1, r1, r0
 800a04a:	6021      	streq	r1, [r4, #0]
 800a04c:	6063      	str	r3, [r4, #4]
 800a04e:	6054      	str	r4, [r2, #4]
 800a050:	e7cb      	b.n	8009fea <_free_r+0x22>
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20002750 	.word	0x20002750

0800a058 <malloc>:
 800a058:	4b02      	ldr	r3, [pc, #8]	@ (800a064 <malloc+0xc>)
 800a05a:	4601      	mov	r1, r0
 800a05c:	6818      	ldr	r0, [r3, #0]
 800a05e:	f000 b825 	b.w	800a0ac <_malloc_r>
 800a062:	bf00      	nop
 800a064:	20000064 	.word	0x20000064

0800a068 <sbrk_aligned>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	4e0f      	ldr	r6, [pc, #60]	@ (800a0a8 <sbrk_aligned+0x40>)
 800a06c:	460c      	mov	r4, r1
 800a06e:	6831      	ldr	r1, [r6, #0]
 800a070:	4605      	mov	r5, r0
 800a072:	b911      	cbnz	r1, 800a07a <sbrk_aligned+0x12>
 800a074:	f001 fdf6 	bl	800bc64 <_sbrk_r>
 800a078:	6030      	str	r0, [r6, #0]
 800a07a:	4621      	mov	r1, r4
 800a07c:	4628      	mov	r0, r5
 800a07e:	f001 fdf1 	bl	800bc64 <_sbrk_r>
 800a082:	1c43      	adds	r3, r0, #1
 800a084:	d103      	bne.n	800a08e <sbrk_aligned+0x26>
 800a086:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a08a:	4620      	mov	r0, r4
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
 800a08e:	1cc4      	adds	r4, r0, #3
 800a090:	f024 0403 	bic.w	r4, r4, #3
 800a094:	42a0      	cmp	r0, r4
 800a096:	d0f8      	beq.n	800a08a <sbrk_aligned+0x22>
 800a098:	1a21      	subs	r1, r4, r0
 800a09a:	4628      	mov	r0, r5
 800a09c:	f001 fde2 	bl	800bc64 <_sbrk_r>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d1f2      	bne.n	800a08a <sbrk_aligned+0x22>
 800a0a4:	e7ef      	b.n	800a086 <sbrk_aligned+0x1e>
 800a0a6:	bf00      	nop
 800a0a8:	2000274c 	.word	0x2000274c

0800a0ac <_malloc_r>:
 800a0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b0:	1ccd      	adds	r5, r1, #3
 800a0b2:	f025 0503 	bic.w	r5, r5, #3
 800a0b6:	3508      	adds	r5, #8
 800a0b8:	2d0c      	cmp	r5, #12
 800a0ba:	bf38      	it	cc
 800a0bc:	250c      	movcc	r5, #12
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	db01      	blt.n	800a0c8 <_malloc_r+0x1c>
 800a0c4:	42a9      	cmp	r1, r5
 800a0c6:	d904      	bls.n	800a0d2 <_malloc_r+0x26>
 800a0c8:	230c      	movs	r3, #12
 800a0ca:	6033      	str	r3, [r6, #0]
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1a8 <_malloc_r+0xfc>
 800a0d6:	f000 f869 	bl	800a1ac <__malloc_lock>
 800a0da:	f8d8 3000 	ldr.w	r3, [r8]
 800a0de:	461c      	mov	r4, r3
 800a0e0:	bb44      	cbnz	r4, 800a134 <_malloc_r+0x88>
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff ffbf 	bl	800a068 <sbrk_aligned>
 800a0ea:	1c43      	adds	r3, r0, #1
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	d158      	bne.n	800a1a2 <_malloc_r+0xf6>
 800a0f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a0f4:	4627      	mov	r7, r4
 800a0f6:	2f00      	cmp	r7, #0
 800a0f8:	d143      	bne.n	800a182 <_malloc_r+0xd6>
 800a0fa:	2c00      	cmp	r4, #0
 800a0fc:	d04b      	beq.n	800a196 <_malloc_r+0xea>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	4639      	mov	r1, r7
 800a102:	4630      	mov	r0, r6
 800a104:	eb04 0903 	add.w	r9, r4, r3
 800a108:	f001 fdac 	bl	800bc64 <_sbrk_r>
 800a10c:	4581      	cmp	r9, r0
 800a10e:	d142      	bne.n	800a196 <_malloc_r+0xea>
 800a110:	6821      	ldr	r1, [r4, #0]
 800a112:	4630      	mov	r0, r6
 800a114:	1a6d      	subs	r5, r5, r1
 800a116:	4629      	mov	r1, r5
 800a118:	f7ff ffa6 	bl	800a068 <sbrk_aligned>
 800a11c:	3001      	adds	r0, #1
 800a11e:	d03a      	beq.n	800a196 <_malloc_r+0xea>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	442b      	add	r3, r5
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	f8d8 3000 	ldr.w	r3, [r8]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	bb62      	cbnz	r2, 800a188 <_malloc_r+0xdc>
 800a12e:	f8c8 7000 	str.w	r7, [r8]
 800a132:	e00f      	b.n	800a154 <_malloc_r+0xa8>
 800a134:	6822      	ldr	r2, [r4, #0]
 800a136:	1b52      	subs	r2, r2, r5
 800a138:	d420      	bmi.n	800a17c <_malloc_r+0xd0>
 800a13a:	2a0b      	cmp	r2, #11
 800a13c:	d917      	bls.n	800a16e <_malloc_r+0xc2>
 800a13e:	1961      	adds	r1, r4, r5
 800a140:	42a3      	cmp	r3, r4
 800a142:	6025      	str	r5, [r4, #0]
 800a144:	bf18      	it	ne
 800a146:	6059      	strne	r1, [r3, #4]
 800a148:	6863      	ldr	r3, [r4, #4]
 800a14a:	bf08      	it	eq
 800a14c:	f8c8 1000 	streq.w	r1, [r8]
 800a150:	5162      	str	r2, [r4, r5]
 800a152:	604b      	str	r3, [r1, #4]
 800a154:	4630      	mov	r0, r6
 800a156:	f000 f82f 	bl	800a1b8 <__malloc_unlock>
 800a15a:	f104 000b 	add.w	r0, r4, #11
 800a15e:	1d23      	adds	r3, r4, #4
 800a160:	f020 0007 	bic.w	r0, r0, #7
 800a164:	1ac2      	subs	r2, r0, r3
 800a166:	bf1c      	itt	ne
 800a168:	1a1b      	subne	r3, r3, r0
 800a16a:	50a3      	strne	r3, [r4, r2]
 800a16c:	e7af      	b.n	800a0ce <_malloc_r+0x22>
 800a16e:	6862      	ldr	r2, [r4, #4]
 800a170:	42a3      	cmp	r3, r4
 800a172:	bf0c      	ite	eq
 800a174:	f8c8 2000 	streq.w	r2, [r8]
 800a178:	605a      	strne	r2, [r3, #4]
 800a17a:	e7eb      	b.n	800a154 <_malloc_r+0xa8>
 800a17c:	4623      	mov	r3, r4
 800a17e:	6864      	ldr	r4, [r4, #4]
 800a180:	e7ae      	b.n	800a0e0 <_malloc_r+0x34>
 800a182:	463c      	mov	r4, r7
 800a184:	687f      	ldr	r7, [r7, #4]
 800a186:	e7b6      	b.n	800a0f6 <_malloc_r+0x4a>
 800a188:	461a      	mov	r2, r3
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	42a3      	cmp	r3, r4
 800a18e:	d1fb      	bne.n	800a188 <_malloc_r+0xdc>
 800a190:	2300      	movs	r3, #0
 800a192:	6053      	str	r3, [r2, #4]
 800a194:	e7de      	b.n	800a154 <_malloc_r+0xa8>
 800a196:	230c      	movs	r3, #12
 800a198:	4630      	mov	r0, r6
 800a19a:	6033      	str	r3, [r6, #0]
 800a19c:	f000 f80c 	bl	800a1b8 <__malloc_unlock>
 800a1a0:	e794      	b.n	800a0cc <_malloc_r+0x20>
 800a1a2:	6005      	str	r5, [r0, #0]
 800a1a4:	e7d6      	b.n	800a154 <_malloc_r+0xa8>
 800a1a6:	bf00      	nop
 800a1a8:	20002750 	.word	0x20002750

0800a1ac <__malloc_lock>:
 800a1ac:	4801      	ldr	r0, [pc, #4]	@ (800a1b4 <__malloc_lock+0x8>)
 800a1ae:	f7ff b8a6 	b.w	80092fe <__retarget_lock_acquire_recursive>
 800a1b2:	bf00      	nop
 800a1b4:	20002748 	.word	0x20002748

0800a1b8 <__malloc_unlock>:
 800a1b8:	4801      	ldr	r0, [pc, #4]	@ (800a1c0 <__malloc_unlock+0x8>)
 800a1ba:	f7ff b8a1 	b.w	8009300 <__retarget_lock_release_recursive>
 800a1be:	bf00      	nop
 800a1c0:	20002748 	.word	0x20002748

0800a1c4 <_Balloc>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	69c6      	ldr	r6, [r0, #28]
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	460d      	mov	r5, r1
 800a1cc:	b976      	cbnz	r6, 800a1ec <_Balloc+0x28>
 800a1ce:	2010      	movs	r0, #16
 800a1d0:	f7ff ff42 	bl	800a058 <malloc>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	61e0      	str	r0, [r4, #28]
 800a1d8:	b920      	cbnz	r0, 800a1e4 <_Balloc+0x20>
 800a1da:	216b      	movs	r1, #107	@ 0x6b
 800a1dc:	4b17      	ldr	r3, [pc, #92]	@ (800a23c <_Balloc+0x78>)
 800a1de:	4818      	ldr	r0, [pc, #96]	@ (800a240 <_Balloc+0x7c>)
 800a1e0:	f001 fd64 	bl	800bcac <__assert_func>
 800a1e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1e8:	6006      	str	r6, [r0, #0]
 800a1ea:	60c6      	str	r6, [r0, #12]
 800a1ec:	69e6      	ldr	r6, [r4, #28]
 800a1ee:	68f3      	ldr	r3, [r6, #12]
 800a1f0:	b183      	cbz	r3, 800a214 <_Balloc+0x50>
 800a1f2:	69e3      	ldr	r3, [r4, #28]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1fa:	b9b8      	cbnz	r0, 800a22c <_Balloc+0x68>
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	fa01 f605 	lsl.w	r6, r1, r5
 800a202:	1d72      	adds	r2, r6, #5
 800a204:	4620      	mov	r0, r4
 800a206:	0092      	lsls	r2, r2, #2
 800a208:	f001 fd6e 	bl	800bce8 <_calloc_r>
 800a20c:	b160      	cbz	r0, 800a228 <_Balloc+0x64>
 800a20e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a212:	e00e      	b.n	800a232 <_Balloc+0x6e>
 800a214:	2221      	movs	r2, #33	@ 0x21
 800a216:	2104      	movs	r1, #4
 800a218:	4620      	mov	r0, r4
 800a21a:	f001 fd65 	bl	800bce8 <_calloc_r>
 800a21e:	69e3      	ldr	r3, [r4, #28]
 800a220:	60f0      	str	r0, [r6, #12]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e4      	bne.n	800a1f2 <_Balloc+0x2e>
 800a228:	2000      	movs	r0, #0
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
 800a22c:	6802      	ldr	r2, [r0, #0]
 800a22e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a232:	2300      	movs	r3, #0
 800a234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a238:	e7f7      	b.n	800a22a <_Balloc+0x66>
 800a23a:	bf00      	nop
 800a23c:	0800d4be 	.word	0x0800d4be
 800a240:	0800d53e 	.word	0x0800d53e

0800a244 <_Bfree>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	69c6      	ldr	r6, [r0, #28]
 800a248:	4605      	mov	r5, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	b976      	cbnz	r6, 800a26c <_Bfree+0x28>
 800a24e:	2010      	movs	r0, #16
 800a250:	f7ff ff02 	bl	800a058 <malloc>
 800a254:	4602      	mov	r2, r0
 800a256:	61e8      	str	r0, [r5, #28]
 800a258:	b920      	cbnz	r0, 800a264 <_Bfree+0x20>
 800a25a:	218f      	movs	r1, #143	@ 0x8f
 800a25c:	4b08      	ldr	r3, [pc, #32]	@ (800a280 <_Bfree+0x3c>)
 800a25e:	4809      	ldr	r0, [pc, #36]	@ (800a284 <_Bfree+0x40>)
 800a260:	f001 fd24 	bl	800bcac <__assert_func>
 800a264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a268:	6006      	str	r6, [r0, #0]
 800a26a:	60c6      	str	r6, [r0, #12]
 800a26c:	b13c      	cbz	r4, 800a27e <_Bfree+0x3a>
 800a26e:	69eb      	ldr	r3, [r5, #28]
 800a270:	6862      	ldr	r2, [r4, #4]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a278:	6021      	str	r1, [r4, #0]
 800a27a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a27e:	bd70      	pop	{r4, r5, r6, pc}
 800a280:	0800d4be 	.word	0x0800d4be
 800a284:	0800d53e 	.word	0x0800d53e

0800a288 <__multadd>:
 800a288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28c:	4607      	mov	r7, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	461e      	mov	r6, r3
 800a292:	2000      	movs	r0, #0
 800a294:	690d      	ldr	r5, [r1, #16]
 800a296:	f101 0c14 	add.w	ip, r1, #20
 800a29a:	f8dc 3000 	ldr.w	r3, [ip]
 800a29e:	3001      	adds	r0, #1
 800a2a0:	b299      	uxth	r1, r3
 800a2a2:	fb02 6101 	mla	r1, r2, r1, r6
 800a2a6:	0c1e      	lsrs	r6, r3, #16
 800a2a8:	0c0b      	lsrs	r3, r1, #16
 800a2aa:	fb02 3306 	mla	r3, r2, r6, r3
 800a2ae:	b289      	uxth	r1, r1
 800a2b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2b4:	4285      	cmp	r5, r0
 800a2b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a2be:	dcec      	bgt.n	800a29a <__multadd+0x12>
 800a2c0:	b30e      	cbz	r6, 800a306 <__multadd+0x7e>
 800a2c2:	68a3      	ldr	r3, [r4, #8]
 800a2c4:	42ab      	cmp	r3, r5
 800a2c6:	dc19      	bgt.n	800a2fc <__multadd+0x74>
 800a2c8:	6861      	ldr	r1, [r4, #4]
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	3101      	adds	r1, #1
 800a2ce:	f7ff ff79 	bl	800a1c4 <_Balloc>
 800a2d2:	4680      	mov	r8, r0
 800a2d4:	b928      	cbnz	r0, 800a2e2 <__multadd+0x5a>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	21ba      	movs	r1, #186	@ 0xba
 800a2da:	4b0c      	ldr	r3, [pc, #48]	@ (800a30c <__multadd+0x84>)
 800a2dc:	480c      	ldr	r0, [pc, #48]	@ (800a310 <__multadd+0x88>)
 800a2de:	f001 fce5 	bl	800bcac <__assert_func>
 800a2e2:	6922      	ldr	r2, [r4, #16]
 800a2e4:	f104 010c 	add.w	r1, r4, #12
 800a2e8:	3202      	adds	r2, #2
 800a2ea:	0092      	lsls	r2, r2, #2
 800a2ec:	300c      	adds	r0, #12
 800a2ee:	f001 fcc9 	bl	800bc84 <memcpy>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f7ff ffa5 	bl	800a244 <_Bfree>
 800a2fa:	4644      	mov	r4, r8
 800a2fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a300:	3501      	adds	r5, #1
 800a302:	615e      	str	r6, [r3, #20]
 800a304:	6125      	str	r5, [r4, #16]
 800a306:	4620      	mov	r0, r4
 800a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a30c:	0800d52d 	.word	0x0800d52d
 800a310:	0800d53e 	.word	0x0800d53e

0800a314 <__s2b>:
 800a314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a318:	4615      	mov	r5, r2
 800a31a:	2209      	movs	r2, #9
 800a31c:	461f      	mov	r7, r3
 800a31e:	3308      	adds	r3, #8
 800a320:	460c      	mov	r4, r1
 800a322:	fb93 f3f2 	sdiv	r3, r3, r2
 800a326:	4606      	mov	r6, r0
 800a328:	2201      	movs	r2, #1
 800a32a:	2100      	movs	r1, #0
 800a32c:	429a      	cmp	r2, r3
 800a32e:	db09      	blt.n	800a344 <__s2b+0x30>
 800a330:	4630      	mov	r0, r6
 800a332:	f7ff ff47 	bl	800a1c4 <_Balloc>
 800a336:	b940      	cbnz	r0, 800a34a <__s2b+0x36>
 800a338:	4602      	mov	r2, r0
 800a33a:	21d3      	movs	r1, #211	@ 0xd3
 800a33c:	4b18      	ldr	r3, [pc, #96]	@ (800a3a0 <__s2b+0x8c>)
 800a33e:	4819      	ldr	r0, [pc, #100]	@ (800a3a4 <__s2b+0x90>)
 800a340:	f001 fcb4 	bl	800bcac <__assert_func>
 800a344:	0052      	lsls	r2, r2, #1
 800a346:	3101      	adds	r1, #1
 800a348:	e7f0      	b.n	800a32c <__s2b+0x18>
 800a34a:	9b08      	ldr	r3, [sp, #32]
 800a34c:	2d09      	cmp	r5, #9
 800a34e:	6143      	str	r3, [r0, #20]
 800a350:	f04f 0301 	mov.w	r3, #1
 800a354:	6103      	str	r3, [r0, #16]
 800a356:	dd16      	ble.n	800a386 <__s2b+0x72>
 800a358:	f104 0909 	add.w	r9, r4, #9
 800a35c:	46c8      	mov	r8, r9
 800a35e:	442c      	add	r4, r5
 800a360:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a364:	4601      	mov	r1, r0
 800a366:	220a      	movs	r2, #10
 800a368:	4630      	mov	r0, r6
 800a36a:	3b30      	subs	r3, #48	@ 0x30
 800a36c:	f7ff ff8c 	bl	800a288 <__multadd>
 800a370:	45a0      	cmp	r8, r4
 800a372:	d1f5      	bne.n	800a360 <__s2b+0x4c>
 800a374:	f1a5 0408 	sub.w	r4, r5, #8
 800a378:	444c      	add	r4, r9
 800a37a:	1b2d      	subs	r5, r5, r4
 800a37c:	1963      	adds	r3, r4, r5
 800a37e:	42bb      	cmp	r3, r7
 800a380:	db04      	blt.n	800a38c <__s2b+0x78>
 800a382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a386:	2509      	movs	r5, #9
 800a388:	340a      	adds	r4, #10
 800a38a:	e7f6      	b.n	800a37a <__s2b+0x66>
 800a38c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a390:	4601      	mov	r1, r0
 800a392:	220a      	movs	r2, #10
 800a394:	4630      	mov	r0, r6
 800a396:	3b30      	subs	r3, #48	@ 0x30
 800a398:	f7ff ff76 	bl	800a288 <__multadd>
 800a39c:	e7ee      	b.n	800a37c <__s2b+0x68>
 800a39e:	bf00      	nop
 800a3a0:	0800d52d 	.word	0x0800d52d
 800a3a4:	0800d53e 	.word	0x0800d53e

0800a3a8 <__hi0bits>:
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3ae:	bf3a      	itte	cc
 800a3b0:	0403      	lslcc	r3, r0, #16
 800a3b2:	2010      	movcc	r0, #16
 800a3b4:	2000      	movcs	r0, #0
 800a3b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3ba:	bf3c      	itt	cc
 800a3bc:	021b      	lslcc	r3, r3, #8
 800a3be:	3008      	addcc	r0, #8
 800a3c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3c4:	bf3c      	itt	cc
 800a3c6:	011b      	lslcc	r3, r3, #4
 800a3c8:	3004      	addcc	r0, #4
 800a3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ce:	bf3c      	itt	cc
 800a3d0:	009b      	lslcc	r3, r3, #2
 800a3d2:	3002      	addcc	r0, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	db05      	blt.n	800a3e4 <__hi0bits+0x3c>
 800a3d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3dc:	f100 0001 	add.w	r0, r0, #1
 800a3e0:	bf08      	it	eq
 800a3e2:	2020      	moveq	r0, #32
 800a3e4:	4770      	bx	lr

0800a3e6 <__lo0bits>:
 800a3e6:	6803      	ldr	r3, [r0, #0]
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	f013 0007 	ands.w	r0, r3, #7
 800a3ee:	d00b      	beq.n	800a408 <__lo0bits+0x22>
 800a3f0:	07d9      	lsls	r1, r3, #31
 800a3f2:	d421      	bmi.n	800a438 <__lo0bits+0x52>
 800a3f4:	0798      	lsls	r0, r3, #30
 800a3f6:	bf49      	itett	mi
 800a3f8:	085b      	lsrmi	r3, r3, #1
 800a3fa:	089b      	lsrpl	r3, r3, #2
 800a3fc:	2001      	movmi	r0, #1
 800a3fe:	6013      	strmi	r3, [r2, #0]
 800a400:	bf5c      	itt	pl
 800a402:	2002      	movpl	r0, #2
 800a404:	6013      	strpl	r3, [r2, #0]
 800a406:	4770      	bx	lr
 800a408:	b299      	uxth	r1, r3
 800a40a:	b909      	cbnz	r1, 800a410 <__lo0bits+0x2a>
 800a40c:	2010      	movs	r0, #16
 800a40e:	0c1b      	lsrs	r3, r3, #16
 800a410:	b2d9      	uxtb	r1, r3
 800a412:	b909      	cbnz	r1, 800a418 <__lo0bits+0x32>
 800a414:	3008      	adds	r0, #8
 800a416:	0a1b      	lsrs	r3, r3, #8
 800a418:	0719      	lsls	r1, r3, #28
 800a41a:	bf04      	itt	eq
 800a41c:	091b      	lsreq	r3, r3, #4
 800a41e:	3004      	addeq	r0, #4
 800a420:	0799      	lsls	r1, r3, #30
 800a422:	bf04      	itt	eq
 800a424:	089b      	lsreq	r3, r3, #2
 800a426:	3002      	addeq	r0, #2
 800a428:	07d9      	lsls	r1, r3, #31
 800a42a:	d403      	bmi.n	800a434 <__lo0bits+0x4e>
 800a42c:	085b      	lsrs	r3, r3, #1
 800a42e:	f100 0001 	add.w	r0, r0, #1
 800a432:	d003      	beq.n	800a43c <__lo0bits+0x56>
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	4770      	bx	lr
 800a438:	2000      	movs	r0, #0
 800a43a:	4770      	bx	lr
 800a43c:	2020      	movs	r0, #32
 800a43e:	4770      	bx	lr

0800a440 <__i2b>:
 800a440:	b510      	push	{r4, lr}
 800a442:	460c      	mov	r4, r1
 800a444:	2101      	movs	r1, #1
 800a446:	f7ff febd 	bl	800a1c4 <_Balloc>
 800a44a:	4602      	mov	r2, r0
 800a44c:	b928      	cbnz	r0, 800a45a <__i2b+0x1a>
 800a44e:	f240 1145 	movw	r1, #325	@ 0x145
 800a452:	4b04      	ldr	r3, [pc, #16]	@ (800a464 <__i2b+0x24>)
 800a454:	4804      	ldr	r0, [pc, #16]	@ (800a468 <__i2b+0x28>)
 800a456:	f001 fc29 	bl	800bcac <__assert_func>
 800a45a:	2301      	movs	r3, #1
 800a45c:	6144      	str	r4, [r0, #20]
 800a45e:	6103      	str	r3, [r0, #16]
 800a460:	bd10      	pop	{r4, pc}
 800a462:	bf00      	nop
 800a464:	0800d52d 	.word	0x0800d52d
 800a468:	0800d53e 	.word	0x0800d53e

0800a46c <__multiply>:
 800a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	4614      	mov	r4, r2
 800a472:	690a      	ldr	r2, [r1, #16]
 800a474:	6923      	ldr	r3, [r4, #16]
 800a476:	460f      	mov	r7, r1
 800a478:	429a      	cmp	r2, r3
 800a47a:	bfa2      	ittt	ge
 800a47c:	4623      	movge	r3, r4
 800a47e:	460c      	movge	r4, r1
 800a480:	461f      	movge	r7, r3
 800a482:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a486:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a48a:	68a3      	ldr	r3, [r4, #8]
 800a48c:	6861      	ldr	r1, [r4, #4]
 800a48e:	eb0a 0609 	add.w	r6, sl, r9
 800a492:	42b3      	cmp	r3, r6
 800a494:	b085      	sub	sp, #20
 800a496:	bfb8      	it	lt
 800a498:	3101      	addlt	r1, #1
 800a49a:	f7ff fe93 	bl	800a1c4 <_Balloc>
 800a49e:	b930      	cbnz	r0, 800a4ae <__multiply+0x42>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4a6:	4b43      	ldr	r3, [pc, #268]	@ (800a5b4 <__multiply+0x148>)
 800a4a8:	4843      	ldr	r0, [pc, #268]	@ (800a5b8 <__multiply+0x14c>)
 800a4aa:	f001 fbff 	bl	800bcac <__assert_func>
 800a4ae:	f100 0514 	add.w	r5, r0, #20
 800a4b2:	462b      	mov	r3, r5
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4ba:	4543      	cmp	r3, r8
 800a4bc:	d321      	bcc.n	800a502 <__multiply+0x96>
 800a4be:	f107 0114 	add.w	r1, r7, #20
 800a4c2:	f104 0214 	add.w	r2, r4, #20
 800a4c6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a4ca:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a4ce:	9302      	str	r3, [sp, #8]
 800a4d0:	1b13      	subs	r3, r2, r4
 800a4d2:	3b15      	subs	r3, #21
 800a4d4:	f023 0303 	bic.w	r3, r3, #3
 800a4d8:	3304      	adds	r3, #4
 800a4da:	f104 0715 	add.w	r7, r4, #21
 800a4de:	42ba      	cmp	r2, r7
 800a4e0:	bf38      	it	cc
 800a4e2:	2304      	movcc	r3, #4
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	9b02      	ldr	r3, [sp, #8]
 800a4e8:	9103      	str	r1, [sp, #12]
 800a4ea:	428b      	cmp	r3, r1
 800a4ec:	d80c      	bhi.n	800a508 <__multiply+0x9c>
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	dd03      	ble.n	800a4fa <__multiply+0x8e>
 800a4f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d05a      	beq.n	800a5b0 <__multiply+0x144>
 800a4fa:	6106      	str	r6, [r0, #16]
 800a4fc:	b005      	add	sp, #20
 800a4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a502:	f843 2b04 	str.w	r2, [r3], #4
 800a506:	e7d8      	b.n	800a4ba <__multiply+0x4e>
 800a508:	f8b1 a000 	ldrh.w	sl, [r1]
 800a50c:	f1ba 0f00 	cmp.w	sl, #0
 800a510:	d023      	beq.n	800a55a <__multiply+0xee>
 800a512:	46a9      	mov	r9, r5
 800a514:	f04f 0c00 	mov.w	ip, #0
 800a518:	f104 0e14 	add.w	lr, r4, #20
 800a51c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a520:	f8d9 3000 	ldr.w	r3, [r9]
 800a524:	fa1f fb87 	uxth.w	fp, r7
 800a528:	b29b      	uxth	r3, r3
 800a52a:	fb0a 330b 	mla	r3, sl, fp, r3
 800a52e:	4463      	add	r3, ip
 800a530:	f8d9 c000 	ldr.w	ip, [r9]
 800a534:	0c3f      	lsrs	r7, r7, #16
 800a536:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a53a:	fb0a c707 	mla	r7, sl, r7, ip
 800a53e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a542:	b29b      	uxth	r3, r3
 800a544:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a548:	4572      	cmp	r2, lr
 800a54a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a54e:	f849 3b04 	str.w	r3, [r9], #4
 800a552:	d8e3      	bhi.n	800a51c <__multiply+0xb0>
 800a554:	9b01      	ldr	r3, [sp, #4]
 800a556:	f845 c003 	str.w	ip, [r5, r3]
 800a55a:	9b03      	ldr	r3, [sp, #12]
 800a55c:	3104      	adds	r1, #4
 800a55e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a562:	f1b9 0f00 	cmp.w	r9, #0
 800a566:	d021      	beq.n	800a5ac <__multiply+0x140>
 800a568:	46ae      	mov	lr, r5
 800a56a:	f04f 0a00 	mov.w	sl, #0
 800a56e:	682b      	ldr	r3, [r5, #0]
 800a570:	f104 0c14 	add.w	ip, r4, #20
 800a574:	f8bc b000 	ldrh.w	fp, [ip]
 800a578:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	fb09 770b 	mla	r7, r9, fp, r7
 800a582:	4457      	add	r7, sl
 800a584:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a588:	f84e 3b04 	str.w	r3, [lr], #4
 800a58c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a590:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a594:	f8be 3000 	ldrh.w	r3, [lr]
 800a598:	4562      	cmp	r2, ip
 800a59a:	fb09 330a 	mla	r3, r9, sl, r3
 800a59e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a5a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5a6:	d8e5      	bhi.n	800a574 <__multiply+0x108>
 800a5a8:	9f01      	ldr	r7, [sp, #4]
 800a5aa:	51eb      	str	r3, [r5, r7]
 800a5ac:	3504      	adds	r5, #4
 800a5ae:	e79a      	b.n	800a4e6 <__multiply+0x7a>
 800a5b0:	3e01      	subs	r6, #1
 800a5b2:	e79c      	b.n	800a4ee <__multiply+0x82>
 800a5b4:	0800d52d 	.word	0x0800d52d
 800a5b8:	0800d53e 	.word	0x0800d53e

0800a5bc <__pow5mult>:
 800a5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c0:	4615      	mov	r5, r2
 800a5c2:	f012 0203 	ands.w	r2, r2, #3
 800a5c6:	4607      	mov	r7, r0
 800a5c8:	460e      	mov	r6, r1
 800a5ca:	d007      	beq.n	800a5dc <__pow5mult+0x20>
 800a5cc:	4c25      	ldr	r4, [pc, #148]	@ (800a664 <__pow5mult+0xa8>)
 800a5ce:	3a01      	subs	r2, #1
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5d6:	f7ff fe57 	bl	800a288 <__multadd>
 800a5da:	4606      	mov	r6, r0
 800a5dc:	10ad      	asrs	r5, r5, #2
 800a5de:	d03d      	beq.n	800a65c <__pow5mult+0xa0>
 800a5e0:	69fc      	ldr	r4, [r7, #28]
 800a5e2:	b97c      	cbnz	r4, 800a604 <__pow5mult+0x48>
 800a5e4:	2010      	movs	r0, #16
 800a5e6:	f7ff fd37 	bl	800a058 <malloc>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	61f8      	str	r0, [r7, #28]
 800a5ee:	b928      	cbnz	r0, 800a5fc <__pow5mult+0x40>
 800a5f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a668 <__pow5mult+0xac>)
 800a5f6:	481d      	ldr	r0, [pc, #116]	@ (800a66c <__pow5mult+0xb0>)
 800a5f8:	f001 fb58 	bl	800bcac <__assert_func>
 800a5fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a600:	6004      	str	r4, [r0, #0]
 800a602:	60c4      	str	r4, [r0, #12]
 800a604:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a60c:	b94c      	cbnz	r4, 800a622 <__pow5mult+0x66>
 800a60e:	f240 2171 	movw	r1, #625	@ 0x271
 800a612:	4638      	mov	r0, r7
 800a614:	f7ff ff14 	bl	800a440 <__i2b>
 800a618:	2300      	movs	r3, #0
 800a61a:	4604      	mov	r4, r0
 800a61c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a620:	6003      	str	r3, [r0, #0]
 800a622:	f04f 0900 	mov.w	r9, #0
 800a626:	07eb      	lsls	r3, r5, #31
 800a628:	d50a      	bpl.n	800a640 <__pow5mult+0x84>
 800a62a:	4631      	mov	r1, r6
 800a62c:	4622      	mov	r2, r4
 800a62e:	4638      	mov	r0, r7
 800a630:	f7ff ff1c 	bl	800a46c <__multiply>
 800a634:	4680      	mov	r8, r0
 800a636:	4631      	mov	r1, r6
 800a638:	4638      	mov	r0, r7
 800a63a:	f7ff fe03 	bl	800a244 <_Bfree>
 800a63e:	4646      	mov	r6, r8
 800a640:	106d      	asrs	r5, r5, #1
 800a642:	d00b      	beq.n	800a65c <__pow5mult+0xa0>
 800a644:	6820      	ldr	r0, [r4, #0]
 800a646:	b938      	cbnz	r0, 800a658 <__pow5mult+0x9c>
 800a648:	4622      	mov	r2, r4
 800a64a:	4621      	mov	r1, r4
 800a64c:	4638      	mov	r0, r7
 800a64e:	f7ff ff0d 	bl	800a46c <__multiply>
 800a652:	6020      	str	r0, [r4, #0]
 800a654:	f8c0 9000 	str.w	r9, [r0]
 800a658:	4604      	mov	r4, r0
 800a65a:	e7e4      	b.n	800a626 <__pow5mult+0x6a>
 800a65c:	4630      	mov	r0, r6
 800a65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a662:	bf00      	nop
 800a664:	0800d598 	.word	0x0800d598
 800a668:	0800d4be 	.word	0x0800d4be
 800a66c:	0800d53e 	.word	0x0800d53e

0800a670 <__lshift>:
 800a670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a674:	460c      	mov	r4, r1
 800a676:	4607      	mov	r7, r0
 800a678:	4691      	mov	r9, r2
 800a67a:	6923      	ldr	r3, [r4, #16]
 800a67c:	6849      	ldr	r1, [r1, #4]
 800a67e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a682:	68a3      	ldr	r3, [r4, #8]
 800a684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a688:	f108 0601 	add.w	r6, r8, #1
 800a68c:	42b3      	cmp	r3, r6
 800a68e:	db0b      	blt.n	800a6a8 <__lshift+0x38>
 800a690:	4638      	mov	r0, r7
 800a692:	f7ff fd97 	bl	800a1c4 <_Balloc>
 800a696:	4605      	mov	r5, r0
 800a698:	b948      	cbnz	r0, 800a6ae <__lshift+0x3e>
 800a69a:	4602      	mov	r2, r0
 800a69c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6a0:	4b27      	ldr	r3, [pc, #156]	@ (800a740 <__lshift+0xd0>)
 800a6a2:	4828      	ldr	r0, [pc, #160]	@ (800a744 <__lshift+0xd4>)
 800a6a4:	f001 fb02 	bl	800bcac <__assert_func>
 800a6a8:	3101      	adds	r1, #1
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	e7ee      	b.n	800a68c <__lshift+0x1c>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f100 0114 	add.w	r1, r0, #20
 800a6b4:	f100 0210 	add.w	r2, r0, #16
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	4553      	cmp	r3, sl
 800a6bc:	db33      	blt.n	800a726 <__lshift+0xb6>
 800a6be:	6920      	ldr	r0, [r4, #16]
 800a6c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6c4:	f104 0314 	add.w	r3, r4, #20
 800a6c8:	f019 091f 	ands.w	r9, r9, #31
 800a6cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6d4:	d02b      	beq.n	800a72e <__lshift+0xbe>
 800a6d6:	468a      	mov	sl, r1
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f1c9 0e20 	rsb	lr, r9, #32
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	fa00 f009 	lsl.w	r0, r0, r9
 800a6e4:	4310      	orrs	r0, r2
 800a6e6:	f84a 0b04 	str.w	r0, [sl], #4
 800a6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ee:	459c      	cmp	ip, r3
 800a6f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6f4:	d8f3      	bhi.n	800a6de <__lshift+0x6e>
 800a6f6:	ebac 0304 	sub.w	r3, ip, r4
 800a6fa:	3b15      	subs	r3, #21
 800a6fc:	f023 0303 	bic.w	r3, r3, #3
 800a700:	3304      	adds	r3, #4
 800a702:	f104 0015 	add.w	r0, r4, #21
 800a706:	4584      	cmp	ip, r0
 800a708:	bf38      	it	cc
 800a70a:	2304      	movcc	r3, #4
 800a70c:	50ca      	str	r2, [r1, r3]
 800a70e:	b10a      	cbz	r2, 800a714 <__lshift+0xa4>
 800a710:	f108 0602 	add.w	r6, r8, #2
 800a714:	3e01      	subs	r6, #1
 800a716:	4638      	mov	r0, r7
 800a718:	4621      	mov	r1, r4
 800a71a:	612e      	str	r6, [r5, #16]
 800a71c:	f7ff fd92 	bl	800a244 <_Bfree>
 800a720:	4628      	mov	r0, r5
 800a722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a726:	f842 0f04 	str.w	r0, [r2, #4]!
 800a72a:	3301      	adds	r3, #1
 800a72c:	e7c5      	b.n	800a6ba <__lshift+0x4a>
 800a72e:	3904      	subs	r1, #4
 800a730:	f853 2b04 	ldr.w	r2, [r3], #4
 800a734:	459c      	cmp	ip, r3
 800a736:	f841 2f04 	str.w	r2, [r1, #4]!
 800a73a:	d8f9      	bhi.n	800a730 <__lshift+0xc0>
 800a73c:	e7ea      	b.n	800a714 <__lshift+0xa4>
 800a73e:	bf00      	nop
 800a740:	0800d52d 	.word	0x0800d52d
 800a744:	0800d53e 	.word	0x0800d53e

0800a748 <__mcmp>:
 800a748:	4603      	mov	r3, r0
 800a74a:	690a      	ldr	r2, [r1, #16]
 800a74c:	6900      	ldr	r0, [r0, #16]
 800a74e:	b530      	push	{r4, r5, lr}
 800a750:	1a80      	subs	r0, r0, r2
 800a752:	d10e      	bne.n	800a772 <__mcmp+0x2a>
 800a754:	3314      	adds	r3, #20
 800a756:	3114      	adds	r1, #20
 800a758:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a75c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a768:	4295      	cmp	r5, r2
 800a76a:	d003      	beq.n	800a774 <__mcmp+0x2c>
 800a76c:	d205      	bcs.n	800a77a <__mcmp+0x32>
 800a76e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a772:	bd30      	pop	{r4, r5, pc}
 800a774:	42a3      	cmp	r3, r4
 800a776:	d3f3      	bcc.n	800a760 <__mcmp+0x18>
 800a778:	e7fb      	b.n	800a772 <__mcmp+0x2a>
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7f9      	b.n	800a772 <__mcmp+0x2a>
	...

0800a780 <__mdiff>:
 800a780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	4689      	mov	r9, r1
 800a786:	4606      	mov	r6, r0
 800a788:	4611      	mov	r1, r2
 800a78a:	4648      	mov	r0, r9
 800a78c:	4614      	mov	r4, r2
 800a78e:	f7ff ffdb 	bl	800a748 <__mcmp>
 800a792:	1e05      	subs	r5, r0, #0
 800a794:	d112      	bne.n	800a7bc <__mdiff+0x3c>
 800a796:	4629      	mov	r1, r5
 800a798:	4630      	mov	r0, r6
 800a79a:	f7ff fd13 	bl	800a1c4 <_Balloc>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	b928      	cbnz	r0, 800a7ae <__mdiff+0x2e>
 800a7a2:	f240 2137 	movw	r1, #567	@ 0x237
 800a7a6:	4b3e      	ldr	r3, [pc, #248]	@ (800a8a0 <__mdiff+0x120>)
 800a7a8:	483e      	ldr	r0, [pc, #248]	@ (800a8a4 <__mdiff+0x124>)
 800a7aa:	f001 fa7f 	bl	800bcac <__assert_func>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	b003      	add	sp, #12
 800a7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7bc:	bfbc      	itt	lt
 800a7be:	464b      	movlt	r3, r9
 800a7c0:	46a1      	movlt	r9, r4
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7c8:	bfba      	itte	lt
 800a7ca:	461c      	movlt	r4, r3
 800a7cc:	2501      	movlt	r5, #1
 800a7ce:	2500      	movge	r5, #0
 800a7d0:	f7ff fcf8 	bl	800a1c4 <_Balloc>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	b918      	cbnz	r0, 800a7e0 <__mdiff+0x60>
 800a7d8:	f240 2145 	movw	r1, #581	@ 0x245
 800a7dc:	4b30      	ldr	r3, [pc, #192]	@ (800a8a0 <__mdiff+0x120>)
 800a7de:	e7e3      	b.n	800a7a8 <__mdiff+0x28>
 800a7e0:	f100 0b14 	add.w	fp, r0, #20
 800a7e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7e8:	f109 0310 	add.w	r3, r9, #16
 800a7ec:	60c5      	str	r5, [r0, #12]
 800a7ee:	f04f 0c00 	mov.w	ip, #0
 800a7f2:	f109 0514 	add.w	r5, r9, #20
 800a7f6:	46d9      	mov	r9, fp
 800a7f8:	6926      	ldr	r6, [r4, #16]
 800a7fa:	f104 0e14 	add.w	lr, r4, #20
 800a7fe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a802:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a80e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a812:	b281      	uxth	r1, r0
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	fa1f f38a 	uxth.w	r3, sl
 800a81a:	1a5b      	subs	r3, r3, r1
 800a81c:	0c00      	lsrs	r0, r0, #16
 800a81e:	4463      	add	r3, ip
 800a820:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a824:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a828:	b29b      	uxth	r3, r3
 800a82a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a82e:	4576      	cmp	r6, lr
 800a830:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a834:	f849 3b04 	str.w	r3, [r9], #4
 800a838:	d8e6      	bhi.n	800a808 <__mdiff+0x88>
 800a83a:	1b33      	subs	r3, r6, r4
 800a83c:	3b15      	subs	r3, #21
 800a83e:	f023 0303 	bic.w	r3, r3, #3
 800a842:	3415      	adds	r4, #21
 800a844:	3304      	adds	r3, #4
 800a846:	42a6      	cmp	r6, r4
 800a848:	bf38      	it	cc
 800a84a:	2304      	movcc	r3, #4
 800a84c:	441d      	add	r5, r3
 800a84e:	445b      	add	r3, fp
 800a850:	461e      	mov	r6, r3
 800a852:	462c      	mov	r4, r5
 800a854:	4544      	cmp	r4, r8
 800a856:	d30e      	bcc.n	800a876 <__mdiff+0xf6>
 800a858:	f108 0103 	add.w	r1, r8, #3
 800a85c:	1b49      	subs	r1, r1, r5
 800a85e:	f021 0103 	bic.w	r1, r1, #3
 800a862:	3d03      	subs	r5, #3
 800a864:	45a8      	cmp	r8, r5
 800a866:	bf38      	it	cc
 800a868:	2100      	movcc	r1, #0
 800a86a:	440b      	add	r3, r1
 800a86c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a870:	b199      	cbz	r1, 800a89a <__mdiff+0x11a>
 800a872:	6117      	str	r7, [r2, #16]
 800a874:	e79e      	b.n	800a7b4 <__mdiff+0x34>
 800a876:	46e6      	mov	lr, ip
 800a878:	f854 1b04 	ldr.w	r1, [r4], #4
 800a87c:	fa1f fc81 	uxth.w	ip, r1
 800a880:	44f4      	add	ip, lr
 800a882:	0c08      	lsrs	r0, r1, #16
 800a884:	4471      	add	r1, lr
 800a886:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a88a:	b289      	uxth	r1, r1
 800a88c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a890:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a894:	f846 1b04 	str.w	r1, [r6], #4
 800a898:	e7dc      	b.n	800a854 <__mdiff+0xd4>
 800a89a:	3f01      	subs	r7, #1
 800a89c:	e7e6      	b.n	800a86c <__mdiff+0xec>
 800a89e:	bf00      	nop
 800a8a0:	0800d52d 	.word	0x0800d52d
 800a8a4:	0800d53e 	.word	0x0800d53e

0800a8a8 <__ulp>:
 800a8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e4 <__ulp+0x3c>)
 800a8aa:	400b      	ands	r3, r1
 800a8ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dc08      	bgt.n	800a8c6 <__ulp+0x1e>
 800a8b4:	425b      	negs	r3, r3
 800a8b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8be:	da04      	bge.n	800a8ca <__ulp+0x22>
 800a8c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8c4:	4113      	asrs	r3, r2
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	e008      	b.n	800a8dc <__ulp+0x34>
 800a8ca:	f1a2 0314 	sub.w	r3, r2, #20
 800a8ce:	2b1e      	cmp	r3, #30
 800a8d0:	bfd6      	itet	le
 800a8d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a8d6:	2201      	movgt	r2, #1
 800a8d8:	40da      	lsrle	r2, r3
 800a8da:	2300      	movs	r3, #0
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	7ff00000 	.word	0x7ff00000

0800a8e8 <__b2d>:
 800a8e8:	6902      	ldr	r2, [r0, #16]
 800a8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ec:	f100 0614 	add.w	r6, r0, #20
 800a8f0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a8f4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a8f8:	4f1e      	ldr	r7, [pc, #120]	@ (800a974 <__b2d+0x8c>)
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7ff fd54 	bl	800a3a8 <__hi0bits>
 800a900:	4603      	mov	r3, r0
 800a902:	f1c0 0020 	rsb	r0, r0, #32
 800a906:	2b0a      	cmp	r3, #10
 800a908:	f1a2 0504 	sub.w	r5, r2, #4
 800a90c:	6008      	str	r0, [r1, #0]
 800a90e:	dc12      	bgt.n	800a936 <__b2d+0x4e>
 800a910:	42ae      	cmp	r6, r5
 800a912:	bf2c      	ite	cs
 800a914:	2200      	movcs	r2, #0
 800a916:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a91a:	f1c3 0c0b 	rsb	ip, r3, #11
 800a91e:	3315      	adds	r3, #21
 800a920:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a924:	fa04 f303 	lsl.w	r3, r4, r3
 800a928:	fa22 f20c 	lsr.w	r2, r2, ip
 800a92c:	ea4e 0107 	orr.w	r1, lr, r7
 800a930:	431a      	orrs	r2, r3
 800a932:	4610      	mov	r0, r2
 800a934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a936:	42ae      	cmp	r6, r5
 800a938:	bf36      	itet	cc
 800a93a:	f1a2 0508 	subcc.w	r5, r2, #8
 800a93e:	2200      	movcs	r2, #0
 800a940:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a944:	3b0b      	subs	r3, #11
 800a946:	d012      	beq.n	800a96e <__b2d+0x86>
 800a948:	f1c3 0720 	rsb	r7, r3, #32
 800a94c:	fa22 f107 	lsr.w	r1, r2, r7
 800a950:	409c      	lsls	r4, r3
 800a952:	430c      	orrs	r4, r1
 800a954:	42b5      	cmp	r5, r6
 800a956:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a95a:	bf94      	ite	ls
 800a95c:	2400      	movls	r4, #0
 800a95e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a962:	409a      	lsls	r2, r3
 800a964:	40fc      	lsrs	r4, r7
 800a966:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a96a:	4322      	orrs	r2, r4
 800a96c:	e7e1      	b.n	800a932 <__b2d+0x4a>
 800a96e:	ea44 0107 	orr.w	r1, r4, r7
 800a972:	e7de      	b.n	800a932 <__b2d+0x4a>
 800a974:	3ff00000 	.word	0x3ff00000

0800a978 <__d2b>:
 800a978:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a97c:	2101      	movs	r1, #1
 800a97e:	4690      	mov	r8, r2
 800a980:	4699      	mov	r9, r3
 800a982:	9e08      	ldr	r6, [sp, #32]
 800a984:	f7ff fc1e 	bl	800a1c4 <_Balloc>
 800a988:	4604      	mov	r4, r0
 800a98a:	b930      	cbnz	r0, 800a99a <__d2b+0x22>
 800a98c:	4602      	mov	r2, r0
 800a98e:	f240 310f 	movw	r1, #783	@ 0x30f
 800a992:	4b23      	ldr	r3, [pc, #140]	@ (800aa20 <__d2b+0xa8>)
 800a994:	4823      	ldr	r0, [pc, #140]	@ (800aa24 <__d2b+0xac>)
 800a996:	f001 f989 	bl	800bcac <__assert_func>
 800a99a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a99e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9a2:	b10d      	cbz	r5, 800a9a8 <__d2b+0x30>
 800a9a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	f1b8 0300 	subs.w	r3, r8, #0
 800a9ae:	d024      	beq.n	800a9fa <__d2b+0x82>
 800a9b0:	4668      	mov	r0, sp
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	f7ff fd17 	bl	800a3e6 <__lo0bits>
 800a9b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9bc:	b1d8      	cbz	r0, 800a9f6 <__d2b+0x7e>
 800a9be:	f1c0 0320 	rsb	r3, r0, #32
 800a9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	40c2      	lsrs	r2, r0
 800a9ca:	6163      	str	r3, [r4, #20]
 800a9cc:	9201      	str	r2, [sp, #4]
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	bf0c      	ite	eq
 800a9d4:	2201      	moveq	r2, #1
 800a9d6:	2202      	movne	r2, #2
 800a9d8:	61a3      	str	r3, [r4, #24]
 800a9da:	6122      	str	r2, [r4, #16]
 800a9dc:	b1ad      	cbz	r5, 800aa0a <__d2b+0x92>
 800a9de:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9e2:	4405      	add	r5, r0
 800a9e4:	6035      	str	r5, [r6, #0]
 800a9e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ec:	6018      	str	r0, [r3, #0]
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	b002      	add	sp, #8
 800a9f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a9f6:	6161      	str	r1, [r4, #20]
 800a9f8:	e7e9      	b.n	800a9ce <__d2b+0x56>
 800a9fa:	a801      	add	r0, sp, #4
 800a9fc:	f7ff fcf3 	bl	800a3e6 <__lo0bits>
 800aa00:	9b01      	ldr	r3, [sp, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	6163      	str	r3, [r4, #20]
 800aa06:	3020      	adds	r0, #32
 800aa08:	e7e7      	b.n	800a9da <__d2b+0x62>
 800aa0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa12:	6030      	str	r0, [r6, #0]
 800aa14:	6918      	ldr	r0, [r3, #16]
 800aa16:	f7ff fcc7 	bl	800a3a8 <__hi0bits>
 800aa1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa1e:	e7e4      	b.n	800a9ea <__d2b+0x72>
 800aa20:	0800d52d 	.word	0x0800d52d
 800aa24:	0800d53e 	.word	0x0800d53e

0800aa28 <__ratio>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	e9cd 1000 	strd	r1, r0, [sp]
 800aa32:	a902      	add	r1, sp, #8
 800aa34:	f7ff ff58 	bl	800a8e8 <__b2d>
 800aa38:	468b      	mov	fp, r1
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	460f      	mov	r7, r1
 800aa3e:	9800      	ldr	r0, [sp, #0]
 800aa40:	a903      	add	r1, sp, #12
 800aa42:	f7ff ff51 	bl	800a8e8 <__b2d>
 800aa46:	460d      	mov	r5, r1
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	4689      	mov	r9, r1
 800aa4c:	6919      	ldr	r1, [r3, #16]
 800aa4e:	9b00      	ldr	r3, [sp, #0]
 800aa50:	4604      	mov	r4, r0
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	4630      	mov	r0, r6
 800aa56:	1ac9      	subs	r1, r1, r3
 800aa58:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bfcd      	iteet	gt
 800aa66:	463a      	movgt	r2, r7
 800aa68:	462a      	movle	r2, r5
 800aa6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa6e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800aa72:	bfd8      	it	le
 800aa74:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa78:	464b      	mov	r3, r9
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	4659      	mov	r1, fp
 800aa7e:	f7f5 fe55 	bl	800072c <__aeabi_ddiv>
 800aa82:	b005      	add	sp, #20
 800aa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa88 <__copybits>:
 800aa88:	3901      	subs	r1, #1
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	1149      	asrs	r1, r1, #5
 800aa8e:	6914      	ldr	r4, [r2, #16]
 800aa90:	3101      	adds	r1, #1
 800aa92:	f102 0314 	add.w	r3, r2, #20
 800aa96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa9e:	1f05      	subs	r5, r0, #4
 800aaa0:	42a3      	cmp	r3, r4
 800aaa2:	d30c      	bcc.n	800aabe <__copybits+0x36>
 800aaa4:	1aa3      	subs	r3, r4, r2
 800aaa6:	3b11      	subs	r3, #17
 800aaa8:	f023 0303 	bic.w	r3, r3, #3
 800aaac:	3211      	adds	r2, #17
 800aaae:	42a2      	cmp	r2, r4
 800aab0:	bf88      	it	hi
 800aab2:	2300      	movhi	r3, #0
 800aab4:	4418      	add	r0, r3
 800aab6:	2300      	movs	r3, #0
 800aab8:	4288      	cmp	r0, r1
 800aaba:	d305      	bcc.n	800aac8 <__copybits+0x40>
 800aabc:	bd70      	pop	{r4, r5, r6, pc}
 800aabe:	f853 6b04 	ldr.w	r6, [r3], #4
 800aac2:	f845 6f04 	str.w	r6, [r5, #4]!
 800aac6:	e7eb      	b.n	800aaa0 <__copybits+0x18>
 800aac8:	f840 3b04 	str.w	r3, [r0], #4
 800aacc:	e7f4      	b.n	800aab8 <__copybits+0x30>

0800aace <__any_on>:
 800aace:	f100 0214 	add.w	r2, r0, #20
 800aad2:	6900      	ldr	r0, [r0, #16]
 800aad4:	114b      	asrs	r3, r1, #5
 800aad6:	4298      	cmp	r0, r3
 800aad8:	b510      	push	{r4, lr}
 800aada:	db11      	blt.n	800ab00 <__any_on+0x32>
 800aadc:	dd0a      	ble.n	800aaf4 <__any_on+0x26>
 800aade:	f011 011f 	ands.w	r1, r1, #31
 800aae2:	d007      	beq.n	800aaf4 <__any_on+0x26>
 800aae4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aae8:	fa24 f001 	lsr.w	r0, r4, r1
 800aaec:	fa00 f101 	lsl.w	r1, r0, r1
 800aaf0:	428c      	cmp	r4, r1
 800aaf2:	d10b      	bne.n	800ab0c <__any_on+0x3e>
 800aaf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d803      	bhi.n	800ab04 <__any_on+0x36>
 800aafc:	2000      	movs	r0, #0
 800aafe:	bd10      	pop	{r4, pc}
 800ab00:	4603      	mov	r3, r0
 800ab02:	e7f7      	b.n	800aaf4 <__any_on+0x26>
 800ab04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab08:	2900      	cmp	r1, #0
 800ab0a:	d0f5      	beq.n	800aaf8 <__any_on+0x2a>
 800ab0c:	2001      	movs	r0, #1
 800ab0e:	e7f6      	b.n	800aafe <__any_on+0x30>

0800ab10 <sulp>:
 800ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab14:	460f      	mov	r7, r1
 800ab16:	4690      	mov	r8, r2
 800ab18:	f7ff fec6 	bl	800a8a8 <__ulp>
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	f1b8 0f00 	cmp.w	r8, #0
 800ab24:	d011      	beq.n	800ab4a <sulp+0x3a>
 800ab26:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	dd0b      	ble.n	800ab4a <sulp+0x3a>
 800ab32:	2400      	movs	r4, #0
 800ab34:	051b      	lsls	r3, r3, #20
 800ab36:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab3a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab3e:	4622      	mov	r2, r4
 800ab40:	462b      	mov	r3, r5
 800ab42:	f7f5 fcc9 	bl	80004d8 <__aeabi_dmul>
 800ab46:	4604      	mov	r4, r0
 800ab48:	460d      	mov	r5, r1
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab52:	0000      	movs	r0, r0
 800ab54:	0000      	movs	r0, r0
	...

0800ab58 <_strtod_l>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	b09f      	sub	sp, #124	@ 0x7c
 800ab5e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab60:	2200      	movs	r2, #0
 800ab62:	460c      	mov	r4, r1
 800ab64:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab66:	f04f 0a00 	mov.w	sl, #0
 800ab6a:	f04f 0b00 	mov.w	fp, #0
 800ab6e:	460a      	mov	r2, r1
 800ab70:	9005      	str	r0, [sp, #20]
 800ab72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab74:	7811      	ldrb	r1, [r2, #0]
 800ab76:	292b      	cmp	r1, #43	@ 0x2b
 800ab78:	d048      	beq.n	800ac0c <_strtod_l+0xb4>
 800ab7a:	d836      	bhi.n	800abea <_strtod_l+0x92>
 800ab7c:	290d      	cmp	r1, #13
 800ab7e:	d830      	bhi.n	800abe2 <_strtod_l+0x8a>
 800ab80:	2908      	cmp	r1, #8
 800ab82:	d830      	bhi.n	800abe6 <_strtod_l+0x8e>
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d039      	beq.n	800abfc <_strtod_l+0xa4>
 800ab88:	2200      	movs	r2, #0
 800ab8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ab8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ab8e:	782a      	ldrb	r2, [r5, #0]
 800ab90:	2a30      	cmp	r2, #48	@ 0x30
 800ab92:	f040 80b1 	bne.w	800acf8 <_strtod_l+0x1a0>
 800ab96:	786a      	ldrb	r2, [r5, #1]
 800ab98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab9c:	2a58      	cmp	r2, #88	@ 0x58
 800ab9e:	d16c      	bne.n	800ac7a <_strtod_l+0x122>
 800aba0:	9302      	str	r3, [sp, #8]
 800aba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aba4:	4a8e      	ldr	r2, [pc, #568]	@ (800ade0 <_strtod_l+0x288>)
 800aba6:	9301      	str	r3, [sp, #4]
 800aba8:	ab1a      	add	r3, sp, #104	@ 0x68
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	9805      	ldr	r0, [sp, #20]
 800abae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abb0:	a919      	add	r1, sp, #100	@ 0x64
 800abb2:	f001 f915 	bl	800bde0 <__gethex>
 800abb6:	f010 060f 	ands.w	r6, r0, #15
 800abba:	4604      	mov	r4, r0
 800abbc:	d005      	beq.n	800abca <_strtod_l+0x72>
 800abbe:	2e06      	cmp	r6, #6
 800abc0:	d126      	bne.n	800ac10 <_strtod_l+0xb8>
 800abc2:	2300      	movs	r3, #0
 800abc4:	3501      	adds	r5, #1
 800abc6:	9519      	str	r5, [sp, #100]	@ 0x64
 800abc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f040 8584 	bne.w	800b6da <_strtod_l+0xb82>
 800abd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abd4:	b1bb      	cbz	r3, 800ac06 <_strtod_l+0xae>
 800abd6:	4650      	mov	r0, sl
 800abd8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800abdc:	b01f      	add	sp, #124	@ 0x7c
 800abde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe2:	2920      	cmp	r1, #32
 800abe4:	d1d0      	bne.n	800ab88 <_strtod_l+0x30>
 800abe6:	3201      	adds	r2, #1
 800abe8:	e7c3      	b.n	800ab72 <_strtod_l+0x1a>
 800abea:	292d      	cmp	r1, #45	@ 0x2d
 800abec:	d1cc      	bne.n	800ab88 <_strtod_l+0x30>
 800abee:	2101      	movs	r1, #1
 800abf0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800abf2:	1c51      	adds	r1, r2, #1
 800abf4:	9119      	str	r1, [sp, #100]	@ 0x64
 800abf6:	7852      	ldrb	r2, [r2, #1]
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	d1c7      	bne.n	800ab8c <_strtod_l+0x34>
 800abfc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abfe:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f040 8568 	bne.w	800b6d6 <_strtod_l+0xb7e>
 800ac06:	4650      	mov	r0, sl
 800ac08:	4659      	mov	r1, fp
 800ac0a:	e7e7      	b.n	800abdc <_strtod_l+0x84>
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	e7ef      	b.n	800abf0 <_strtod_l+0x98>
 800ac10:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac12:	b13a      	cbz	r2, 800ac24 <_strtod_l+0xcc>
 800ac14:	2135      	movs	r1, #53	@ 0x35
 800ac16:	a81c      	add	r0, sp, #112	@ 0x70
 800ac18:	f7ff ff36 	bl	800aa88 <__copybits>
 800ac1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac1e:	9805      	ldr	r0, [sp, #20]
 800ac20:	f7ff fb10 	bl	800a244 <_Bfree>
 800ac24:	3e01      	subs	r6, #1
 800ac26:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac28:	2e04      	cmp	r6, #4
 800ac2a:	d806      	bhi.n	800ac3a <_strtod_l+0xe2>
 800ac2c:	e8df f006 	tbb	[pc, r6]
 800ac30:	201d0314 	.word	0x201d0314
 800ac34:	14          	.byte	0x14
 800ac35:	00          	.byte	0x00
 800ac36:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac3a:	05e1      	lsls	r1, r4, #23
 800ac3c:	bf48      	it	mi
 800ac3e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac42:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac46:	0d1b      	lsrs	r3, r3, #20
 800ac48:	051b      	lsls	r3, r3, #20
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1bd      	bne.n	800abca <_strtod_l+0x72>
 800ac4e:	f7fe fb2b 	bl	80092a8 <__errno>
 800ac52:	2322      	movs	r3, #34	@ 0x22
 800ac54:	6003      	str	r3, [r0, #0]
 800ac56:	e7b8      	b.n	800abca <_strtod_l+0x72>
 800ac58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac64:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac68:	e7e7      	b.n	800ac3a <_strtod_l+0xe2>
 800ac6a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800ade4 <_strtod_l+0x28c>
 800ac6e:	e7e4      	b.n	800ac3a <_strtod_l+0xe2>
 800ac70:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac74:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ac78:	e7df      	b.n	800ac3a <_strtod_l+0xe2>
 800ac7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac80:	785b      	ldrb	r3, [r3, #1]
 800ac82:	2b30      	cmp	r3, #48	@ 0x30
 800ac84:	d0f9      	beq.n	800ac7a <_strtod_l+0x122>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d09f      	beq.n	800abca <_strtod_l+0x72>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac90:	220a      	movs	r2, #10
 800ac92:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac94:	2300      	movs	r3, #0
 800ac96:	461f      	mov	r7, r3
 800ac98:	9308      	str	r3, [sp, #32]
 800ac9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac9c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ac9e:	7805      	ldrb	r5, [r0, #0]
 800aca0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aca4:	b2d9      	uxtb	r1, r3
 800aca6:	2909      	cmp	r1, #9
 800aca8:	d928      	bls.n	800acfc <_strtod_l+0x1a4>
 800acaa:	2201      	movs	r2, #1
 800acac:	494e      	ldr	r1, [pc, #312]	@ (800ade8 <_strtod_l+0x290>)
 800acae:	f000 ffc7 	bl	800bc40 <strncmp>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d032      	beq.n	800ad1c <_strtod_l+0x1c4>
 800acb6:	2000      	movs	r0, #0
 800acb8:	462a      	mov	r2, r5
 800acba:	4681      	mov	r9, r0
 800acbc:	463d      	mov	r5, r7
 800acbe:	4603      	mov	r3, r0
 800acc0:	2a65      	cmp	r2, #101	@ 0x65
 800acc2:	d001      	beq.n	800acc8 <_strtod_l+0x170>
 800acc4:	2a45      	cmp	r2, #69	@ 0x45
 800acc6:	d114      	bne.n	800acf2 <_strtod_l+0x19a>
 800acc8:	b91d      	cbnz	r5, 800acd2 <_strtod_l+0x17a>
 800acca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800accc:	4302      	orrs	r2, r0
 800acce:	d095      	beq.n	800abfc <_strtod_l+0xa4>
 800acd0:	2500      	movs	r5, #0
 800acd2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800acd4:	1c62      	adds	r2, r4, #1
 800acd6:	9219      	str	r2, [sp, #100]	@ 0x64
 800acd8:	7862      	ldrb	r2, [r4, #1]
 800acda:	2a2b      	cmp	r2, #43	@ 0x2b
 800acdc:	d077      	beq.n	800adce <_strtod_l+0x276>
 800acde:	2a2d      	cmp	r2, #45	@ 0x2d
 800ace0:	d07b      	beq.n	800adda <_strtod_l+0x282>
 800ace2:	f04f 0c00 	mov.w	ip, #0
 800ace6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800acea:	2909      	cmp	r1, #9
 800acec:	f240 8082 	bls.w	800adf4 <_strtod_l+0x29c>
 800acf0:	9419      	str	r4, [sp, #100]	@ 0x64
 800acf2:	f04f 0800 	mov.w	r8, #0
 800acf6:	e0a2      	b.n	800ae3e <_strtod_l+0x2e6>
 800acf8:	2300      	movs	r3, #0
 800acfa:	e7c7      	b.n	800ac8c <_strtod_l+0x134>
 800acfc:	2f08      	cmp	r7, #8
 800acfe:	bfd5      	itete	le
 800ad00:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ad02:	9908      	ldrgt	r1, [sp, #32]
 800ad04:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad08:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ad0c:	f100 0001 	add.w	r0, r0, #1
 800ad10:	bfd4      	ite	le
 800ad12:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ad14:	9308      	strgt	r3, [sp, #32]
 800ad16:	3701      	adds	r7, #1
 800ad18:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad1a:	e7bf      	b.n	800ac9c <_strtod_l+0x144>
 800ad1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad22:	785a      	ldrb	r2, [r3, #1]
 800ad24:	b37f      	cbz	r7, 800ad86 <_strtod_l+0x22e>
 800ad26:	4681      	mov	r9, r0
 800ad28:	463d      	mov	r5, r7
 800ad2a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad2e:	2b09      	cmp	r3, #9
 800ad30:	d912      	bls.n	800ad58 <_strtod_l+0x200>
 800ad32:	2301      	movs	r3, #1
 800ad34:	e7c4      	b.n	800acc0 <_strtod_l+0x168>
 800ad36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad38:	3001      	adds	r0, #1
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad3e:	785a      	ldrb	r2, [r3, #1]
 800ad40:	2a30      	cmp	r2, #48	@ 0x30
 800ad42:	d0f8      	beq.n	800ad36 <_strtod_l+0x1de>
 800ad44:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	f200 84cb 	bhi.w	800b6e4 <_strtod_l+0xb8c>
 800ad4e:	4681      	mov	r9, r0
 800ad50:	2000      	movs	r0, #0
 800ad52:	4605      	mov	r5, r0
 800ad54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad56:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad58:	3a30      	subs	r2, #48	@ 0x30
 800ad5a:	f100 0301 	add.w	r3, r0, #1
 800ad5e:	d02a      	beq.n	800adb6 <_strtod_l+0x25e>
 800ad60:	4499      	add	r9, r3
 800ad62:	210a      	movs	r1, #10
 800ad64:	462b      	mov	r3, r5
 800ad66:	eb00 0c05 	add.w	ip, r0, r5
 800ad6a:	4563      	cmp	r3, ip
 800ad6c:	d10d      	bne.n	800ad8a <_strtod_l+0x232>
 800ad6e:	1c69      	adds	r1, r5, #1
 800ad70:	4401      	add	r1, r0
 800ad72:	4428      	add	r0, r5
 800ad74:	2808      	cmp	r0, #8
 800ad76:	dc16      	bgt.n	800ada6 <_strtod_l+0x24e>
 800ad78:	230a      	movs	r3, #10
 800ad7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad7c:	fb03 2300 	mla	r3, r3, r0, r2
 800ad80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad82:	2300      	movs	r3, #0
 800ad84:	e018      	b.n	800adb8 <_strtod_l+0x260>
 800ad86:	4638      	mov	r0, r7
 800ad88:	e7da      	b.n	800ad40 <_strtod_l+0x1e8>
 800ad8a:	2b08      	cmp	r3, #8
 800ad8c:	f103 0301 	add.w	r3, r3, #1
 800ad90:	dc03      	bgt.n	800ad9a <_strtod_l+0x242>
 800ad92:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ad94:	434e      	muls	r6, r1
 800ad96:	960a      	str	r6, [sp, #40]	@ 0x28
 800ad98:	e7e7      	b.n	800ad6a <_strtod_l+0x212>
 800ad9a:	2b10      	cmp	r3, #16
 800ad9c:	bfde      	ittt	le
 800ad9e:	9e08      	ldrle	r6, [sp, #32]
 800ada0:	434e      	mulle	r6, r1
 800ada2:	9608      	strle	r6, [sp, #32]
 800ada4:	e7e1      	b.n	800ad6a <_strtod_l+0x212>
 800ada6:	280f      	cmp	r0, #15
 800ada8:	dceb      	bgt.n	800ad82 <_strtod_l+0x22a>
 800adaa:	230a      	movs	r3, #10
 800adac:	9808      	ldr	r0, [sp, #32]
 800adae:	fb03 2300 	mla	r3, r3, r0, r2
 800adb2:	9308      	str	r3, [sp, #32]
 800adb4:	e7e5      	b.n	800ad82 <_strtod_l+0x22a>
 800adb6:	4629      	mov	r1, r5
 800adb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adba:	460d      	mov	r5, r1
 800adbc:	1c50      	adds	r0, r2, #1
 800adbe:	9019      	str	r0, [sp, #100]	@ 0x64
 800adc0:	7852      	ldrb	r2, [r2, #1]
 800adc2:	4618      	mov	r0, r3
 800adc4:	e7b1      	b.n	800ad2a <_strtod_l+0x1d2>
 800adc6:	f04f 0900 	mov.w	r9, #0
 800adca:	2301      	movs	r3, #1
 800adcc:	e77d      	b.n	800acca <_strtod_l+0x172>
 800adce:	f04f 0c00 	mov.w	ip, #0
 800add2:	1ca2      	adds	r2, r4, #2
 800add4:	9219      	str	r2, [sp, #100]	@ 0x64
 800add6:	78a2      	ldrb	r2, [r4, #2]
 800add8:	e785      	b.n	800ace6 <_strtod_l+0x18e>
 800adda:	f04f 0c01 	mov.w	ip, #1
 800adde:	e7f8      	b.n	800add2 <_strtod_l+0x27a>
 800ade0:	0800d6b0 	.word	0x0800d6b0
 800ade4:	7ff00000 	.word	0x7ff00000
 800ade8:	0800d698 	.word	0x0800d698
 800adec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adee:	1c51      	adds	r1, r2, #1
 800adf0:	9119      	str	r1, [sp, #100]	@ 0x64
 800adf2:	7852      	ldrb	r2, [r2, #1]
 800adf4:	2a30      	cmp	r2, #48	@ 0x30
 800adf6:	d0f9      	beq.n	800adec <_strtod_l+0x294>
 800adf8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800adfc:	2908      	cmp	r1, #8
 800adfe:	f63f af78 	bhi.w	800acf2 <_strtod_l+0x19a>
 800ae02:	f04f 080a 	mov.w	r8, #10
 800ae06:	3a30      	subs	r2, #48	@ 0x30
 800ae08:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae10:	1c56      	adds	r6, r2, #1
 800ae12:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae14:	7852      	ldrb	r2, [r2, #1]
 800ae16:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae1a:	f1be 0f09 	cmp.w	lr, #9
 800ae1e:	d939      	bls.n	800ae94 <_strtod_l+0x33c>
 800ae20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae26:	1a76      	subs	r6, r6, r1
 800ae28:	2e08      	cmp	r6, #8
 800ae2a:	dc03      	bgt.n	800ae34 <_strtod_l+0x2dc>
 800ae2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae2e:	4588      	cmp	r8, r1
 800ae30:	bfa8      	it	ge
 800ae32:	4688      	movge	r8, r1
 800ae34:	f1bc 0f00 	cmp.w	ip, #0
 800ae38:	d001      	beq.n	800ae3e <_strtod_l+0x2e6>
 800ae3a:	f1c8 0800 	rsb	r8, r8, #0
 800ae3e:	2d00      	cmp	r5, #0
 800ae40:	d14e      	bne.n	800aee0 <_strtod_l+0x388>
 800ae42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae44:	4308      	orrs	r0, r1
 800ae46:	f47f aec0 	bne.w	800abca <_strtod_l+0x72>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f47f aed6 	bne.w	800abfc <_strtod_l+0xa4>
 800ae50:	2a69      	cmp	r2, #105	@ 0x69
 800ae52:	d028      	beq.n	800aea6 <_strtod_l+0x34e>
 800ae54:	dc25      	bgt.n	800aea2 <_strtod_l+0x34a>
 800ae56:	2a49      	cmp	r2, #73	@ 0x49
 800ae58:	d025      	beq.n	800aea6 <_strtod_l+0x34e>
 800ae5a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae5c:	f47f aece 	bne.w	800abfc <_strtod_l+0xa4>
 800ae60:	499a      	ldr	r1, [pc, #616]	@ (800b0cc <_strtod_l+0x574>)
 800ae62:	a819      	add	r0, sp, #100	@ 0x64
 800ae64:	f001 f9de 	bl	800c224 <__match>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f43f aec7 	beq.w	800abfc <_strtod_l+0xa4>
 800ae6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b28      	cmp	r3, #40	@ 0x28
 800ae74:	d12e      	bne.n	800aed4 <_strtod_l+0x37c>
 800ae76:	4996      	ldr	r1, [pc, #600]	@ (800b0d0 <_strtod_l+0x578>)
 800ae78:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae7a:	a819      	add	r0, sp, #100	@ 0x64
 800ae7c:	f001 f9e6 	bl	800c24c <__hexnan>
 800ae80:	2805      	cmp	r0, #5
 800ae82:	d127      	bne.n	800aed4 <_strtod_l+0x37c>
 800ae84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae86:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ae8a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae8e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae92:	e69a      	b.n	800abca <_strtod_l+0x72>
 800ae94:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae96:	fb08 2101 	mla	r1, r8, r1, r2
 800ae9a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ae9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800aea0:	e7b5      	b.n	800ae0e <_strtod_l+0x2b6>
 800aea2:	2a6e      	cmp	r2, #110	@ 0x6e
 800aea4:	e7da      	b.n	800ae5c <_strtod_l+0x304>
 800aea6:	498b      	ldr	r1, [pc, #556]	@ (800b0d4 <_strtod_l+0x57c>)
 800aea8:	a819      	add	r0, sp, #100	@ 0x64
 800aeaa:	f001 f9bb 	bl	800c224 <__match>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f43f aea4 	beq.w	800abfc <_strtod_l+0xa4>
 800aeb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeb6:	4988      	ldr	r1, [pc, #544]	@ (800b0d8 <_strtod_l+0x580>)
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	a819      	add	r0, sp, #100	@ 0x64
 800aebc:	9319      	str	r3, [sp, #100]	@ 0x64
 800aebe:	f001 f9b1 	bl	800c224 <__match>
 800aec2:	b910      	cbnz	r0, 800aeca <_strtod_l+0x372>
 800aec4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aec6:	3301      	adds	r3, #1
 800aec8:	9319      	str	r3, [sp, #100]	@ 0x64
 800aeca:	f04f 0a00 	mov.w	sl, #0
 800aece:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b0dc <_strtod_l+0x584>
 800aed2:	e67a      	b.n	800abca <_strtod_l+0x72>
 800aed4:	4882      	ldr	r0, [pc, #520]	@ (800b0e0 <_strtod_l+0x588>)
 800aed6:	f000 fee3 	bl	800bca0 <nan>
 800aeda:	4682      	mov	sl, r0
 800aedc:	468b      	mov	fp, r1
 800aede:	e674      	b.n	800abca <_strtod_l+0x72>
 800aee0:	eba8 0309 	sub.w	r3, r8, r9
 800aee4:	2f00      	cmp	r7, #0
 800aee6:	bf08      	it	eq
 800aee8:	462f      	moveq	r7, r5
 800aeea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aeec:	2d10      	cmp	r5, #16
 800aeee:	462c      	mov	r4, r5
 800aef0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef2:	bfa8      	it	ge
 800aef4:	2410      	movge	r4, #16
 800aef6:	f7f5 fa75 	bl	80003e4 <__aeabi_ui2d>
 800aefa:	2d09      	cmp	r5, #9
 800aefc:	4682      	mov	sl, r0
 800aefe:	468b      	mov	fp, r1
 800af00:	dc11      	bgt.n	800af26 <_strtod_l+0x3ce>
 800af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af04:	2b00      	cmp	r3, #0
 800af06:	f43f ae60 	beq.w	800abca <_strtod_l+0x72>
 800af0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af0c:	dd76      	ble.n	800affc <_strtod_l+0x4a4>
 800af0e:	2b16      	cmp	r3, #22
 800af10:	dc5d      	bgt.n	800afce <_strtod_l+0x476>
 800af12:	4974      	ldr	r1, [pc, #464]	@ (800b0e4 <_strtod_l+0x58c>)
 800af14:	4652      	mov	r2, sl
 800af16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af1a:	465b      	mov	r3, fp
 800af1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af20:	f7f5 fada 	bl	80004d8 <__aeabi_dmul>
 800af24:	e7d9      	b.n	800aeda <_strtod_l+0x382>
 800af26:	4b6f      	ldr	r3, [pc, #444]	@ (800b0e4 <_strtod_l+0x58c>)
 800af28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af30:	f7f5 fad2 	bl	80004d8 <__aeabi_dmul>
 800af34:	4682      	mov	sl, r0
 800af36:	9808      	ldr	r0, [sp, #32]
 800af38:	468b      	mov	fp, r1
 800af3a:	f7f5 fa53 	bl	80003e4 <__aeabi_ui2d>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	4650      	mov	r0, sl
 800af44:	4659      	mov	r1, fp
 800af46:	f7f5 f911 	bl	800016c <__adddf3>
 800af4a:	2d0f      	cmp	r5, #15
 800af4c:	4682      	mov	sl, r0
 800af4e:	468b      	mov	fp, r1
 800af50:	ddd7      	ble.n	800af02 <_strtod_l+0x3aa>
 800af52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af54:	1b2c      	subs	r4, r5, r4
 800af56:	441c      	add	r4, r3
 800af58:	2c00      	cmp	r4, #0
 800af5a:	f340 8096 	ble.w	800b08a <_strtod_l+0x532>
 800af5e:	f014 030f 	ands.w	r3, r4, #15
 800af62:	d00a      	beq.n	800af7a <_strtod_l+0x422>
 800af64:	495f      	ldr	r1, [pc, #380]	@ (800b0e4 <_strtod_l+0x58c>)
 800af66:	4652      	mov	r2, sl
 800af68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af70:	465b      	mov	r3, fp
 800af72:	f7f5 fab1 	bl	80004d8 <__aeabi_dmul>
 800af76:	4682      	mov	sl, r0
 800af78:	468b      	mov	fp, r1
 800af7a:	f034 040f 	bics.w	r4, r4, #15
 800af7e:	d073      	beq.n	800b068 <_strtod_l+0x510>
 800af80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800af84:	dd48      	ble.n	800b018 <_strtod_l+0x4c0>
 800af86:	2400      	movs	r4, #0
 800af88:	46a0      	mov	r8, r4
 800af8a:	46a1      	mov	r9, r4
 800af8c:	940a      	str	r4, [sp, #40]	@ 0x28
 800af8e:	2322      	movs	r3, #34	@ 0x22
 800af90:	f04f 0a00 	mov.w	sl, #0
 800af94:	9a05      	ldr	r2, [sp, #20]
 800af96:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800b0dc <_strtod_l+0x584>
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f43f ae13 	beq.w	800abca <_strtod_l+0x72>
 800afa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afa6:	9805      	ldr	r0, [sp, #20]
 800afa8:	f7ff f94c 	bl	800a244 <_Bfree>
 800afac:	4649      	mov	r1, r9
 800afae:	9805      	ldr	r0, [sp, #20]
 800afb0:	f7ff f948 	bl	800a244 <_Bfree>
 800afb4:	4641      	mov	r1, r8
 800afb6:	9805      	ldr	r0, [sp, #20]
 800afb8:	f7ff f944 	bl	800a244 <_Bfree>
 800afbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800afbe:	9805      	ldr	r0, [sp, #20]
 800afc0:	f7ff f940 	bl	800a244 <_Bfree>
 800afc4:	4621      	mov	r1, r4
 800afc6:	9805      	ldr	r0, [sp, #20]
 800afc8:	f7ff f93c 	bl	800a244 <_Bfree>
 800afcc:	e5fd      	b.n	800abca <_strtod_l+0x72>
 800afce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800afd4:	4293      	cmp	r3, r2
 800afd6:	dbbc      	blt.n	800af52 <_strtod_l+0x3fa>
 800afd8:	4c42      	ldr	r4, [pc, #264]	@ (800b0e4 <_strtod_l+0x58c>)
 800afda:	f1c5 050f 	rsb	r5, r5, #15
 800afde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800afe2:	4652      	mov	r2, sl
 800afe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afe8:	465b      	mov	r3, fp
 800afea:	f7f5 fa75 	bl	80004d8 <__aeabi_dmul>
 800afee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff0:	1b5d      	subs	r5, r3, r5
 800aff2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aff6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800affa:	e791      	b.n	800af20 <_strtod_l+0x3c8>
 800affc:	3316      	adds	r3, #22
 800affe:	dba8      	blt.n	800af52 <_strtod_l+0x3fa>
 800b000:	4b38      	ldr	r3, [pc, #224]	@ (800b0e4 <_strtod_l+0x58c>)
 800b002:	eba9 0808 	sub.w	r8, r9, r8
 800b006:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b00a:	4650      	mov	r0, sl
 800b00c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b010:	4659      	mov	r1, fp
 800b012:	f7f5 fb8b 	bl	800072c <__aeabi_ddiv>
 800b016:	e760      	b.n	800aeda <_strtod_l+0x382>
 800b018:	4b33      	ldr	r3, [pc, #204]	@ (800b0e8 <_strtod_l+0x590>)
 800b01a:	4650      	mov	r0, sl
 800b01c:	9308      	str	r3, [sp, #32]
 800b01e:	2300      	movs	r3, #0
 800b020:	4659      	mov	r1, fp
 800b022:	461e      	mov	r6, r3
 800b024:	1124      	asrs	r4, r4, #4
 800b026:	2c01      	cmp	r4, #1
 800b028:	dc21      	bgt.n	800b06e <_strtod_l+0x516>
 800b02a:	b10b      	cbz	r3, 800b030 <_strtod_l+0x4d8>
 800b02c:	4682      	mov	sl, r0
 800b02e:	468b      	mov	fp, r1
 800b030:	492d      	ldr	r1, [pc, #180]	@ (800b0e8 <_strtod_l+0x590>)
 800b032:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b036:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b03a:	4652      	mov	r2, sl
 800b03c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b040:	465b      	mov	r3, fp
 800b042:	f7f5 fa49 	bl	80004d8 <__aeabi_dmul>
 800b046:	4b25      	ldr	r3, [pc, #148]	@ (800b0dc <_strtod_l+0x584>)
 800b048:	460a      	mov	r2, r1
 800b04a:	400b      	ands	r3, r1
 800b04c:	4927      	ldr	r1, [pc, #156]	@ (800b0ec <_strtod_l+0x594>)
 800b04e:	4682      	mov	sl, r0
 800b050:	428b      	cmp	r3, r1
 800b052:	d898      	bhi.n	800af86 <_strtod_l+0x42e>
 800b054:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b058:	428b      	cmp	r3, r1
 800b05a:	bf86      	itte	hi
 800b05c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b060:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b0f0 <_strtod_l+0x598>
 800b064:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b068:	2300      	movs	r3, #0
 800b06a:	9308      	str	r3, [sp, #32]
 800b06c:	e07a      	b.n	800b164 <_strtod_l+0x60c>
 800b06e:	07e2      	lsls	r2, r4, #31
 800b070:	d505      	bpl.n	800b07e <_strtod_l+0x526>
 800b072:	9b08      	ldr	r3, [sp, #32]
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f7f5 fa2e 	bl	80004d8 <__aeabi_dmul>
 800b07c:	2301      	movs	r3, #1
 800b07e:	9a08      	ldr	r2, [sp, #32]
 800b080:	3601      	adds	r6, #1
 800b082:	3208      	adds	r2, #8
 800b084:	1064      	asrs	r4, r4, #1
 800b086:	9208      	str	r2, [sp, #32]
 800b088:	e7cd      	b.n	800b026 <_strtod_l+0x4ce>
 800b08a:	d0ed      	beq.n	800b068 <_strtod_l+0x510>
 800b08c:	4264      	negs	r4, r4
 800b08e:	f014 020f 	ands.w	r2, r4, #15
 800b092:	d00a      	beq.n	800b0aa <_strtod_l+0x552>
 800b094:	4b13      	ldr	r3, [pc, #76]	@ (800b0e4 <_strtod_l+0x58c>)
 800b096:	4650      	mov	r0, sl
 800b098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b09c:	4659      	mov	r1, fp
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	f7f5 fb43 	bl	800072c <__aeabi_ddiv>
 800b0a6:	4682      	mov	sl, r0
 800b0a8:	468b      	mov	fp, r1
 800b0aa:	1124      	asrs	r4, r4, #4
 800b0ac:	d0dc      	beq.n	800b068 <_strtod_l+0x510>
 800b0ae:	2c1f      	cmp	r4, #31
 800b0b0:	dd20      	ble.n	800b0f4 <_strtod_l+0x59c>
 800b0b2:	2400      	movs	r4, #0
 800b0b4:	46a0      	mov	r8, r4
 800b0b6:	46a1      	mov	r9, r4
 800b0b8:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0ba:	2322      	movs	r3, #34	@ 0x22
 800b0bc:	9a05      	ldr	r2, [sp, #20]
 800b0be:	f04f 0a00 	mov.w	sl, #0
 800b0c2:	f04f 0b00 	mov.w	fp, #0
 800b0c6:	6013      	str	r3, [r2, #0]
 800b0c8:	e768      	b.n	800af9c <_strtod_l+0x444>
 800b0ca:	bf00      	nop
 800b0cc:	0800d485 	.word	0x0800d485
 800b0d0:	0800d69c 	.word	0x0800d69c
 800b0d4:	0800d47d 	.word	0x0800d47d
 800b0d8:	0800d4b4 	.word	0x0800d4b4
 800b0dc:	7ff00000 	.word	0x7ff00000
 800b0e0:	0800d845 	.word	0x0800d845
 800b0e4:	0800d5d0 	.word	0x0800d5d0
 800b0e8:	0800d5a8 	.word	0x0800d5a8
 800b0ec:	7ca00000 	.word	0x7ca00000
 800b0f0:	7fefffff 	.word	0x7fefffff
 800b0f4:	f014 0310 	ands.w	r3, r4, #16
 800b0f8:	bf18      	it	ne
 800b0fa:	236a      	movne	r3, #106	@ 0x6a
 800b0fc:	4650      	mov	r0, sl
 800b0fe:	9308      	str	r3, [sp, #32]
 800b100:	4659      	mov	r1, fp
 800b102:	2300      	movs	r3, #0
 800b104:	4ea9      	ldr	r6, [pc, #676]	@ (800b3ac <_strtod_l+0x854>)
 800b106:	07e2      	lsls	r2, r4, #31
 800b108:	d504      	bpl.n	800b114 <_strtod_l+0x5bc>
 800b10a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b10e:	f7f5 f9e3 	bl	80004d8 <__aeabi_dmul>
 800b112:	2301      	movs	r3, #1
 800b114:	1064      	asrs	r4, r4, #1
 800b116:	f106 0608 	add.w	r6, r6, #8
 800b11a:	d1f4      	bne.n	800b106 <_strtod_l+0x5ae>
 800b11c:	b10b      	cbz	r3, 800b122 <_strtod_l+0x5ca>
 800b11e:	4682      	mov	sl, r0
 800b120:	468b      	mov	fp, r1
 800b122:	9b08      	ldr	r3, [sp, #32]
 800b124:	b1b3      	cbz	r3, 800b154 <_strtod_l+0x5fc>
 800b126:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b12a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b12e:	2b00      	cmp	r3, #0
 800b130:	4659      	mov	r1, fp
 800b132:	dd0f      	ble.n	800b154 <_strtod_l+0x5fc>
 800b134:	2b1f      	cmp	r3, #31
 800b136:	dd57      	ble.n	800b1e8 <_strtod_l+0x690>
 800b138:	2b34      	cmp	r3, #52	@ 0x34
 800b13a:	bfd8      	it	le
 800b13c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b140:	f04f 0a00 	mov.w	sl, #0
 800b144:	bfcf      	iteee	gt
 800b146:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b14a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b14e:	4093      	lslle	r3, r2
 800b150:	ea03 0b01 	andle.w	fp, r3, r1
 800b154:	2200      	movs	r2, #0
 800b156:	2300      	movs	r3, #0
 800b158:	4650      	mov	r0, sl
 800b15a:	4659      	mov	r1, fp
 800b15c:	f7f5 fc24 	bl	80009a8 <__aeabi_dcmpeq>
 800b160:	2800      	cmp	r0, #0
 800b162:	d1a6      	bne.n	800b0b2 <_strtod_l+0x55a>
 800b164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b166:	463a      	mov	r2, r7
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b16c:	462b      	mov	r3, r5
 800b16e:	9805      	ldr	r0, [sp, #20]
 800b170:	f7ff f8d0 	bl	800a314 <__s2b>
 800b174:	900a      	str	r0, [sp, #40]	@ 0x28
 800b176:	2800      	cmp	r0, #0
 800b178:	f43f af05 	beq.w	800af86 <_strtod_l+0x42e>
 800b17c:	2400      	movs	r4, #0
 800b17e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b180:	eba9 0308 	sub.w	r3, r9, r8
 800b184:	2a00      	cmp	r2, #0
 800b186:	bfa8      	it	ge
 800b188:	2300      	movge	r3, #0
 800b18a:	46a0      	mov	r8, r4
 800b18c:	9312      	str	r3, [sp, #72]	@ 0x48
 800b18e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b192:	9316      	str	r3, [sp, #88]	@ 0x58
 800b194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b196:	9805      	ldr	r0, [sp, #20]
 800b198:	6859      	ldr	r1, [r3, #4]
 800b19a:	f7ff f813 	bl	800a1c4 <_Balloc>
 800b19e:	4681      	mov	r9, r0
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	f43f aef4 	beq.w	800af8e <_strtod_l+0x436>
 800b1a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1a8:	300c      	adds	r0, #12
 800b1aa:	691a      	ldr	r2, [r3, #16]
 800b1ac:	f103 010c 	add.w	r1, r3, #12
 800b1b0:	3202      	adds	r2, #2
 800b1b2:	0092      	lsls	r2, r2, #2
 800b1b4:	f000 fd66 	bl	800bc84 <memcpy>
 800b1b8:	ab1c      	add	r3, sp, #112	@ 0x70
 800b1ba:	9301      	str	r3, [sp, #4]
 800b1bc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	4652      	mov	r2, sl
 800b1c2:	465b      	mov	r3, fp
 800b1c4:	9805      	ldr	r0, [sp, #20]
 800b1c6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b1ca:	f7ff fbd5 	bl	800a978 <__d2b>
 800b1ce:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	f43f aedc 	beq.w	800af8e <_strtod_l+0x436>
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	9805      	ldr	r0, [sp, #20]
 800b1da:	f7ff f931 	bl	800a440 <__i2b>
 800b1de:	4680      	mov	r8, r0
 800b1e0:	b948      	cbnz	r0, 800b1f6 <_strtod_l+0x69e>
 800b1e2:	f04f 0800 	mov.w	r8, #0
 800b1e6:	e6d2      	b.n	800af8e <_strtod_l+0x436>
 800b1e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f0:	ea03 0a0a 	and.w	sl, r3, sl
 800b1f4:	e7ae      	b.n	800b154 <_strtod_l+0x5fc>
 800b1f6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b1f8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	bfab      	itete	ge
 800b1fe:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b200:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b202:	18ef      	addge	r7, r5, r3
 800b204:	1b5e      	sublt	r6, r3, r5
 800b206:	9b08      	ldr	r3, [sp, #32]
 800b208:	bfa8      	it	ge
 800b20a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b20c:	eba5 0503 	sub.w	r5, r5, r3
 800b210:	4415      	add	r5, r2
 800b212:	4b67      	ldr	r3, [pc, #412]	@ (800b3b0 <_strtod_l+0x858>)
 800b214:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800b218:	bfb8      	it	lt
 800b21a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b21c:	429d      	cmp	r5, r3
 800b21e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b222:	da50      	bge.n	800b2c6 <_strtod_l+0x76e>
 800b224:	1b5b      	subs	r3, r3, r5
 800b226:	2b1f      	cmp	r3, #31
 800b228:	f04f 0101 	mov.w	r1, #1
 800b22c:	eba2 0203 	sub.w	r2, r2, r3
 800b230:	dc3d      	bgt.n	800b2ae <_strtod_l+0x756>
 800b232:	fa01 f303 	lsl.w	r3, r1, r3
 800b236:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b238:	2300      	movs	r3, #0
 800b23a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b23c:	18bd      	adds	r5, r7, r2
 800b23e:	9b08      	ldr	r3, [sp, #32]
 800b240:	42af      	cmp	r7, r5
 800b242:	4416      	add	r6, r2
 800b244:	441e      	add	r6, r3
 800b246:	463b      	mov	r3, r7
 800b248:	bfa8      	it	ge
 800b24a:	462b      	movge	r3, r5
 800b24c:	42b3      	cmp	r3, r6
 800b24e:	bfa8      	it	ge
 800b250:	4633      	movge	r3, r6
 800b252:	2b00      	cmp	r3, #0
 800b254:	bfc2      	ittt	gt
 800b256:	1aed      	subgt	r5, r5, r3
 800b258:	1af6      	subgt	r6, r6, r3
 800b25a:	1aff      	subgt	r7, r7, r3
 800b25c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b25e:	2b00      	cmp	r3, #0
 800b260:	dd16      	ble.n	800b290 <_strtod_l+0x738>
 800b262:	4641      	mov	r1, r8
 800b264:	461a      	mov	r2, r3
 800b266:	9805      	ldr	r0, [sp, #20]
 800b268:	f7ff f9a8 	bl	800a5bc <__pow5mult>
 800b26c:	4680      	mov	r8, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	d0b7      	beq.n	800b1e2 <_strtod_l+0x68a>
 800b272:	4601      	mov	r1, r0
 800b274:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b276:	9805      	ldr	r0, [sp, #20]
 800b278:	f7ff f8f8 	bl	800a46c <__multiply>
 800b27c:	900e      	str	r0, [sp, #56]	@ 0x38
 800b27e:	2800      	cmp	r0, #0
 800b280:	f43f ae85 	beq.w	800af8e <_strtod_l+0x436>
 800b284:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b286:	9805      	ldr	r0, [sp, #20]
 800b288:	f7fe ffdc 	bl	800a244 <_Bfree>
 800b28c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b28e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b290:	2d00      	cmp	r5, #0
 800b292:	dc1d      	bgt.n	800b2d0 <_strtod_l+0x778>
 800b294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b296:	2b00      	cmp	r3, #0
 800b298:	dd23      	ble.n	800b2e2 <_strtod_l+0x78a>
 800b29a:	4649      	mov	r1, r9
 800b29c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b29e:	9805      	ldr	r0, [sp, #20]
 800b2a0:	f7ff f98c 	bl	800a5bc <__pow5mult>
 800b2a4:	4681      	mov	r9, r0
 800b2a6:	b9e0      	cbnz	r0, 800b2e2 <_strtod_l+0x78a>
 800b2a8:	f04f 0900 	mov.w	r9, #0
 800b2ac:	e66f      	b.n	800af8e <_strtod_l+0x436>
 800b2ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2ba:	35e2      	adds	r5, #226	@ 0xe2
 800b2bc:	fa01 f305 	lsl.w	r3, r1, r5
 800b2c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b2c4:	e7ba      	b.n	800b23c <_strtod_l+0x6e4>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2ce:	e7b5      	b.n	800b23c <_strtod_l+0x6e4>
 800b2d0:	462a      	mov	r2, r5
 800b2d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	f7ff f9cb 	bl	800a670 <__lshift>
 800b2da:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d1d9      	bne.n	800b294 <_strtod_l+0x73c>
 800b2e0:	e655      	b.n	800af8e <_strtod_l+0x436>
 800b2e2:	2e00      	cmp	r6, #0
 800b2e4:	dd07      	ble.n	800b2f6 <_strtod_l+0x79e>
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	4632      	mov	r2, r6
 800b2ea:	9805      	ldr	r0, [sp, #20]
 800b2ec:	f7ff f9c0 	bl	800a670 <__lshift>
 800b2f0:	4681      	mov	r9, r0
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d0d8      	beq.n	800b2a8 <_strtod_l+0x750>
 800b2f6:	2f00      	cmp	r7, #0
 800b2f8:	dd08      	ble.n	800b30c <_strtod_l+0x7b4>
 800b2fa:	4641      	mov	r1, r8
 800b2fc:	463a      	mov	r2, r7
 800b2fe:	9805      	ldr	r0, [sp, #20]
 800b300:	f7ff f9b6 	bl	800a670 <__lshift>
 800b304:	4680      	mov	r8, r0
 800b306:	2800      	cmp	r0, #0
 800b308:	f43f ae41 	beq.w	800af8e <_strtod_l+0x436>
 800b30c:	464a      	mov	r2, r9
 800b30e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b310:	9805      	ldr	r0, [sp, #20]
 800b312:	f7ff fa35 	bl	800a780 <__mdiff>
 800b316:	4604      	mov	r4, r0
 800b318:	2800      	cmp	r0, #0
 800b31a:	f43f ae38 	beq.w	800af8e <_strtod_l+0x436>
 800b31e:	68c3      	ldr	r3, [r0, #12]
 800b320:	4641      	mov	r1, r8
 800b322:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b324:	2300      	movs	r3, #0
 800b326:	60c3      	str	r3, [r0, #12]
 800b328:	f7ff fa0e 	bl	800a748 <__mcmp>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	da45      	bge.n	800b3bc <_strtod_l+0x864>
 800b330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b332:	ea53 030a 	orrs.w	r3, r3, sl
 800b336:	d16b      	bne.n	800b410 <_strtod_l+0x8b8>
 800b338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d167      	bne.n	800b410 <_strtod_l+0x8b8>
 800b340:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b344:	0d1b      	lsrs	r3, r3, #20
 800b346:	051b      	lsls	r3, r3, #20
 800b348:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b34c:	d960      	bls.n	800b410 <_strtod_l+0x8b8>
 800b34e:	6963      	ldr	r3, [r4, #20]
 800b350:	b913      	cbnz	r3, 800b358 <_strtod_l+0x800>
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	2b01      	cmp	r3, #1
 800b356:	dd5b      	ble.n	800b410 <_strtod_l+0x8b8>
 800b358:	4621      	mov	r1, r4
 800b35a:	2201      	movs	r2, #1
 800b35c:	9805      	ldr	r0, [sp, #20]
 800b35e:	f7ff f987 	bl	800a670 <__lshift>
 800b362:	4641      	mov	r1, r8
 800b364:	4604      	mov	r4, r0
 800b366:	f7ff f9ef 	bl	800a748 <__mcmp>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	dd50      	ble.n	800b410 <_strtod_l+0x8b8>
 800b36e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b372:	9a08      	ldr	r2, [sp, #32]
 800b374:	0d1b      	lsrs	r3, r3, #20
 800b376:	051b      	lsls	r3, r3, #20
 800b378:	2a00      	cmp	r2, #0
 800b37a:	d06a      	beq.n	800b452 <_strtod_l+0x8fa>
 800b37c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b380:	d867      	bhi.n	800b452 <_strtod_l+0x8fa>
 800b382:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b386:	f67f ae98 	bls.w	800b0ba <_strtod_l+0x562>
 800b38a:	4650      	mov	r0, sl
 800b38c:	4659      	mov	r1, fp
 800b38e:	4b09      	ldr	r3, [pc, #36]	@ (800b3b4 <_strtod_l+0x85c>)
 800b390:	2200      	movs	r2, #0
 800b392:	f7f5 f8a1 	bl	80004d8 <__aeabi_dmul>
 800b396:	4b08      	ldr	r3, [pc, #32]	@ (800b3b8 <_strtod_l+0x860>)
 800b398:	4682      	mov	sl, r0
 800b39a:	400b      	ands	r3, r1
 800b39c:	468b      	mov	fp, r1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f47f ae00 	bne.w	800afa4 <_strtod_l+0x44c>
 800b3a4:	2322      	movs	r3, #34	@ 0x22
 800b3a6:	9a05      	ldr	r2, [sp, #20]
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	e5fb      	b.n	800afa4 <_strtod_l+0x44c>
 800b3ac:	0800d6c8 	.word	0x0800d6c8
 800b3b0:	fffffc02 	.word	0xfffffc02
 800b3b4:	39500000 	.word	0x39500000
 800b3b8:	7ff00000 	.word	0x7ff00000
 800b3bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b3c0:	d165      	bne.n	800b48e <_strtod_l+0x936>
 800b3c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3c8:	b35a      	cbz	r2, 800b422 <_strtod_l+0x8ca>
 800b3ca:	4a99      	ldr	r2, [pc, #612]	@ (800b630 <_strtod_l+0xad8>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d12b      	bne.n	800b428 <_strtod_l+0x8d0>
 800b3d0:	9b08      	ldr	r3, [sp, #32]
 800b3d2:	4651      	mov	r1, sl
 800b3d4:	b303      	cbz	r3, 800b418 <_strtod_l+0x8c0>
 800b3d6:	465a      	mov	r2, fp
 800b3d8:	4b96      	ldr	r3, [pc, #600]	@ (800b634 <_strtod_l+0xadc>)
 800b3da:	4013      	ands	r3, r2
 800b3dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3e4:	d81b      	bhi.n	800b41e <_strtod_l+0x8c6>
 800b3e6:	0d1b      	lsrs	r3, r3, #20
 800b3e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f0:	4299      	cmp	r1, r3
 800b3f2:	d119      	bne.n	800b428 <_strtod_l+0x8d0>
 800b3f4:	4b90      	ldr	r3, [pc, #576]	@ (800b638 <_strtod_l+0xae0>)
 800b3f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d102      	bne.n	800b402 <_strtod_l+0x8aa>
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	f43f adc6 	beq.w	800af8e <_strtod_l+0x436>
 800b402:	f04f 0a00 	mov.w	sl, #0
 800b406:	4b8b      	ldr	r3, [pc, #556]	@ (800b634 <_strtod_l+0xadc>)
 800b408:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b40a:	401a      	ands	r2, r3
 800b40c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b410:	9b08      	ldr	r3, [sp, #32]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1b9      	bne.n	800b38a <_strtod_l+0x832>
 800b416:	e5c5      	b.n	800afa4 <_strtod_l+0x44c>
 800b418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b41c:	e7e8      	b.n	800b3f0 <_strtod_l+0x898>
 800b41e:	4613      	mov	r3, r2
 800b420:	e7e6      	b.n	800b3f0 <_strtod_l+0x898>
 800b422:	ea53 030a 	orrs.w	r3, r3, sl
 800b426:	d0a2      	beq.n	800b36e <_strtod_l+0x816>
 800b428:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b42a:	b1db      	cbz	r3, 800b464 <_strtod_l+0x90c>
 800b42c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b42e:	4213      	tst	r3, r2
 800b430:	d0ee      	beq.n	800b410 <_strtod_l+0x8b8>
 800b432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b434:	4650      	mov	r0, sl
 800b436:	4659      	mov	r1, fp
 800b438:	9a08      	ldr	r2, [sp, #32]
 800b43a:	b1bb      	cbz	r3, 800b46c <_strtod_l+0x914>
 800b43c:	f7ff fb68 	bl	800ab10 <sulp>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b448:	f7f4 fe90 	bl	800016c <__adddf3>
 800b44c:	4682      	mov	sl, r0
 800b44e:	468b      	mov	fp, r1
 800b450:	e7de      	b.n	800b410 <_strtod_l+0x8b8>
 800b452:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b456:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b45a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b45e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b462:	e7d5      	b.n	800b410 <_strtod_l+0x8b8>
 800b464:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b466:	ea13 0f0a 	tst.w	r3, sl
 800b46a:	e7e1      	b.n	800b430 <_strtod_l+0x8d8>
 800b46c:	f7ff fb50 	bl	800ab10 <sulp>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b478:	f7f4 fe76 	bl	8000168 <__aeabi_dsub>
 800b47c:	2200      	movs	r2, #0
 800b47e:	2300      	movs	r3, #0
 800b480:	4682      	mov	sl, r0
 800b482:	468b      	mov	fp, r1
 800b484:	f7f5 fa90 	bl	80009a8 <__aeabi_dcmpeq>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d0c1      	beq.n	800b410 <_strtod_l+0x8b8>
 800b48c:	e615      	b.n	800b0ba <_strtod_l+0x562>
 800b48e:	4641      	mov	r1, r8
 800b490:	4620      	mov	r0, r4
 800b492:	f7ff fac9 	bl	800aa28 <__ratio>
 800b496:	2200      	movs	r2, #0
 800b498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b49c:	4606      	mov	r6, r0
 800b49e:	460f      	mov	r7, r1
 800b4a0:	f7f5 fa96 	bl	80009d0 <__aeabi_dcmple>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d06d      	beq.n	800b584 <_strtod_l+0xa2c>
 800b4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d178      	bne.n	800b5a0 <_strtod_l+0xa48>
 800b4ae:	f1ba 0f00 	cmp.w	sl, #0
 800b4b2:	d156      	bne.n	800b562 <_strtod_l+0xa0a>
 800b4b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d158      	bne.n	800b570 <_strtod_l+0xa18>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	4b5d      	ldr	r3, [pc, #372]	@ (800b63c <_strtod_l+0xae4>)
 800b4c6:	f7f5 fa79 	bl	80009bc <__aeabi_dcmplt>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d157      	bne.n	800b57e <_strtod_l+0xa26>
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	4639      	mov	r1, r7
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4b5a      	ldr	r3, [pc, #360]	@ (800b640 <_strtod_l+0xae8>)
 800b4d6:	f7f4 ffff 	bl	80004d8 <__aeabi_dmul>
 800b4da:	4606      	mov	r6, r0
 800b4dc:	460f      	mov	r7, r1
 800b4de:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b4e2:	9606      	str	r6, [sp, #24]
 800b4e4:	9307      	str	r3, [sp, #28]
 800b4e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4ea:	4d52      	ldr	r5, [pc, #328]	@ (800b634 <_strtod_l+0xadc>)
 800b4ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4f2:	401d      	ands	r5, r3
 800b4f4:	4b53      	ldr	r3, [pc, #332]	@ (800b644 <_strtod_l+0xaec>)
 800b4f6:	429d      	cmp	r5, r3
 800b4f8:	f040 80aa 	bne.w	800b650 <_strtod_l+0xaf8>
 800b4fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4fe:	4650      	mov	r0, sl
 800b500:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b504:	4659      	mov	r1, fp
 800b506:	f7ff f9cf 	bl	800a8a8 <__ulp>
 800b50a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b50e:	f7f4 ffe3 	bl	80004d8 <__aeabi_dmul>
 800b512:	4652      	mov	r2, sl
 800b514:	465b      	mov	r3, fp
 800b516:	f7f4 fe29 	bl	800016c <__adddf3>
 800b51a:	460b      	mov	r3, r1
 800b51c:	4945      	ldr	r1, [pc, #276]	@ (800b634 <_strtod_l+0xadc>)
 800b51e:	4a4a      	ldr	r2, [pc, #296]	@ (800b648 <_strtod_l+0xaf0>)
 800b520:	4019      	ands	r1, r3
 800b522:	4291      	cmp	r1, r2
 800b524:	4682      	mov	sl, r0
 800b526:	d942      	bls.n	800b5ae <_strtod_l+0xa56>
 800b528:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b52a:	4b43      	ldr	r3, [pc, #268]	@ (800b638 <_strtod_l+0xae0>)
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d103      	bne.n	800b538 <_strtod_l+0x9e0>
 800b530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b532:	3301      	adds	r3, #1
 800b534:	f43f ad2b 	beq.w	800af8e <_strtod_l+0x436>
 800b538:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b53c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b638 <_strtod_l+0xae0>
 800b540:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b542:	9805      	ldr	r0, [sp, #20]
 800b544:	f7fe fe7e 	bl	800a244 <_Bfree>
 800b548:	4649      	mov	r1, r9
 800b54a:	9805      	ldr	r0, [sp, #20]
 800b54c:	f7fe fe7a 	bl	800a244 <_Bfree>
 800b550:	4641      	mov	r1, r8
 800b552:	9805      	ldr	r0, [sp, #20]
 800b554:	f7fe fe76 	bl	800a244 <_Bfree>
 800b558:	4621      	mov	r1, r4
 800b55a:	9805      	ldr	r0, [sp, #20]
 800b55c:	f7fe fe72 	bl	800a244 <_Bfree>
 800b560:	e618      	b.n	800b194 <_strtod_l+0x63c>
 800b562:	f1ba 0f01 	cmp.w	sl, #1
 800b566:	d103      	bne.n	800b570 <_strtod_l+0xa18>
 800b568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f43f ada5 	beq.w	800b0ba <_strtod_l+0x562>
 800b570:	2200      	movs	r2, #0
 800b572:	4b36      	ldr	r3, [pc, #216]	@ (800b64c <_strtod_l+0xaf4>)
 800b574:	2600      	movs	r6, #0
 800b576:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b57a:	4f30      	ldr	r7, [pc, #192]	@ (800b63c <_strtod_l+0xae4>)
 800b57c:	e7b3      	b.n	800b4e6 <_strtod_l+0x98e>
 800b57e:	2600      	movs	r6, #0
 800b580:	4f2f      	ldr	r7, [pc, #188]	@ (800b640 <_strtod_l+0xae8>)
 800b582:	e7ac      	b.n	800b4de <_strtod_l+0x986>
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	4b2d      	ldr	r3, [pc, #180]	@ (800b640 <_strtod_l+0xae8>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	f7f4 ffa4 	bl	80004d8 <__aeabi_dmul>
 800b590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0a1      	beq.n	800b4de <_strtod_l+0x986>
 800b59a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b59e:	e7a2      	b.n	800b4e6 <_strtod_l+0x98e>
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	4b26      	ldr	r3, [pc, #152]	@ (800b63c <_strtod_l+0xae4>)
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	461f      	mov	r7, r3
 800b5a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5ac:	e79b      	b.n	800b4e6 <_strtod_l+0x98e>
 800b5ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5b2:	9b08      	ldr	r3, [sp, #32]
 800b5b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1c1      	bne.n	800b540 <_strtod_l+0x9e8>
 800b5bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5c0:	0d1b      	lsrs	r3, r3, #20
 800b5c2:	051b      	lsls	r3, r3, #20
 800b5c4:	429d      	cmp	r5, r3
 800b5c6:	d1bb      	bne.n	800b540 <_strtod_l+0x9e8>
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f7f5 facc 	bl	8000b68 <__aeabi_d2lz>
 800b5d0:	f7f4 ff54 	bl	800047c <__aeabi_l2d>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4630      	mov	r0, r6
 800b5da:	4639      	mov	r1, r7
 800b5dc:	f7f4 fdc4 	bl	8000168 <__aeabi_dsub>
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b5e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ee:	ea46 060a 	orr.w	r6, r6, sl
 800b5f2:	431e      	orrs	r6, r3
 800b5f4:	d069      	beq.n	800b6ca <_strtod_l+0xb72>
 800b5f6:	a30a      	add	r3, pc, #40	@ (adr r3, 800b620 <_strtod_l+0xac8>)
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f7f5 f9de 	bl	80009bc <__aeabi_dcmplt>
 800b600:	2800      	cmp	r0, #0
 800b602:	f47f accf 	bne.w	800afa4 <_strtod_l+0x44c>
 800b606:	a308      	add	r3, pc, #32	@ (adr r3, 800b628 <_strtod_l+0xad0>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b610:	f7f5 f9f2 	bl	80009f8 <__aeabi_dcmpgt>
 800b614:	2800      	cmp	r0, #0
 800b616:	d093      	beq.n	800b540 <_strtod_l+0x9e8>
 800b618:	e4c4      	b.n	800afa4 <_strtod_l+0x44c>
 800b61a:	bf00      	nop
 800b61c:	f3af 8000 	nop.w
 800b620:	94a03595 	.word	0x94a03595
 800b624:	3fdfffff 	.word	0x3fdfffff
 800b628:	35afe535 	.word	0x35afe535
 800b62c:	3fe00000 	.word	0x3fe00000
 800b630:	000fffff 	.word	0x000fffff
 800b634:	7ff00000 	.word	0x7ff00000
 800b638:	7fefffff 	.word	0x7fefffff
 800b63c:	3ff00000 	.word	0x3ff00000
 800b640:	3fe00000 	.word	0x3fe00000
 800b644:	7fe00000 	.word	0x7fe00000
 800b648:	7c9fffff 	.word	0x7c9fffff
 800b64c:	bff00000 	.word	0xbff00000
 800b650:	9b08      	ldr	r3, [sp, #32]
 800b652:	b323      	cbz	r3, 800b69e <_strtod_l+0xb46>
 800b654:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b658:	d821      	bhi.n	800b69e <_strtod_l+0xb46>
 800b65a:	a327      	add	r3, pc, #156	@ (adr r3, 800b6f8 <_strtod_l+0xba0>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f5 f9b4 	bl	80009d0 <__aeabi_dcmple>
 800b668:	b1a0      	cbz	r0, 800b694 <_strtod_l+0xb3c>
 800b66a:	4639      	mov	r1, r7
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7f5 fa0b 	bl	8000a88 <__aeabi_d2uiz>
 800b672:	2801      	cmp	r0, #1
 800b674:	bf38      	it	cc
 800b676:	2001      	movcc	r0, #1
 800b678:	f7f4 feb4 	bl	80003e4 <__aeabi_ui2d>
 800b67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b67e:	4606      	mov	r6, r0
 800b680:	460f      	mov	r7, r1
 800b682:	b9fb      	cbnz	r3, 800b6c4 <_strtod_l+0xb6c>
 800b684:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b688:	9014      	str	r0, [sp, #80]	@ 0x50
 800b68a:	9315      	str	r3, [sp, #84]	@ 0x54
 800b68c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b690:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b694:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b696:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b69a:	1b5b      	subs	r3, r3, r5
 800b69c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b69e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6a2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6a6:	f7ff f8ff 	bl	800a8a8 <__ulp>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4650      	mov	r0, sl
 800b6b0:	4659      	mov	r1, fp
 800b6b2:	f7f4 ff11 	bl	80004d8 <__aeabi_dmul>
 800b6b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6ba:	f7f4 fd57 	bl	800016c <__adddf3>
 800b6be:	4682      	mov	sl, r0
 800b6c0:	468b      	mov	fp, r1
 800b6c2:	e776      	b.n	800b5b2 <_strtod_l+0xa5a>
 800b6c4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6c8:	e7e0      	b.n	800b68c <_strtod_l+0xb34>
 800b6ca:	a30d      	add	r3, pc, #52	@ (adr r3, 800b700 <_strtod_l+0xba8>)
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f7f5 f974 	bl	80009bc <__aeabi_dcmplt>
 800b6d4:	e79e      	b.n	800b614 <_strtod_l+0xabc>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6dc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	f7ff ba77 	b.w	800abd2 <_strtod_l+0x7a>
 800b6e4:	2a65      	cmp	r2, #101	@ 0x65
 800b6e6:	f43f ab6e 	beq.w	800adc6 <_strtod_l+0x26e>
 800b6ea:	2a45      	cmp	r2, #69	@ 0x45
 800b6ec:	f43f ab6b 	beq.w	800adc6 <_strtod_l+0x26e>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f7ff bba6 	b.w	800ae42 <_strtod_l+0x2ea>
 800b6f6:	bf00      	nop
 800b6f8:	ffc00000 	.word	0xffc00000
 800b6fc:	41dfffff 	.word	0x41dfffff
 800b700:	94a03595 	.word	0x94a03595
 800b704:	3fcfffff 	.word	0x3fcfffff

0800b708 <_strtod_r>:
 800b708:	4b01      	ldr	r3, [pc, #4]	@ (800b710 <_strtod_r+0x8>)
 800b70a:	f7ff ba25 	b.w	800ab58 <_strtod_l>
 800b70e:	bf00      	nop
 800b710:	200000b4 	.word	0x200000b4

0800b714 <_strtol_l.constprop.0>:
 800b714:	2b24      	cmp	r3, #36	@ 0x24
 800b716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71a:	4686      	mov	lr, r0
 800b71c:	4690      	mov	r8, r2
 800b71e:	d801      	bhi.n	800b724 <_strtol_l.constprop.0+0x10>
 800b720:	2b01      	cmp	r3, #1
 800b722:	d106      	bne.n	800b732 <_strtol_l.constprop.0+0x1e>
 800b724:	f7fd fdc0 	bl	80092a8 <__errno>
 800b728:	2316      	movs	r3, #22
 800b72a:	6003      	str	r3, [r0, #0]
 800b72c:	2000      	movs	r0, #0
 800b72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b732:	460d      	mov	r5, r1
 800b734:	4833      	ldr	r0, [pc, #204]	@ (800b804 <_strtol_l.constprop.0+0xf0>)
 800b736:	462a      	mov	r2, r5
 800b738:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b73c:	5d06      	ldrb	r6, [r0, r4]
 800b73e:	f016 0608 	ands.w	r6, r6, #8
 800b742:	d1f8      	bne.n	800b736 <_strtol_l.constprop.0+0x22>
 800b744:	2c2d      	cmp	r4, #45	@ 0x2d
 800b746:	d12d      	bne.n	800b7a4 <_strtol_l.constprop.0+0x90>
 800b748:	2601      	movs	r6, #1
 800b74a:	782c      	ldrb	r4, [r5, #0]
 800b74c:	1c95      	adds	r5, r2, #2
 800b74e:	f033 0210 	bics.w	r2, r3, #16
 800b752:	d109      	bne.n	800b768 <_strtol_l.constprop.0+0x54>
 800b754:	2c30      	cmp	r4, #48	@ 0x30
 800b756:	d12a      	bne.n	800b7ae <_strtol_l.constprop.0+0x9a>
 800b758:	782a      	ldrb	r2, [r5, #0]
 800b75a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b75e:	2a58      	cmp	r2, #88	@ 0x58
 800b760:	d125      	bne.n	800b7ae <_strtol_l.constprop.0+0x9a>
 800b762:	2310      	movs	r3, #16
 800b764:	786c      	ldrb	r4, [r5, #1]
 800b766:	3502      	adds	r5, #2
 800b768:	2200      	movs	r2, #0
 800b76a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b76e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b772:	fbbc f9f3 	udiv	r9, ip, r3
 800b776:	4610      	mov	r0, r2
 800b778:	fb03 ca19 	mls	sl, r3, r9, ip
 800b77c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b780:	2f09      	cmp	r7, #9
 800b782:	d81b      	bhi.n	800b7bc <_strtol_l.constprop.0+0xa8>
 800b784:	463c      	mov	r4, r7
 800b786:	42a3      	cmp	r3, r4
 800b788:	dd27      	ble.n	800b7da <_strtol_l.constprop.0+0xc6>
 800b78a:	1c57      	adds	r7, r2, #1
 800b78c:	d007      	beq.n	800b79e <_strtol_l.constprop.0+0x8a>
 800b78e:	4581      	cmp	r9, r0
 800b790:	d320      	bcc.n	800b7d4 <_strtol_l.constprop.0+0xc0>
 800b792:	d101      	bne.n	800b798 <_strtol_l.constprop.0+0x84>
 800b794:	45a2      	cmp	sl, r4
 800b796:	db1d      	blt.n	800b7d4 <_strtol_l.constprop.0+0xc0>
 800b798:	2201      	movs	r2, #1
 800b79a:	fb00 4003 	mla	r0, r0, r3, r4
 800b79e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7a2:	e7eb      	b.n	800b77c <_strtol_l.constprop.0+0x68>
 800b7a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7a6:	bf04      	itt	eq
 800b7a8:	782c      	ldrbeq	r4, [r5, #0]
 800b7aa:	1c95      	addeq	r5, r2, #2
 800b7ac:	e7cf      	b.n	800b74e <_strtol_l.constprop.0+0x3a>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1da      	bne.n	800b768 <_strtol_l.constprop.0+0x54>
 800b7b2:	2c30      	cmp	r4, #48	@ 0x30
 800b7b4:	bf0c      	ite	eq
 800b7b6:	2308      	moveq	r3, #8
 800b7b8:	230a      	movne	r3, #10
 800b7ba:	e7d5      	b.n	800b768 <_strtol_l.constprop.0+0x54>
 800b7bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7c0:	2f19      	cmp	r7, #25
 800b7c2:	d801      	bhi.n	800b7c8 <_strtol_l.constprop.0+0xb4>
 800b7c4:	3c37      	subs	r4, #55	@ 0x37
 800b7c6:	e7de      	b.n	800b786 <_strtol_l.constprop.0+0x72>
 800b7c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7cc:	2f19      	cmp	r7, #25
 800b7ce:	d804      	bhi.n	800b7da <_strtol_l.constprop.0+0xc6>
 800b7d0:	3c57      	subs	r4, #87	@ 0x57
 800b7d2:	e7d8      	b.n	800b786 <_strtol_l.constprop.0+0x72>
 800b7d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7d8:	e7e1      	b.n	800b79e <_strtol_l.constprop.0+0x8a>
 800b7da:	1c53      	adds	r3, r2, #1
 800b7dc:	d108      	bne.n	800b7f0 <_strtol_l.constprop.0+0xdc>
 800b7de:	2322      	movs	r3, #34	@ 0x22
 800b7e0:	4660      	mov	r0, ip
 800b7e2:	f8ce 3000 	str.w	r3, [lr]
 800b7e6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ea:	d0a0      	beq.n	800b72e <_strtol_l.constprop.0+0x1a>
 800b7ec:	1e69      	subs	r1, r5, #1
 800b7ee:	e006      	b.n	800b7fe <_strtol_l.constprop.0+0xea>
 800b7f0:	b106      	cbz	r6, 800b7f4 <_strtol_l.constprop.0+0xe0>
 800b7f2:	4240      	negs	r0, r0
 800b7f4:	f1b8 0f00 	cmp.w	r8, #0
 800b7f8:	d099      	beq.n	800b72e <_strtol_l.constprop.0+0x1a>
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	d1f6      	bne.n	800b7ec <_strtol_l.constprop.0+0xd8>
 800b7fe:	f8c8 1000 	str.w	r1, [r8]
 800b802:	e794      	b.n	800b72e <_strtol_l.constprop.0+0x1a>
 800b804:	0800d6f1 	.word	0x0800d6f1

0800b808 <_strtol_r>:
 800b808:	f7ff bf84 	b.w	800b714 <_strtol_l.constprop.0>

0800b80c <__ssputs_r>:
 800b80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b810:	461f      	mov	r7, r3
 800b812:	688e      	ldr	r6, [r1, #8]
 800b814:	4682      	mov	sl, r0
 800b816:	42be      	cmp	r6, r7
 800b818:	460c      	mov	r4, r1
 800b81a:	4690      	mov	r8, r2
 800b81c:	680b      	ldr	r3, [r1, #0]
 800b81e:	d82d      	bhi.n	800b87c <__ssputs_r+0x70>
 800b820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b824:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b828:	d026      	beq.n	800b878 <__ssputs_r+0x6c>
 800b82a:	6965      	ldr	r5, [r4, #20]
 800b82c:	6909      	ldr	r1, [r1, #16]
 800b82e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b832:	eba3 0901 	sub.w	r9, r3, r1
 800b836:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b83a:	1c7b      	adds	r3, r7, #1
 800b83c:	444b      	add	r3, r9
 800b83e:	106d      	asrs	r5, r5, #1
 800b840:	429d      	cmp	r5, r3
 800b842:	bf38      	it	cc
 800b844:	461d      	movcc	r5, r3
 800b846:	0553      	lsls	r3, r2, #21
 800b848:	d527      	bpl.n	800b89a <__ssputs_r+0x8e>
 800b84a:	4629      	mov	r1, r5
 800b84c:	f7fe fc2e 	bl	800a0ac <_malloc_r>
 800b850:	4606      	mov	r6, r0
 800b852:	b360      	cbz	r0, 800b8ae <__ssputs_r+0xa2>
 800b854:	464a      	mov	r2, r9
 800b856:	6921      	ldr	r1, [r4, #16]
 800b858:	f000 fa14 	bl	800bc84 <memcpy>
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	6126      	str	r6, [r4, #16]
 800b86a:	444e      	add	r6, r9
 800b86c:	6026      	str	r6, [r4, #0]
 800b86e:	463e      	mov	r6, r7
 800b870:	6165      	str	r5, [r4, #20]
 800b872:	eba5 0509 	sub.w	r5, r5, r9
 800b876:	60a5      	str	r5, [r4, #8]
 800b878:	42be      	cmp	r6, r7
 800b87a:	d900      	bls.n	800b87e <__ssputs_r+0x72>
 800b87c:	463e      	mov	r6, r7
 800b87e:	4632      	mov	r2, r6
 800b880:	4641      	mov	r1, r8
 800b882:	6820      	ldr	r0, [r4, #0]
 800b884:	f000 f9c2 	bl	800bc0c <memmove>
 800b888:	2000      	movs	r0, #0
 800b88a:	68a3      	ldr	r3, [r4, #8]
 800b88c:	1b9b      	subs	r3, r3, r6
 800b88e:	60a3      	str	r3, [r4, #8]
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	4433      	add	r3, r6
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89a:	462a      	mov	r2, r5
 800b89c:	f000 fd83 	bl	800c3a6 <_realloc_r>
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d1e0      	bne.n	800b868 <__ssputs_r+0x5c>
 800b8a6:	4650      	mov	r0, sl
 800b8a8:	6921      	ldr	r1, [r4, #16]
 800b8aa:	f7fe fb8d 	bl	8009fc8 <_free_r>
 800b8ae:	230c      	movs	r3, #12
 800b8b0:	f8ca 3000 	str.w	r3, [sl]
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8be:	81a3      	strh	r3, [r4, #12]
 800b8c0:	e7e9      	b.n	800b896 <__ssputs_r+0x8a>
	...

0800b8c4 <_svfiprintf_r>:
 800b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c8:	4698      	mov	r8, r3
 800b8ca:	898b      	ldrh	r3, [r1, #12]
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	061b      	lsls	r3, r3, #24
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	4614      	mov	r4, r2
 800b8d4:	b09d      	sub	sp, #116	@ 0x74
 800b8d6:	d510      	bpl.n	800b8fa <_svfiprintf_r+0x36>
 800b8d8:	690b      	ldr	r3, [r1, #16]
 800b8da:	b973      	cbnz	r3, 800b8fa <_svfiprintf_r+0x36>
 800b8dc:	2140      	movs	r1, #64	@ 0x40
 800b8de:	f7fe fbe5 	bl	800a0ac <_malloc_r>
 800b8e2:	6028      	str	r0, [r5, #0]
 800b8e4:	6128      	str	r0, [r5, #16]
 800b8e6:	b930      	cbnz	r0, 800b8f6 <_svfiprintf_r+0x32>
 800b8e8:	230c      	movs	r3, #12
 800b8ea:	603b      	str	r3, [r7, #0]
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8f0:	b01d      	add	sp, #116	@ 0x74
 800b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f6:	2340      	movs	r3, #64	@ 0x40
 800b8f8:	616b      	str	r3, [r5, #20]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8fe:	2320      	movs	r3, #32
 800b900:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b904:	2330      	movs	r3, #48	@ 0x30
 800b906:	f04f 0901 	mov.w	r9, #1
 800b90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b90e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800baa8 <_svfiprintf_r+0x1e4>
 800b912:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b916:	4623      	mov	r3, r4
 800b918:	469a      	mov	sl, r3
 800b91a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b91e:	b10a      	cbz	r2, 800b924 <_svfiprintf_r+0x60>
 800b920:	2a25      	cmp	r2, #37	@ 0x25
 800b922:	d1f9      	bne.n	800b918 <_svfiprintf_r+0x54>
 800b924:	ebba 0b04 	subs.w	fp, sl, r4
 800b928:	d00b      	beq.n	800b942 <_svfiprintf_r+0x7e>
 800b92a:	465b      	mov	r3, fp
 800b92c:	4622      	mov	r2, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	4638      	mov	r0, r7
 800b932:	f7ff ff6b 	bl	800b80c <__ssputs_r>
 800b936:	3001      	adds	r0, #1
 800b938:	f000 80a7 	beq.w	800ba8a <_svfiprintf_r+0x1c6>
 800b93c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b93e:	445a      	add	r2, fp
 800b940:	9209      	str	r2, [sp, #36]	@ 0x24
 800b942:	f89a 3000 	ldrb.w	r3, [sl]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 809f 	beq.w	800ba8a <_svfiprintf_r+0x1c6>
 800b94c:	2300      	movs	r3, #0
 800b94e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b956:	f10a 0a01 	add.w	sl, sl, #1
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	9307      	str	r3, [sp, #28]
 800b95e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b962:	931a      	str	r3, [sp, #104]	@ 0x68
 800b964:	4654      	mov	r4, sl
 800b966:	2205      	movs	r2, #5
 800b968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96c:	484e      	ldr	r0, [pc, #312]	@ (800baa8 <_svfiprintf_r+0x1e4>)
 800b96e:	f7fd fcc8 	bl	8009302 <memchr>
 800b972:	9a04      	ldr	r2, [sp, #16]
 800b974:	b9d8      	cbnz	r0, 800b9ae <_svfiprintf_r+0xea>
 800b976:	06d0      	lsls	r0, r2, #27
 800b978:	bf44      	itt	mi
 800b97a:	2320      	movmi	r3, #32
 800b97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b980:	0711      	lsls	r1, r2, #28
 800b982:	bf44      	itt	mi
 800b984:	232b      	movmi	r3, #43	@ 0x2b
 800b986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b98a:	f89a 3000 	ldrb.w	r3, [sl]
 800b98e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b990:	d015      	beq.n	800b9be <_svfiprintf_r+0xfa>
 800b992:	4654      	mov	r4, sl
 800b994:	2000      	movs	r0, #0
 800b996:	f04f 0c0a 	mov.w	ip, #10
 800b99a:	9a07      	ldr	r2, [sp, #28]
 800b99c:	4621      	mov	r1, r4
 800b99e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9a2:	3b30      	subs	r3, #48	@ 0x30
 800b9a4:	2b09      	cmp	r3, #9
 800b9a6:	d94b      	bls.n	800ba40 <_svfiprintf_r+0x17c>
 800b9a8:	b1b0      	cbz	r0, 800b9d8 <_svfiprintf_r+0x114>
 800b9aa:	9207      	str	r2, [sp, #28]
 800b9ac:	e014      	b.n	800b9d8 <_svfiprintf_r+0x114>
 800b9ae:	eba0 0308 	sub.w	r3, r0, r8
 800b9b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	46a2      	mov	sl, r4
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	e7d2      	b.n	800b964 <_svfiprintf_r+0xa0>
 800b9be:	9b03      	ldr	r3, [sp, #12]
 800b9c0:	1d19      	adds	r1, r3, #4
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	9103      	str	r1, [sp, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	bfbb      	ittet	lt
 800b9ca:	425b      	neglt	r3, r3
 800b9cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b9d0:	9307      	strge	r3, [sp, #28]
 800b9d2:	9307      	strlt	r3, [sp, #28]
 800b9d4:	bfb8      	it	lt
 800b9d6:	9204      	strlt	r2, [sp, #16]
 800b9d8:	7823      	ldrb	r3, [r4, #0]
 800b9da:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9dc:	d10a      	bne.n	800b9f4 <_svfiprintf_r+0x130>
 800b9de:	7863      	ldrb	r3, [r4, #1]
 800b9e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9e2:	d132      	bne.n	800ba4a <_svfiprintf_r+0x186>
 800b9e4:	9b03      	ldr	r3, [sp, #12]
 800b9e6:	3402      	adds	r4, #2
 800b9e8:	1d1a      	adds	r2, r3, #4
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	9203      	str	r2, [sp, #12]
 800b9ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9f2:	9305      	str	r3, [sp, #20]
 800b9f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800baac <_svfiprintf_r+0x1e8>
 800b9f8:	2203      	movs	r2, #3
 800b9fa:	4650      	mov	r0, sl
 800b9fc:	7821      	ldrb	r1, [r4, #0]
 800b9fe:	f7fd fc80 	bl	8009302 <memchr>
 800ba02:	b138      	cbz	r0, 800ba14 <_svfiprintf_r+0x150>
 800ba04:	2240      	movs	r2, #64	@ 0x40
 800ba06:	9b04      	ldr	r3, [sp, #16]
 800ba08:	eba0 000a 	sub.w	r0, r0, sl
 800ba0c:	4082      	lsls	r2, r0
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	3401      	adds	r4, #1
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba18:	2206      	movs	r2, #6
 800ba1a:	4825      	ldr	r0, [pc, #148]	@ (800bab0 <_svfiprintf_r+0x1ec>)
 800ba1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba20:	f7fd fc6f 	bl	8009302 <memchr>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d036      	beq.n	800ba96 <_svfiprintf_r+0x1d2>
 800ba28:	4b22      	ldr	r3, [pc, #136]	@ (800bab4 <_svfiprintf_r+0x1f0>)
 800ba2a:	bb1b      	cbnz	r3, 800ba74 <_svfiprintf_r+0x1b0>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	3307      	adds	r3, #7
 800ba30:	f023 0307 	bic.w	r3, r3, #7
 800ba34:	3308      	adds	r3, #8
 800ba36:	9303      	str	r3, [sp, #12]
 800ba38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba3a:	4433      	add	r3, r6
 800ba3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba3e:	e76a      	b.n	800b916 <_svfiprintf_r+0x52>
 800ba40:	460c      	mov	r4, r1
 800ba42:	2001      	movs	r0, #1
 800ba44:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba48:	e7a8      	b.n	800b99c <_svfiprintf_r+0xd8>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f04f 0c0a 	mov.w	ip, #10
 800ba50:	4619      	mov	r1, r3
 800ba52:	3401      	adds	r4, #1
 800ba54:	9305      	str	r3, [sp, #20]
 800ba56:	4620      	mov	r0, r4
 800ba58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba5c:	3a30      	subs	r2, #48	@ 0x30
 800ba5e:	2a09      	cmp	r2, #9
 800ba60:	d903      	bls.n	800ba6a <_svfiprintf_r+0x1a6>
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d0c6      	beq.n	800b9f4 <_svfiprintf_r+0x130>
 800ba66:	9105      	str	r1, [sp, #20]
 800ba68:	e7c4      	b.n	800b9f4 <_svfiprintf_r+0x130>
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba72:	e7f0      	b.n	800ba56 <_svfiprintf_r+0x192>
 800ba74:	ab03      	add	r3, sp, #12
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	462a      	mov	r2, r5
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bab8 <_svfiprintf_r+0x1f4>)
 800ba7e:	a904      	add	r1, sp, #16
 800ba80:	f7fc fccc 	bl	800841c <_printf_float>
 800ba84:	1c42      	adds	r2, r0, #1
 800ba86:	4606      	mov	r6, r0
 800ba88:	d1d6      	bne.n	800ba38 <_svfiprintf_r+0x174>
 800ba8a:	89ab      	ldrh	r3, [r5, #12]
 800ba8c:	065b      	lsls	r3, r3, #25
 800ba8e:	f53f af2d 	bmi.w	800b8ec <_svfiprintf_r+0x28>
 800ba92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba94:	e72c      	b.n	800b8f0 <_svfiprintf_r+0x2c>
 800ba96:	ab03      	add	r3, sp, #12
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	4b06      	ldr	r3, [pc, #24]	@ (800bab8 <_svfiprintf_r+0x1f4>)
 800baa0:	a904      	add	r1, sp, #16
 800baa2:	f7fc ff59 	bl	8008958 <_printf_i>
 800baa6:	e7ed      	b.n	800ba84 <_svfiprintf_r+0x1c0>
 800baa8:	0800d7f1 	.word	0x0800d7f1
 800baac:	0800d7f7 	.word	0x0800d7f7
 800bab0:	0800d7fb 	.word	0x0800d7fb
 800bab4:	0800841d 	.word	0x0800841d
 800bab8:	0800b80d 	.word	0x0800b80d

0800babc <__sflush_r>:
 800babc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	0716      	lsls	r6, r2, #28
 800bac4:	4605      	mov	r5, r0
 800bac6:	460c      	mov	r4, r1
 800bac8:	d454      	bmi.n	800bb74 <__sflush_r+0xb8>
 800baca:	684b      	ldr	r3, [r1, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dc02      	bgt.n	800bad6 <__sflush_r+0x1a>
 800bad0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dd48      	ble.n	800bb68 <__sflush_r+0xac>
 800bad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bad8:	2e00      	cmp	r6, #0
 800bada:	d045      	beq.n	800bb68 <__sflush_r+0xac>
 800badc:	2300      	movs	r3, #0
 800bade:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bae2:	682f      	ldr	r7, [r5, #0]
 800bae4:	6a21      	ldr	r1, [r4, #32]
 800bae6:	602b      	str	r3, [r5, #0]
 800bae8:	d030      	beq.n	800bb4c <__sflush_r+0x90>
 800baea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	0759      	lsls	r1, r3, #29
 800baf0:	d505      	bpl.n	800bafe <__sflush_r+0x42>
 800baf2:	6863      	ldr	r3, [r4, #4]
 800baf4:	1ad2      	subs	r2, r2, r3
 800baf6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800baf8:	b10b      	cbz	r3, 800bafe <__sflush_r+0x42>
 800bafa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bafc:	1ad2      	subs	r2, r2, r3
 800bafe:	2300      	movs	r3, #0
 800bb00:	4628      	mov	r0, r5
 800bb02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb04:	6a21      	ldr	r1, [r4, #32]
 800bb06:	47b0      	blx	r6
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	d106      	bne.n	800bb1c <__sflush_r+0x60>
 800bb0e:	6829      	ldr	r1, [r5, #0]
 800bb10:	291d      	cmp	r1, #29
 800bb12:	d82b      	bhi.n	800bb6c <__sflush_r+0xb0>
 800bb14:	4a28      	ldr	r2, [pc, #160]	@ (800bbb8 <__sflush_r+0xfc>)
 800bb16:	410a      	asrs	r2, r1
 800bb18:	07d6      	lsls	r6, r2, #31
 800bb1a:	d427      	bmi.n	800bb6c <__sflush_r+0xb0>
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	6062      	str	r2, [r4, #4]
 800bb20:	6922      	ldr	r2, [r4, #16]
 800bb22:	04d9      	lsls	r1, r3, #19
 800bb24:	6022      	str	r2, [r4, #0]
 800bb26:	d504      	bpl.n	800bb32 <__sflush_r+0x76>
 800bb28:	1c42      	adds	r2, r0, #1
 800bb2a:	d101      	bne.n	800bb30 <__sflush_r+0x74>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b903      	cbnz	r3, 800bb32 <__sflush_r+0x76>
 800bb30:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb34:	602f      	str	r7, [r5, #0]
 800bb36:	b1b9      	cbz	r1, 800bb68 <__sflush_r+0xac>
 800bb38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb3c:	4299      	cmp	r1, r3
 800bb3e:	d002      	beq.n	800bb46 <__sflush_r+0x8a>
 800bb40:	4628      	mov	r0, r5
 800bb42:	f7fe fa41 	bl	8009fc8 <_free_r>
 800bb46:	2300      	movs	r3, #0
 800bb48:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb4a:	e00d      	b.n	800bb68 <__sflush_r+0xac>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	4628      	mov	r0, r5
 800bb50:	47b0      	blx	r6
 800bb52:	4602      	mov	r2, r0
 800bb54:	1c50      	adds	r0, r2, #1
 800bb56:	d1c9      	bne.n	800baec <__sflush_r+0x30>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0c6      	beq.n	800baec <__sflush_r+0x30>
 800bb5e:	2b1d      	cmp	r3, #29
 800bb60:	d001      	beq.n	800bb66 <__sflush_r+0xaa>
 800bb62:	2b16      	cmp	r3, #22
 800bb64:	d11d      	bne.n	800bba2 <__sflush_r+0xe6>
 800bb66:	602f      	str	r7, [r5, #0]
 800bb68:	2000      	movs	r0, #0
 800bb6a:	e021      	b.n	800bbb0 <__sflush_r+0xf4>
 800bb6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb70:	b21b      	sxth	r3, r3
 800bb72:	e01a      	b.n	800bbaa <__sflush_r+0xee>
 800bb74:	690f      	ldr	r7, [r1, #16]
 800bb76:	2f00      	cmp	r7, #0
 800bb78:	d0f6      	beq.n	800bb68 <__sflush_r+0xac>
 800bb7a:	0793      	lsls	r3, r2, #30
 800bb7c:	bf18      	it	ne
 800bb7e:	2300      	movne	r3, #0
 800bb80:	680e      	ldr	r6, [r1, #0]
 800bb82:	bf08      	it	eq
 800bb84:	694b      	ldreq	r3, [r1, #20]
 800bb86:	1bf6      	subs	r6, r6, r7
 800bb88:	600f      	str	r7, [r1, #0]
 800bb8a:	608b      	str	r3, [r1, #8]
 800bb8c:	2e00      	cmp	r6, #0
 800bb8e:	ddeb      	ble.n	800bb68 <__sflush_r+0xac>
 800bb90:	4633      	mov	r3, r6
 800bb92:	463a      	mov	r2, r7
 800bb94:	4628      	mov	r0, r5
 800bb96:	6a21      	ldr	r1, [r4, #32]
 800bb98:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bb9c:	47e0      	blx	ip
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	dc07      	bgt.n	800bbb2 <__sflush_r+0xf6>
 800bba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb2:	4407      	add	r7, r0
 800bbb4:	1a36      	subs	r6, r6, r0
 800bbb6:	e7e9      	b.n	800bb8c <__sflush_r+0xd0>
 800bbb8:	dfbffffe 	.word	0xdfbffffe

0800bbbc <_fflush_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	690b      	ldr	r3, [r1, #16]
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	b913      	cbnz	r3, 800bbcc <_fflush_r+0x10>
 800bbc6:	2500      	movs	r5, #0
 800bbc8:	4628      	mov	r0, r5
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	b118      	cbz	r0, 800bbd6 <_fflush_r+0x1a>
 800bbce:	6a03      	ldr	r3, [r0, #32]
 800bbd0:	b90b      	cbnz	r3, 800bbd6 <_fflush_r+0x1a>
 800bbd2:	f7fd fa7d 	bl	80090d0 <__sinit>
 800bbd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0f3      	beq.n	800bbc6 <_fflush_r+0xa>
 800bbde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbe0:	07d0      	lsls	r0, r2, #31
 800bbe2:	d404      	bmi.n	800bbee <_fflush_r+0x32>
 800bbe4:	0599      	lsls	r1, r3, #22
 800bbe6:	d402      	bmi.n	800bbee <_fflush_r+0x32>
 800bbe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbea:	f7fd fb88 	bl	80092fe <__retarget_lock_acquire_recursive>
 800bbee:	4628      	mov	r0, r5
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	f7ff ff63 	bl	800babc <__sflush_r>
 800bbf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	07da      	lsls	r2, r3, #31
 800bbfc:	d4e4      	bmi.n	800bbc8 <_fflush_r+0xc>
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	059b      	lsls	r3, r3, #22
 800bc02:	d4e1      	bmi.n	800bbc8 <_fflush_r+0xc>
 800bc04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc06:	f7fd fb7b 	bl	8009300 <__retarget_lock_release_recursive>
 800bc0a:	e7dd      	b.n	800bbc8 <_fflush_r+0xc>

0800bc0c <memmove>:
 800bc0c:	4288      	cmp	r0, r1
 800bc0e:	b510      	push	{r4, lr}
 800bc10:	eb01 0402 	add.w	r4, r1, r2
 800bc14:	d902      	bls.n	800bc1c <memmove+0x10>
 800bc16:	4284      	cmp	r4, r0
 800bc18:	4623      	mov	r3, r4
 800bc1a:	d807      	bhi.n	800bc2c <memmove+0x20>
 800bc1c:	1e43      	subs	r3, r0, #1
 800bc1e:	42a1      	cmp	r1, r4
 800bc20:	d008      	beq.n	800bc34 <memmove+0x28>
 800bc22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc2a:	e7f8      	b.n	800bc1e <memmove+0x12>
 800bc2c:	4601      	mov	r1, r0
 800bc2e:	4402      	add	r2, r0
 800bc30:	428a      	cmp	r2, r1
 800bc32:	d100      	bne.n	800bc36 <memmove+0x2a>
 800bc34:	bd10      	pop	{r4, pc}
 800bc36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc3e:	e7f7      	b.n	800bc30 <memmove+0x24>

0800bc40 <strncmp>:
 800bc40:	b510      	push	{r4, lr}
 800bc42:	b16a      	cbz	r2, 800bc60 <strncmp+0x20>
 800bc44:	3901      	subs	r1, #1
 800bc46:	1884      	adds	r4, r0, r2
 800bc48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d103      	bne.n	800bc5c <strncmp+0x1c>
 800bc54:	42a0      	cmp	r0, r4
 800bc56:	d001      	beq.n	800bc5c <strncmp+0x1c>
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	d1f5      	bne.n	800bc48 <strncmp+0x8>
 800bc5c:	1ad0      	subs	r0, r2, r3
 800bc5e:	bd10      	pop	{r4, pc}
 800bc60:	4610      	mov	r0, r2
 800bc62:	e7fc      	b.n	800bc5e <strncmp+0x1e>

0800bc64 <_sbrk_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	2300      	movs	r3, #0
 800bc68:	4d05      	ldr	r5, [pc, #20]	@ (800bc80 <_sbrk_r+0x1c>)
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	f7f6 fba0 	bl	80023b4 <_sbrk>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_sbrk_r+0x1a>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_sbrk_r+0x1a>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	20002744 	.word	0x20002744

0800bc84 <memcpy>:
 800bc84:	440a      	add	r2, r1
 800bc86:	4291      	cmp	r1, r2
 800bc88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bc8c:	d100      	bne.n	800bc90 <memcpy+0xc>
 800bc8e:	4770      	bx	lr
 800bc90:	b510      	push	{r4, lr}
 800bc92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc96:	4291      	cmp	r1, r2
 800bc98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc9c:	d1f9      	bne.n	800bc92 <memcpy+0xe>
 800bc9e:	bd10      	pop	{r4, pc}

0800bca0 <nan>:
 800bca0:	2000      	movs	r0, #0
 800bca2:	4901      	ldr	r1, [pc, #4]	@ (800bca8 <nan+0x8>)
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	7ff80000 	.word	0x7ff80000

0800bcac <__assert_func>:
 800bcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcae:	4614      	mov	r4, r2
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	4b09      	ldr	r3, [pc, #36]	@ (800bcd8 <__assert_func+0x2c>)
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68d8      	ldr	r0, [r3, #12]
 800bcba:	b954      	cbnz	r4, 800bcd2 <__assert_func+0x26>
 800bcbc:	4b07      	ldr	r3, [pc, #28]	@ (800bcdc <__assert_func+0x30>)
 800bcbe:	461c      	mov	r4, r3
 800bcc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcc4:	9100      	str	r1, [sp, #0]
 800bcc6:	462b      	mov	r3, r5
 800bcc8:	4905      	ldr	r1, [pc, #20]	@ (800bce0 <__assert_func+0x34>)
 800bcca:	f000 fba7 	bl	800c41c <fiprintf>
 800bcce:	f000 fbb7 	bl	800c440 <abort>
 800bcd2:	4b04      	ldr	r3, [pc, #16]	@ (800bce4 <__assert_func+0x38>)
 800bcd4:	e7f4      	b.n	800bcc0 <__assert_func+0x14>
 800bcd6:	bf00      	nop
 800bcd8:	20000064 	.word	0x20000064
 800bcdc:	0800d845 	.word	0x0800d845
 800bce0:	0800d817 	.word	0x0800d817
 800bce4:	0800d80a 	.word	0x0800d80a

0800bce8 <_calloc_r>:
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	fba1 5402 	umull	r5, r4, r1, r2
 800bcee:	b93c      	cbnz	r4, 800bd00 <_calloc_r+0x18>
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	f7fe f9db 	bl	800a0ac <_malloc_r>
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	b928      	cbnz	r0, 800bd06 <_calloc_r+0x1e>
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	220c      	movs	r2, #12
 800bd02:	6002      	str	r2, [r0, #0]
 800bd04:	e7f9      	b.n	800bcfa <_calloc_r+0x12>
 800bd06:	462a      	mov	r2, r5
 800bd08:	4621      	mov	r1, r4
 800bd0a:	f7fd fa7a 	bl	8009202 <memset>
 800bd0e:	e7f5      	b.n	800bcfc <_calloc_r+0x14>

0800bd10 <rshift>:
 800bd10:	6903      	ldr	r3, [r0, #16]
 800bd12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd1a:	f100 0414 	add.w	r4, r0, #20
 800bd1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd22:	dd46      	ble.n	800bdb2 <rshift+0xa2>
 800bd24:	f011 011f 	ands.w	r1, r1, #31
 800bd28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd30:	d10c      	bne.n	800bd4c <rshift+0x3c>
 800bd32:	4629      	mov	r1, r5
 800bd34:	f100 0710 	add.w	r7, r0, #16
 800bd38:	42b1      	cmp	r1, r6
 800bd3a:	d335      	bcc.n	800bda8 <rshift+0x98>
 800bd3c:	1a9b      	subs	r3, r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	1eea      	subs	r2, r5, #3
 800bd42:	4296      	cmp	r6, r2
 800bd44:	bf38      	it	cc
 800bd46:	2300      	movcc	r3, #0
 800bd48:	4423      	add	r3, r4
 800bd4a:	e015      	b.n	800bd78 <rshift+0x68>
 800bd4c:	46a1      	mov	r9, r4
 800bd4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd52:	f1c1 0820 	rsb	r8, r1, #32
 800bd56:	40cf      	lsrs	r7, r1
 800bd58:	f105 0e04 	add.w	lr, r5, #4
 800bd5c:	4576      	cmp	r6, lr
 800bd5e:	46f4      	mov	ip, lr
 800bd60:	d816      	bhi.n	800bd90 <rshift+0x80>
 800bd62:	1a9a      	subs	r2, r3, r2
 800bd64:	0092      	lsls	r2, r2, #2
 800bd66:	3a04      	subs	r2, #4
 800bd68:	3501      	adds	r5, #1
 800bd6a:	42ae      	cmp	r6, r5
 800bd6c:	bf38      	it	cc
 800bd6e:	2200      	movcc	r2, #0
 800bd70:	18a3      	adds	r3, r4, r2
 800bd72:	50a7      	str	r7, [r4, r2]
 800bd74:	b107      	cbz	r7, 800bd78 <rshift+0x68>
 800bd76:	3304      	adds	r3, #4
 800bd78:	42a3      	cmp	r3, r4
 800bd7a:	eba3 0204 	sub.w	r2, r3, r4
 800bd7e:	bf08      	it	eq
 800bd80:	2300      	moveq	r3, #0
 800bd82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd86:	6102      	str	r2, [r0, #16]
 800bd88:	bf08      	it	eq
 800bd8a:	6143      	streq	r3, [r0, #20]
 800bd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd90:	f8dc c000 	ldr.w	ip, [ip]
 800bd94:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd98:	ea4c 0707 	orr.w	r7, ip, r7
 800bd9c:	f849 7b04 	str.w	r7, [r9], #4
 800bda0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bda4:	40cf      	lsrs	r7, r1
 800bda6:	e7d9      	b.n	800bd5c <rshift+0x4c>
 800bda8:	f851 cb04 	ldr.w	ip, [r1], #4
 800bdac:	f847 cf04 	str.w	ip, [r7, #4]!
 800bdb0:	e7c2      	b.n	800bd38 <rshift+0x28>
 800bdb2:	4623      	mov	r3, r4
 800bdb4:	e7e0      	b.n	800bd78 <rshift+0x68>

0800bdb6 <__hexdig_fun>:
 800bdb6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bdba:	2b09      	cmp	r3, #9
 800bdbc:	d802      	bhi.n	800bdc4 <__hexdig_fun+0xe>
 800bdbe:	3820      	subs	r0, #32
 800bdc0:	b2c0      	uxtb	r0, r0
 800bdc2:	4770      	bx	lr
 800bdc4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bdc8:	2b05      	cmp	r3, #5
 800bdca:	d801      	bhi.n	800bdd0 <__hexdig_fun+0x1a>
 800bdcc:	3847      	subs	r0, #71	@ 0x47
 800bdce:	e7f7      	b.n	800bdc0 <__hexdig_fun+0xa>
 800bdd0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bdd4:	2b05      	cmp	r3, #5
 800bdd6:	d801      	bhi.n	800bddc <__hexdig_fun+0x26>
 800bdd8:	3827      	subs	r0, #39	@ 0x27
 800bdda:	e7f1      	b.n	800bdc0 <__hexdig_fun+0xa>
 800bddc:	2000      	movs	r0, #0
 800bdde:	4770      	bx	lr

0800bde0 <__gethex>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	468a      	mov	sl, r1
 800bde6:	4690      	mov	r8, r2
 800bde8:	b085      	sub	sp, #20
 800bdea:	9302      	str	r3, [sp, #8]
 800bdec:	680b      	ldr	r3, [r1, #0]
 800bdee:	9001      	str	r0, [sp, #4]
 800bdf0:	1c9c      	adds	r4, r3, #2
 800bdf2:	46a1      	mov	r9, r4
 800bdf4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bdf8:	2830      	cmp	r0, #48	@ 0x30
 800bdfa:	d0fa      	beq.n	800bdf2 <__gethex+0x12>
 800bdfc:	eba9 0303 	sub.w	r3, r9, r3
 800be00:	f1a3 0b02 	sub.w	fp, r3, #2
 800be04:	f7ff ffd7 	bl	800bdb6 <__hexdig_fun>
 800be08:	4605      	mov	r5, r0
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d168      	bne.n	800bee0 <__gethex+0x100>
 800be0e:	2201      	movs	r2, #1
 800be10:	4648      	mov	r0, r9
 800be12:	499f      	ldr	r1, [pc, #636]	@ (800c090 <__gethex+0x2b0>)
 800be14:	f7ff ff14 	bl	800bc40 <strncmp>
 800be18:	4607      	mov	r7, r0
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d167      	bne.n	800beee <__gethex+0x10e>
 800be1e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800be22:	4626      	mov	r6, r4
 800be24:	f7ff ffc7 	bl	800bdb6 <__hexdig_fun>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d062      	beq.n	800bef2 <__gethex+0x112>
 800be2c:	4623      	mov	r3, r4
 800be2e:	7818      	ldrb	r0, [r3, #0]
 800be30:	4699      	mov	r9, r3
 800be32:	2830      	cmp	r0, #48	@ 0x30
 800be34:	f103 0301 	add.w	r3, r3, #1
 800be38:	d0f9      	beq.n	800be2e <__gethex+0x4e>
 800be3a:	f7ff ffbc 	bl	800bdb6 <__hexdig_fun>
 800be3e:	fab0 f580 	clz	r5, r0
 800be42:	f04f 0b01 	mov.w	fp, #1
 800be46:	096d      	lsrs	r5, r5, #5
 800be48:	464a      	mov	r2, r9
 800be4a:	4616      	mov	r6, r2
 800be4c:	7830      	ldrb	r0, [r6, #0]
 800be4e:	3201      	adds	r2, #1
 800be50:	f7ff ffb1 	bl	800bdb6 <__hexdig_fun>
 800be54:	2800      	cmp	r0, #0
 800be56:	d1f8      	bne.n	800be4a <__gethex+0x6a>
 800be58:	2201      	movs	r2, #1
 800be5a:	4630      	mov	r0, r6
 800be5c:	498c      	ldr	r1, [pc, #560]	@ (800c090 <__gethex+0x2b0>)
 800be5e:	f7ff feef 	bl	800bc40 <strncmp>
 800be62:	2800      	cmp	r0, #0
 800be64:	d13f      	bne.n	800bee6 <__gethex+0x106>
 800be66:	b944      	cbnz	r4, 800be7a <__gethex+0x9a>
 800be68:	1c74      	adds	r4, r6, #1
 800be6a:	4622      	mov	r2, r4
 800be6c:	4616      	mov	r6, r2
 800be6e:	7830      	ldrb	r0, [r6, #0]
 800be70:	3201      	adds	r2, #1
 800be72:	f7ff ffa0 	bl	800bdb6 <__hexdig_fun>
 800be76:	2800      	cmp	r0, #0
 800be78:	d1f8      	bne.n	800be6c <__gethex+0x8c>
 800be7a:	1ba4      	subs	r4, r4, r6
 800be7c:	00a7      	lsls	r7, r4, #2
 800be7e:	7833      	ldrb	r3, [r6, #0]
 800be80:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800be84:	2b50      	cmp	r3, #80	@ 0x50
 800be86:	d13e      	bne.n	800bf06 <__gethex+0x126>
 800be88:	7873      	ldrb	r3, [r6, #1]
 800be8a:	2b2b      	cmp	r3, #43	@ 0x2b
 800be8c:	d033      	beq.n	800bef6 <__gethex+0x116>
 800be8e:	2b2d      	cmp	r3, #45	@ 0x2d
 800be90:	d034      	beq.n	800befc <__gethex+0x11c>
 800be92:	2400      	movs	r4, #0
 800be94:	1c71      	adds	r1, r6, #1
 800be96:	7808      	ldrb	r0, [r1, #0]
 800be98:	f7ff ff8d 	bl	800bdb6 <__hexdig_fun>
 800be9c:	1e43      	subs	r3, r0, #1
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b18      	cmp	r3, #24
 800bea2:	d830      	bhi.n	800bf06 <__gethex+0x126>
 800bea4:	f1a0 0210 	sub.w	r2, r0, #16
 800bea8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800beac:	f7ff ff83 	bl	800bdb6 <__hexdig_fun>
 800beb0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800beb4:	fa5f fc8c 	uxtb.w	ip, ip
 800beb8:	f1bc 0f18 	cmp.w	ip, #24
 800bebc:	f04f 030a 	mov.w	r3, #10
 800bec0:	d91e      	bls.n	800bf00 <__gethex+0x120>
 800bec2:	b104      	cbz	r4, 800bec6 <__gethex+0xe6>
 800bec4:	4252      	negs	r2, r2
 800bec6:	4417      	add	r7, r2
 800bec8:	f8ca 1000 	str.w	r1, [sl]
 800becc:	b1ed      	cbz	r5, 800bf0a <__gethex+0x12a>
 800bece:	f1bb 0f00 	cmp.w	fp, #0
 800bed2:	bf0c      	ite	eq
 800bed4:	2506      	moveq	r5, #6
 800bed6:	2500      	movne	r5, #0
 800bed8:	4628      	mov	r0, r5
 800beda:	b005      	add	sp, #20
 800bedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee0:	2500      	movs	r5, #0
 800bee2:	462c      	mov	r4, r5
 800bee4:	e7b0      	b.n	800be48 <__gethex+0x68>
 800bee6:	2c00      	cmp	r4, #0
 800bee8:	d1c7      	bne.n	800be7a <__gethex+0x9a>
 800beea:	4627      	mov	r7, r4
 800beec:	e7c7      	b.n	800be7e <__gethex+0x9e>
 800beee:	464e      	mov	r6, r9
 800bef0:	462f      	mov	r7, r5
 800bef2:	2501      	movs	r5, #1
 800bef4:	e7c3      	b.n	800be7e <__gethex+0x9e>
 800bef6:	2400      	movs	r4, #0
 800bef8:	1cb1      	adds	r1, r6, #2
 800befa:	e7cc      	b.n	800be96 <__gethex+0xb6>
 800befc:	2401      	movs	r4, #1
 800befe:	e7fb      	b.n	800bef8 <__gethex+0x118>
 800bf00:	fb03 0002 	mla	r0, r3, r2, r0
 800bf04:	e7ce      	b.n	800bea4 <__gethex+0xc4>
 800bf06:	4631      	mov	r1, r6
 800bf08:	e7de      	b.n	800bec8 <__gethex+0xe8>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	eba6 0309 	sub.w	r3, r6, r9
 800bf10:	3b01      	subs	r3, #1
 800bf12:	2b07      	cmp	r3, #7
 800bf14:	dc0a      	bgt.n	800bf2c <__gethex+0x14c>
 800bf16:	9801      	ldr	r0, [sp, #4]
 800bf18:	f7fe f954 	bl	800a1c4 <_Balloc>
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	b940      	cbnz	r0, 800bf32 <__gethex+0x152>
 800bf20:	4602      	mov	r2, r0
 800bf22:	21e4      	movs	r1, #228	@ 0xe4
 800bf24:	4b5b      	ldr	r3, [pc, #364]	@ (800c094 <__gethex+0x2b4>)
 800bf26:	485c      	ldr	r0, [pc, #368]	@ (800c098 <__gethex+0x2b8>)
 800bf28:	f7ff fec0 	bl	800bcac <__assert_func>
 800bf2c:	3101      	adds	r1, #1
 800bf2e:	105b      	asrs	r3, r3, #1
 800bf30:	e7ef      	b.n	800bf12 <__gethex+0x132>
 800bf32:	2300      	movs	r3, #0
 800bf34:	f100 0a14 	add.w	sl, r0, #20
 800bf38:	4655      	mov	r5, sl
 800bf3a:	469b      	mov	fp, r3
 800bf3c:	45b1      	cmp	r9, r6
 800bf3e:	d337      	bcc.n	800bfb0 <__gethex+0x1d0>
 800bf40:	f845 bb04 	str.w	fp, [r5], #4
 800bf44:	eba5 050a 	sub.w	r5, r5, sl
 800bf48:	10ad      	asrs	r5, r5, #2
 800bf4a:	6125      	str	r5, [r4, #16]
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	f7fe fa2b 	bl	800a3a8 <__hi0bits>
 800bf52:	016d      	lsls	r5, r5, #5
 800bf54:	f8d8 6000 	ldr.w	r6, [r8]
 800bf58:	1a2d      	subs	r5, r5, r0
 800bf5a:	42b5      	cmp	r5, r6
 800bf5c:	dd54      	ble.n	800c008 <__gethex+0x228>
 800bf5e:	1bad      	subs	r5, r5, r6
 800bf60:	4629      	mov	r1, r5
 800bf62:	4620      	mov	r0, r4
 800bf64:	f7fe fdb3 	bl	800aace <__any_on>
 800bf68:	4681      	mov	r9, r0
 800bf6a:	b178      	cbz	r0, 800bf8c <__gethex+0x1ac>
 800bf6c:	f04f 0901 	mov.w	r9, #1
 800bf70:	1e6b      	subs	r3, r5, #1
 800bf72:	1159      	asrs	r1, r3, #5
 800bf74:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bf78:	f003 021f 	and.w	r2, r3, #31
 800bf7c:	fa09 f202 	lsl.w	r2, r9, r2
 800bf80:	420a      	tst	r2, r1
 800bf82:	d003      	beq.n	800bf8c <__gethex+0x1ac>
 800bf84:	454b      	cmp	r3, r9
 800bf86:	dc36      	bgt.n	800bff6 <__gethex+0x216>
 800bf88:	f04f 0902 	mov.w	r9, #2
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f7ff febe 	bl	800bd10 <rshift>
 800bf94:	442f      	add	r7, r5
 800bf96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf9a:	42bb      	cmp	r3, r7
 800bf9c:	da42      	bge.n	800c024 <__gethex+0x244>
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	9801      	ldr	r0, [sp, #4]
 800bfa2:	f7fe f94f 	bl	800a244 <_Bfree>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfaa:	25a3      	movs	r5, #163	@ 0xa3
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	e793      	b.n	800bed8 <__gethex+0xf8>
 800bfb0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bfb4:	2a2e      	cmp	r2, #46	@ 0x2e
 800bfb6:	d012      	beq.n	800bfde <__gethex+0x1fe>
 800bfb8:	2b20      	cmp	r3, #32
 800bfba:	d104      	bne.n	800bfc6 <__gethex+0x1e6>
 800bfbc:	f845 bb04 	str.w	fp, [r5], #4
 800bfc0:	f04f 0b00 	mov.w	fp, #0
 800bfc4:	465b      	mov	r3, fp
 800bfc6:	7830      	ldrb	r0, [r6, #0]
 800bfc8:	9303      	str	r3, [sp, #12]
 800bfca:	f7ff fef4 	bl	800bdb6 <__hexdig_fun>
 800bfce:	9b03      	ldr	r3, [sp, #12]
 800bfd0:	f000 000f 	and.w	r0, r0, #15
 800bfd4:	4098      	lsls	r0, r3
 800bfd6:	ea4b 0b00 	orr.w	fp, fp, r0
 800bfda:	3304      	adds	r3, #4
 800bfdc:	e7ae      	b.n	800bf3c <__gethex+0x15c>
 800bfde:	45b1      	cmp	r9, r6
 800bfe0:	d8ea      	bhi.n	800bfb8 <__gethex+0x1d8>
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	492a      	ldr	r1, [pc, #168]	@ (800c090 <__gethex+0x2b0>)
 800bfe8:	9303      	str	r3, [sp, #12]
 800bfea:	f7ff fe29 	bl	800bc40 <strncmp>
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d1e1      	bne.n	800bfb8 <__gethex+0x1d8>
 800bff4:	e7a2      	b.n	800bf3c <__gethex+0x15c>
 800bff6:	4620      	mov	r0, r4
 800bff8:	1ea9      	subs	r1, r5, #2
 800bffa:	f7fe fd68 	bl	800aace <__any_on>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d0c2      	beq.n	800bf88 <__gethex+0x1a8>
 800c002:	f04f 0903 	mov.w	r9, #3
 800c006:	e7c1      	b.n	800bf8c <__gethex+0x1ac>
 800c008:	da09      	bge.n	800c01e <__gethex+0x23e>
 800c00a:	1b75      	subs	r5, r6, r5
 800c00c:	4621      	mov	r1, r4
 800c00e:	462a      	mov	r2, r5
 800c010:	9801      	ldr	r0, [sp, #4]
 800c012:	f7fe fb2d 	bl	800a670 <__lshift>
 800c016:	4604      	mov	r4, r0
 800c018:	1b7f      	subs	r7, r7, r5
 800c01a:	f100 0a14 	add.w	sl, r0, #20
 800c01e:	f04f 0900 	mov.w	r9, #0
 800c022:	e7b8      	b.n	800bf96 <__gethex+0x1b6>
 800c024:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c028:	42bd      	cmp	r5, r7
 800c02a:	dd6f      	ble.n	800c10c <__gethex+0x32c>
 800c02c:	1bed      	subs	r5, r5, r7
 800c02e:	42ae      	cmp	r6, r5
 800c030:	dc34      	bgt.n	800c09c <__gethex+0x2bc>
 800c032:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c036:	2b02      	cmp	r3, #2
 800c038:	d022      	beq.n	800c080 <__gethex+0x2a0>
 800c03a:	2b03      	cmp	r3, #3
 800c03c:	d024      	beq.n	800c088 <__gethex+0x2a8>
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d115      	bne.n	800c06e <__gethex+0x28e>
 800c042:	42ae      	cmp	r6, r5
 800c044:	d113      	bne.n	800c06e <__gethex+0x28e>
 800c046:	2e01      	cmp	r6, #1
 800c048:	d10b      	bne.n	800c062 <__gethex+0x282>
 800c04a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c04e:	9a02      	ldr	r2, [sp, #8]
 800c050:	2562      	movs	r5, #98	@ 0x62
 800c052:	6013      	str	r3, [r2, #0]
 800c054:	2301      	movs	r3, #1
 800c056:	6123      	str	r3, [r4, #16]
 800c058:	f8ca 3000 	str.w	r3, [sl]
 800c05c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c05e:	601c      	str	r4, [r3, #0]
 800c060:	e73a      	b.n	800bed8 <__gethex+0xf8>
 800c062:	4620      	mov	r0, r4
 800c064:	1e71      	subs	r1, r6, #1
 800c066:	f7fe fd32 	bl	800aace <__any_on>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d1ed      	bne.n	800c04a <__gethex+0x26a>
 800c06e:	4621      	mov	r1, r4
 800c070:	9801      	ldr	r0, [sp, #4]
 800c072:	f7fe f8e7 	bl	800a244 <_Bfree>
 800c076:	2300      	movs	r3, #0
 800c078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c07a:	2550      	movs	r5, #80	@ 0x50
 800c07c:	6013      	str	r3, [r2, #0]
 800c07e:	e72b      	b.n	800bed8 <__gethex+0xf8>
 800c080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1f3      	bne.n	800c06e <__gethex+0x28e>
 800c086:	e7e0      	b.n	800c04a <__gethex+0x26a>
 800c088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1dd      	bne.n	800c04a <__gethex+0x26a>
 800c08e:	e7ee      	b.n	800c06e <__gethex+0x28e>
 800c090:	0800d698 	.word	0x0800d698
 800c094:	0800d52d 	.word	0x0800d52d
 800c098:	0800d846 	.word	0x0800d846
 800c09c:	1e6f      	subs	r7, r5, #1
 800c09e:	f1b9 0f00 	cmp.w	r9, #0
 800c0a2:	d130      	bne.n	800c106 <__gethex+0x326>
 800c0a4:	b127      	cbz	r7, 800c0b0 <__gethex+0x2d0>
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f7fe fd10 	bl	800aace <__any_on>
 800c0ae:	4681      	mov	r9, r0
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	1b76      	subs	r6, r6, r5
 800c0b6:	2502      	movs	r5, #2
 800c0b8:	117a      	asrs	r2, r7, #5
 800c0ba:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c0be:	f007 071f 	and.w	r7, r7, #31
 800c0c2:	40bb      	lsls	r3, r7
 800c0c4:	4213      	tst	r3, r2
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	bf18      	it	ne
 800c0ca:	f049 0902 	orrne.w	r9, r9, #2
 800c0ce:	f7ff fe1f 	bl	800bd10 <rshift>
 800c0d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c0d6:	f1b9 0f00 	cmp.w	r9, #0
 800c0da:	d047      	beq.n	800c16c <__gethex+0x38c>
 800c0dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d015      	beq.n	800c110 <__gethex+0x330>
 800c0e4:	2b03      	cmp	r3, #3
 800c0e6:	d017      	beq.n	800c118 <__gethex+0x338>
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d109      	bne.n	800c100 <__gethex+0x320>
 800c0ec:	f019 0f02 	tst.w	r9, #2
 800c0f0:	d006      	beq.n	800c100 <__gethex+0x320>
 800c0f2:	f8da 3000 	ldr.w	r3, [sl]
 800c0f6:	ea49 0903 	orr.w	r9, r9, r3
 800c0fa:	f019 0f01 	tst.w	r9, #1
 800c0fe:	d10e      	bne.n	800c11e <__gethex+0x33e>
 800c100:	f045 0510 	orr.w	r5, r5, #16
 800c104:	e032      	b.n	800c16c <__gethex+0x38c>
 800c106:	f04f 0901 	mov.w	r9, #1
 800c10a:	e7d1      	b.n	800c0b0 <__gethex+0x2d0>
 800c10c:	2501      	movs	r5, #1
 800c10e:	e7e2      	b.n	800c0d6 <__gethex+0x2f6>
 800c110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c112:	f1c3 0301 	rsb	r3, r3, #1
 800c116:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d0f0      	beq.n	800c100 <__gethex+0x320>
 800c11e:	f04f 0c00 	mov.w	ip, #0
 800c122:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c126:	f104 0314 	add.w	r3, r4, #20
 800c12a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c12e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c132:	4618      	mov	r0, r3
 800c134:	f853 2b04 	ldr.w	r2, [r3], #4
 800c138:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c13c:	d01b      	beq.n	800c176 <__gethex+0x396>
 800c13e:	3201      	adds	r2, #1
 800c140:	6002      	str	r2, [r0, #0]
 800c142:	2d02      	cmp	r5, #2
 800c144:	f104 0314 	add.w	r3, r4, #20
 800c148:	d13c      	bne.n	800c1c4 <__gethex+0x3e4>
 800c14a:	f8d8 2000 	ldr.w	r2, [r8]
 800c14e:	3a01      	subs	r2, #1
 800c150:	42b2      	cmp	r2, r6
 800c152:	d109      	bne.n	800c168 <__gethex+0x388>
 800c154:	2201      	movs	r2, #1
 800c156:	1171      	asrs	r1, r6, #5
 800c158:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c15c:	f006 061f 	and.w	r6, r6, #31
 800c160:	fa02 f606 	lsl.w	r6, r2, r6
 800c164:	421e      	tst	r6, r3
 800c166:	d13a      	bne.n	800c1de <__gethex+0x3fe>
 800c168:	f045 0520 	orr.w	r5, r5, #32
 800c16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c16e:	601c      	str	r4, [r3, #0]
 800c170:	9b02      	ldr	r3, [sp, #8]
 800c172:	601f      	str	r7, [r3, #0]
 800c174:	e6b0      	b.n	800bed8 <__gethex+0xf8>
 800c176:	4299      	cmp	r1, r3
 800c178:	f843 cc04 	str.w	ip, [r3, #-4]
 800c17c:	d8d9      	bhi.n	800c132 <__gethex+0x352>
 800c17e:	68a3      	ldr	r3, [r4, #8]
 800c180:	459b      	cmp	fp, r3
 800c182:	db17      	blt.n	800c1b4 <__gethex+0x3d4>
 800c184:	6861      	ldr	r1, [r4, #4]
 800c186:	9801      	ldr	r0, [sp, #4]
 800c188:	3101      	adds	r1, #1
 800c18a:	f7fe f81b 	bl	800a1c4 <_Balloc>
 800c18e:	4681      	mov	r9, r0
 800c190:	b918      	cbnz	r0, 800c19a <__gethex+0x3ba>
 800c192:	4602      	mov	r2, r0
 800c194:	2184      	movs	r1, #132	@ 0x84
 800c196:	4b19      	ldr	r3, [pc, #100]	@ (800c1fc <__gethex+0x41c>)
 800c198:	e6c5      	b.n	800bf26 <__gethex+0x146>
 800c19a:	6922      	ldr	r2, [r4, #16]
 800c19c:	f104 010c 	add.w	r1, r4, #12
 800c1a0:	3202      	adds	r2, #2
 800c1a2:	0092      	lsls	r2, r2, #2
 800c1a4:	300c      	adds	r0, #12
 800c1a6:	f7ff fd6d 	bl	800bc84 <memcpy>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	9801      	ldr	r0, [sp, #4]
 800c1ae:	f7fe f849 	bl	800a244 <_Bfree>
 800c1b2:	464c      	mov	r4, r9
 800c1b4:	6923      	ldr	r3, [r4, #16]
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	6122      	str	r2, [r4, #16]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1c0:	615a      	str	r2, [r3, #20]
 800c1c2:	e7be      	b.n	800c142 <__gethex+0x362>
 800c1c4:	6922      	ldr	r2, [r4, #16]
 800c1c6:	455a      	cmp	r2, fp
 800c1c8:	dd0b      	ble.n	800c1e2 <__gethex+0x402>
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f7ff fd9f 	bl	800bd10 <rshift>
 800c1d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1d6:	3701      	adds	r7, #1
 800c1d8:	42bb      	cmp	r3, r7
 800c1da:	f6ff aee0 	blt.w	800bf9e <__gethex+0x1be>
 800c1de:	2501      	movs	r5, #1
 800c1e0:	e7c2      	b.n	800c168 <__gethex+0x388>
 800c1e2:	f016 061f 	ands.w	r6, r6, #31
 800c1e6:	d0fa      	beq.n	800c1de <__gethex+0x3fe>
 800c1e8:	4453      	add	r3, sl
 800c1ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c1ee:	f7fe f8db 	bl	800a3a8 <__hi0bits>
 800c1f2:	f1c6 0620 	rsb	r6, r6, #32
 800c1f6:	42b0      	cmp	r0, r6
 800c1f8:	dbe7      	blt.n	800c1ca <__gethex+0x3ea>
 800c1fa:	e7f0      	b.n	800c1de <__gethex+0x3fe>
 800c1fc:	0800d52d 	.word	0x0800d52d

0800c200 <L_shift>:
 800c200:	f1c2 0208 	rsb	r2, r2, #8
 800c204:	0092      	lsls	r2, r2, #2
 800c206:	b570      	push	{r4, r5, r6, lr}
 800c208:	f1c2 0620 	rsb	r6, r2, #32
 800c20c:	6843      	ldr	r3, [r0, #4]
 800c20e:	6804      	ldr	r4, [r0, #0]
 800c210:	fa03 f506 	lsl.w	r5, r3, r6
 800c214:	432c      	orrs	r4, r5
 800c216:	40d3      	lsrs	r3, r2
 800c218:	6004      	str	r4, [r0, #0]
 800c21a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c21e:	4288      	cmp	r0, r1
 800c220:	d3f4      	bcc.n	800c20c <L_shift+0xc>
 800c222:	bd70      	pop	{r4, r5, r6, pc}

0800c224 <__match>:
 800c224:	b530      	push	{r4, r5, lr}
 800c226:	6803      	ldr	r3, [r0, #0]
 800c228:	3301      	adds	r3, #1
 800c22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c22e:	b914      	cbnz	r4, 800c236 <__match+0x12>
 800c230:	6003      	str	r3, [r0, #0]
 800c232:	2001      	movs	r0, #1
 800c234:	bd30      	pop	{r4, r5, pc}
 800c236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c23a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c23e:	2d19      	cmp	r5, #25
 800c240:	bf98      	it	ls
 800c242:	3220      	addls	r2, #32
 800c244:	42a2      	cmp	r2, r4
 800c246:	d0f0      	beq.n	800c22a <__match+0x6>
 800c248:	2000      	movs	r0, #0
 800c24a:	e7f3      	b.n	800c234 <__match+0x10>

0800c24c <__hexnan>:
 800c24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c250:	2500      	movs	r5, #0
 800c252:	680b      	ldr	r3, [r1, #0]
 800c254:	4682      	mov	sl, r0
 800c256:	115e      	asrs	r6, r3, #5
 800c258:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c25c:	f013 031f 	ands.w	r3, r3, #31
 800c260:	bf18      	it	ne
 800c262:	3604      	addne	r6, #4
 800c264:	1f37      	subs	r7, r6, #4
 800c266:	4690      	mov	r8, r2
 800c268:	46b9      	mov	r9, r7
 800c26a:	463c      	mov	r4, r7
 800c26c:	46ab      	mov	fp, r5
 800c26e:	b087      	sub	sp, #28
 800c270:	6801      	ldr	r1, [r0, #0]
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	f846 5c04 	str.w	r5, [r6, #-4]
 800c278:	9502      	str	r5, [sp, #8]
 800c27a:	784a      	ldrb	r2, [r1, #1]
 800c27c:	1c4b      	adds	r3, r1, #1
 800c27e:	9303      	str	r3, [sp, #12]
 800c280:	b342      	cbz	r2, 800c2d4 <__hexnan+0x88>
 800c282:	4610      	mov	r0, r2
 800c284:	9105      	str	r1, [sp, #20]
 800c286:	9204      	str	r2, [sp, #16]
 800c288:	f7ff fd95 	bl	800bdb6 <__hexdig_fun>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d151      	bne.n	800c334 <__hexnan+0xe8>
 800c290:	9a04      	ldr	r2, [sp, #16]
 800c292:	9905      	ldr	r1, [sp, #20]
 800c294:	2a20      	cmp	r2, #32
 800c296:	d818      	bhi.n	800c2ca <__hexnan+0x7e>
 800c298:	9b02      	ldr	r3, [sp, #8]
 800c29a:	459b      	cmp	fp, r3
 800c29c:	dd13      	ble.n	800c2c6 <__hexnan+0x7a>
 800c29e:	454c      	cmp	r4, r9
 800c2a0:	d206      	bcs.n	800c2b0 <__hexnan+0x64>
 800c2a2:	2d07      	cmp	r5, #7
 800c2a4:	dc04      	bgt.n	800c2b0 <__hexnan+0x64>
 800c2a6:	462a      	mov	r2, r5
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f7ff ffa8 	bl	800c200 <L_shift>
 800c2b0:	4544      	cmp	r4, r8
 800c2b2:	d952      	bls.n	800c35a <__hexnan+0x10e>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f1a4 0904 	sub.w	r9, r4, #4
 800c2ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2be:	461d      	mov	r5, r3
 800c2c0:	464c      	mov	r4, r9
 800c2c2:	f8cd b008 	str.w	fp, [sp, #8]
 800c2c6:	9903      	ldr	r1, [sp, #12]
 800c2c8:	e7d7      	b.n	800c27a <__hexnan+0x2e>
 800c2ca:	2a29      	cmp	r2, #41	@ 0x29
 800c2cc:	d157      	bne.n	800c37e <__hexnan+0x132>
 800c2ce:	3102      	adds	r1, #2
 800c2d0:	f8ca 1000 	str.w	r1, [sl]
 800c2d4:	f1bb 0f00 	cmp.w	fp, #0
 800c2d8:	d051      	beq.n	800c37e <__hexnan+0x132>
 800c2da:	454c      	cmp	r4, r9
 800c2dc:	d206      	bcs.n	800c2ec <__hexnan+0xa0>
 800c2de:	2d07      	cmp	r5, #7
 800c2e0:	dc04      	bgt.n	800c2ec <__hexnan+0xa0>
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f7ff ff8a 	bl	800c200 <L_shift>
 800c2ec:	4544      	cmp	r4, r8
 800c2ee:	d936      	bls.n	800c35e <__hexnan+0x112>
 800c2f0:	4623      	mov	r3, r4
 800c2f2:	f1a8 0204 	sub.w	r2, r8, #4
 800c2f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2fa:	429f      	cmp	r7, r3
 800c2fc:	f842 1f04 	str.w	r1, [r2, #4]!
 800c300:	d2f9      	bcs.n	800c2f6 <__hexnan+0xaa>
 800c302:	1b3b      	subs	r3, r7, r4
 800c304:	f023 0303 	bic.w	r3, r3, #3
 800c308:	3304      	adds	r3, #4
 800c30a:	3401      	adds	r4, #1
 800c30c:	3e03      	subs	r6, #3
 800c30e:	42b4      	cmp	r4, r6
 800c310:	bf88      	it	hi
 800c312:	2304      	movhi	r3, #4
 800c314:	2200      	movs	r2, #0
 800c316:	4443      	add	r3, r8
 800c318:	f843 2b04 	str.w	r2, [r3], #4
 800c31c:	429f      	cmp	r7, r3
 800c31e:	d2fb      	bcs.n	800c318 <__hexnan+0xcc>
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	b91b      	cbnz	r3, 800c32c <__hexnan+0xe0>
 800c324:	4547      	cmp	r7, r8
 800c326:	d128      	bne.n	800c37a <__hexnan+0x12e>
 800c328:	2301      	movs	r3, #1
 800c32a:	603b      	str	r3, [r7, #0]
 800c32c:	2005      	movs	r0, #5
 800c32e:	b007      	add	sp, #28
 800c330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c334:	3501      	adds	r5, #1
 800c336:	2d08      	cmp	r5, #8
 800c338:	f10b 0b01 	add.w	fp, fp, #1
 800c33c:	dd06      	ble.n	800c34c <__hexnan+0x100>
 800c33e:	4544      	cmp	r4, r8
 800c340:	d9c1      	bls.n	800c2c6 <__hexnan+0x7a>
 800c342:	2300      	movs	r3, #0
 800c344:	2501      	movs	r5, #1
 800c346:	f844 3c04 	str.w	r3, [r4, #-4]
 800c34a:	3c04      	subs	r4, #4
 800c34c:	6822      	ldr	r2, [r4, #0]
 800c34e:	f000 000f 	and.w	r0, r0, #15
 800c352:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c356:	6020      	str	r0, [r4, #0]
 800c358:	e7b5      	b.n	800c2c6 <__hexnan+0x7a>
 800c35a:	2508      	movs	r5, #8
 800c35c:	e7b3      	b.n	800c2c6 <__hexnan+0x7a>
 800c35e:	9b01      	ldr	r3, [sp, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d0dd      	beq.n	800c320 <__hexnan+0xd4>
 800c364:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c368:	f1c3 0320 	rsb	r3, r3, #32
 800c36c:	40da      	lsrs	r2, r3
 800c36e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c372:	4013      	ands	r3, r2
 800c374:	f846 3c04 	str.w	r3, [r6, #-4]
 800c378:	e7d2      	b.n	800c320 <__hexnan+0xd4>
 800c37a:	3f04      	subs	r7, #4
 800c37c:	e7d0      	b.n	800c320 <__hexnan+0xd4>
 800c37e:	2004      	movs	r0, #4
 800c380:	e7d5      	b.n	800c32e <__hexnan+0xe2>

0800c382 <__ascii_mbtowc>:
 800c382:	b082      	sub	sp, #8
 800c384:	b901      	cbnz	r1, 800c388 <__ascii_mbtowc+0x6>
 800c386:	a901      	add	r1, sp, #4
 800c388:	b142      	cbz	r2, 800c39c <__ascii_mbtowc+0x1a>
 800c38a:	b14b      	cbz	r3, 800c3a0 <__ascii_mbtowc+0x1e>
 800c38c:	7813      	ldrb	r3, [r2, #0]
 800c38e:	600b      	str	r3, [r1, #0]
 800c390:	7812      	ldrb	r2, [r2, #0]
 800c392:	1e10      	subs	r0, r2, #0
 800c394:	bf18      	it	ne
 800c396:	2001      	movne	r0, #1
 800c398:	b002      	add	sp, #8
 800c39a:	4770      	bx	lr
 800c39c:	4610      	mov	r0, r2
 800c39e:	e7fb      	b.n	800c398 <__ascii_mbtowc+0x16>
 800c3a0:	f06f 0001 	mvn.w	r0, #1
 800c3a4:	e7f8      	b.n	800c398 <__ascii_mbtowc+0x16>

0800c3a6 <_realloc_r>:
 800c3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3aa:	4680      	mov	r8, r0
 800c3ac:	4615      	mov	r5, r2
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	b921      	cbnz	r1, 800c3bc <_realloc_r+0x16>
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b8:	f7fd be78 	b.w	800a0ac <_malloc_r>
 800c3bc:	b92a      	cbnz	r2, 800c3ca <_realloc_r+0x24>
 800c3be:	f7fd fe03 	bl	8009fc8 <_free_r>
 800c3c2:	2400      	movs	r4, #0
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ca:	f000 f840 	bl	800c44e <_malloc_usable_size_r>
 800c3ce:	4285      	cmp	r5, r0
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	d802      	bhi.n	800c3da <_realloc_r+0x34>
 800c3d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c3d8:	d8f4      	bhi.n	800c3c4 <_realloc_r+0x1e>
 800c3da:	4629      	mov	r1, r5
 800c3dc:	4640      	mov	r0, r8
 800c3de:	f7fd fe65 	bl	800a0ac <_malloc_r>
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d0ec      	beq.n	800c3c2 <_realloc_r+0x1c>
 800c3e8:	42b5      	cmp	r5, r6
 800c3ea:	462a      	mov	r2, r5
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	bf28      	it	cs
 800c3f0:	4632      	movcs	r2, r6
 800c3f2:	f7ff fc47 	bl	800bc84 <memcpy>
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4640      	mov	r0, r8
 800c3fa:	f7fd fde5 	bl	8009fc8 <_free_r>
 800c3fe:	463c      	mov	r4, r7
 800c400:	e7e0      	b.n	800c3c4 <_realloc_r+0x1e>

0800c402 <__ascii_wctomb>:
 800c402:	4603      	mov	r3, r0
 800c404:	4608      	mov	r0, r1
 800c406:	b141      	cbz	r1, 800c41a <__ascii_wctomb+0x18>
 800c408:	2aff      	cmp	r2, #255	@ 0xff
 800c40a:	d904      	bls.n	800c416 <__ascii_wctomb+0x14>
 800c40c:	228a      	movs	r2, #138	@ 0x8a
 800c40e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	4770      	bx	lr
 800c416:	2001      	movs	r0, #1
 800c418:	700a      	strb	r2, [r1, #0]
 800c41a:	4770      	bx	lr

0800c41c <fiprintf>:
 800c41c:	b40e      	push	{r1, r2, r3}
 800c41e:	b503      	push	{r0, r1, lr}
 800c420:	4601      	mov	r1, r0
 800c422:	ab03      	add	r3, sp, #12
 800c424:	4805      	ldr	r0, [pc, #20]	@ (800c43c <fiprintf+0x20>)
 800c426:	f853 2b04 	ldr.w	r2, [r3], #4
 800c42a:	6800      	ldr	r0, [r0, #0]
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	f000 f83d 	bl	800c4ac <_vfiprintf_r>
 800c432:	b002      	add	sp, #8
 800c434:	f85d eb04 	ldr.w	lr, [sp], #4
 800c438:	b003      	add	sp, #12
 800c43a:	4770      	bx	lr
 800c43c:	20000064 	.word	0x20000064

0800c440 <abort>:
 800c440:	2006      	movs	r0, #6
 800c442:	b508      	push	{r3, lr}
 800c444:	f000 fa06 	bl	800c854 <raise>
 800c448:	2001      	movs	r0, #1
 800c44a:	f7f5 ff3e 	bl	80022ca <_exit>

0800c44e <_malloc_usable_size_r>:
 800c44e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c452:	1f18      	subs	r0, r3, #4
 800c454:	2b00      	cmp	r3, #0
 800c456:	bfbc      	itt	lt
 800c458:	580b      	ldrlt	r3, [r1, r0]
 800c45a:	18c0      	addlt	r0, r0, r3
 800c45c:	4770      	bx	lr

0800c45e <__sfputc_r>:
 800c45e:	6893      	ldr	r3, [r2, #8]
 800c460:	b410      	push	{r4}
 800c462:	3b01      	subs	r3, #1
 800c464:	2b00      	cmp	r3, #0
 800c466:	6093      	str	r3, [r2, #8]
 800c468:	da07      	bge.n	800c47a <__sfputc_r+0x1c>
 800c46a:	6994      	ldr	r4, [r2, #24]
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	db01      	blt.n	800c474 <__sfputc_r+0x16>
 800c470:	290a      	cmp	r1, #10
 800c472:	d102      	bne.n	800c47a <__sfputc_r+0x1c>
 800c474:	bc10      	pop	{r4}
 800c476:	f000 b931 	b.w	800c6dc <__swbuf_r>
 800c47a:	6813      	ldr	r3, [r2, #0]
 800c47c:	1c58      	adds	r0, r3, #1
 800c47e:	6010      	str	r0, [r2, #0]
 800c480:	7019      	strb	r1, [r3, #0]
 800c482:	4608      	mov	r0, r1
 800c484:	bc10      	pop	{r4}
 800c486:	4770      	bx	lr

0800c488 <__sfputs_r>:
 800c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48a:	4606      	mov	r6, r0
 800c48c:	460f      	mov	r7, r1
 800c48e:	4614      	mov	r4, r2
 800c490:	18d5      	adds	r5, r2, r3
 800c492:	42ac      	cmp	r4, r5
 800c494:	d101      	bne.n	800c49a <__sfputs_r+0x12>
 800c496:	2000      	movs	r0, #0
 800c498:	e007      	b.n	800c4aa <__sfputs_r+0x22>
 800c49a:	463a      	mov	r2, r7
 800c49c:	4630      	mov	r0, r6
 800c49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a2:	f7ff ffdc 	bl	800c45e <__sfputc_r>
 800c4a6:	1c43      	adds	r3, r0, #1
 800c4a8:	d1f3      	bne.n	800c492 <__sfputs_r+0xa>
 800c4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4ac <_vfiprintf_r>:
 800c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	4614      	mov	r4, r2
 800c4b4:	4698      	mov	r8, r3
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	b09d      	sub	sp, #116	@ 0x74
 800c4ba:	b118      	cbz	r0, 800c4c4 <_vfiprintf_r+0x18>
 800c4bc:	6a03      	ldr	r3, [r0, #32]
 800c4be:	b90b      	cbnz	r3, 800c4c4 <_vfiprintf_r+0x18>
 800c4c0:	f7fc fe06 	bl	80090d0 <__sinit>
 800c4c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4c6:	07d9      	lsls	r1, r3, #31
 800c4c8:	d405      	bmi.n	800c4d6 <_vfiprintf_r+0x2a>
 800c4ca:	89ab      	ldrh	r3, [r5, #12]
 800c4cc:	059a      	lsls	r2, r3, #22
 800c4ce:	d402      	bmi.n	800c4d6 <_vfiprintf_r+0x2a>
 800c4d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4d2:	f7fc ff14 	bl	80092fe <__retarget_lock_acquire_recursive>
 800c4d6:	89ab      	ldrh	r3, [r5, #12]
 800c4d8:	071b      	lsls	r3, r3, #28
 800c4da:	d501      	bpl.n	800c4e0 <_vfiprintf_r+0x34>
 800c4dc:	692b      	ldr	r3, [r5, #16]
 800c4de:	b99b      	cbnz	r3, 800c508 <_vfiprintf_r+0x5c>
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f000 f938 	bl	800c758 <__swsetup_r>
 800c4e8:	b170      	cbz	r0, 800c508 <_vfiprintf_r+0x5c>
 800c4ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4ec:	07dc      	lsls	r4, r3, #31
 800c4ee:	d504      	bpl.n	800c4fa <_vfiprintf_r+0x4e>
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4f4:	b01d      	add	sp, #116	@ 0x74
 800c4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fa:	89ab      	ldrh	r3, [r5, #12]
 800c4fc:	0598      	lsls	r0, r3, #22
 800c4fe:	d4f7      	bmi.n	800c4f0 <_vfiprintf_r+0x44>
 800c500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c502:	f7fc fefd 	bl	8009300 <__retarget_lock_release_recursive>
 800c506:	e7f3      	b.n	800c4f0 <_vfiprintf_r+0x44>
 800c508:	2300      	movs	r3, #0
 800c50a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c50c:	2320      	movs	r3, #32
 800c50e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c512:	2330      	movs	r3, #48	@ 0x30
 800c514:	f04f 0901 	mov.w	r9, #1
 800c518:	f8cd 800c 	str.w	r8, [sp, #12]
 800c51c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c6c8 <_vfiprintf_r+0x21c>
 800c520:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c524:	4623      	mov	r3, r4
 800c526:	469a      	mov	sl, r3
 800c528:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c52c:	b10a      	cbz	r2, 800c532 <_vfiprintf_r+0x86>
 800c52e:	2a25      	cmp	r2, #37	@ 0x25
 800c530:	d1f9      	bne.n	800c526 <_vfiprintf_r+0x7a>
 800c532:	ebba 0b04 	subs.w	fp, sl, r4
 800c536:	d00b      	beq.n	800c550 <_vfiprintf_r+0xa4>
 800c538:	465b      	mov	r3, fp
 800c53a:	4622      	mov	r2, r4
 800c53c:	4629      	mov	r1, r5
 800c53e:	4630      	mov	r0, r6
 800c540:	f7ff ffa2 	bl	800c488 <__sfputs_r>
 800c544:	3001      	adds	r0, #1
 800c546:	f000 80a7 	beq.w	800c698 <_vfiprintf_r+0x1ec>
 800c54a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c54c:	445a      	add	r2, fp
 800c54e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c550:	f89a 3000 	ldrb.w	r3, [sl]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 809f 	beq.w	800c698 <_vfiprintf_r+0x1ec>
 800c55a:	2300      	movs	r3, #0
 800c55c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c564:	f10a 0a01 	add.w	sl, sl, #1
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	9307      	str	r3, [sp, #28]
 800c56c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c570:	931a      	str	r3, [sp, #104]	@ 0x68
 800c572:	4654      	mov	r4, sl
 800c574:	2205      	movs	r2, #5
 800c576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c57a:	4853      	ldr	r0, [pc, #332]	@ (800c6c8 <_vfiprintf_r+0x21c>)
 800c57c:	f7fc fec1 	bl	8009302 <memchr>
 800c580:	9a04      	ldr	r2, [sp, #16]
 800c582:	b9d8      	cbnz	r0, 800c5bc <_vfiprintf_r+0x110>
 800c584:	06d1      	lsls	r1, r2, #27
 800c586:	bf44      	itt	mi
 800c588:	2320      	movmi	r3, #32
 800c58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c58e:	0713      	lsls	r3, r2, #28
 800c590:	bf44      	itt	mi
 800c592:	232b      	movmi	r3, #43	@ 0x2b
 800c594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c598:	f89a 3000 	ldrb.w	r3, [sl]
 800c59c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c59e:	d015      	beq.n	800c5cc <_vfiprintf_r+0x120>
 800c5a0:	4654      	mov	r4, sl
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	f04f 0c0a 	mov.w	ip, #10
 800c5a8:	9a07      	ldr	r2, [sp, #28]
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5b0:	3b30      	subs	r3, #48	@ 0x30
 800c5b2:	2b09      	cmp	r3, #9
 800c5b4:	d94b      	bls.n	800c64e <_vfiprintf_r+0x1a2>
 800c5b6:	b1b0      	cbz	r0, 800c5e6 <_vfiprintf_r+0x13a>
 800c5b8:	9207      	str	r2, [sp, #28]
 800c5ba:	e014      	b.n	800c5e6 <_vfiprintf_r+0x13a>
 800c5bc:	eba0 0308 	sub.w	r3, r0, r8
 800c5c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	46a2      	mov	sl, r4
 800c5c8:	9304      	str	r3, [sp, #16]
 800c5ca:	e7d2      	b.n	800c572 <_vfiprintf_r+0xc6>
 800c5cc:	9b03      	ldr	r3, [sp, #12]
 800c5ce:	1d19      	adds	r1, r3, #4
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	9103      	str	r1, [sp, #12]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bfbb      	ittet	lt
 800c5d8:	425b      	neglt	r3, r3
 800c5da:	f042 0202 	orrlt.w	r2, r2, #2
 800c5de:	9307      	strge	r3, [sp, #28]
 800c5e0:	9307      	strlt	r3, [sp, #28]
 800c5e2:	bfb8      	it	lt
 800c5e4:	9204      	strlt	r2, [sp, #16]
 800c5e6:	7823      	ldrb	r3, [r4, #0]
 800c5e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5ea:	d10a      	bne.n	800c602 <_vfiprintf_r+0x156>
 800c5ec:	7863      	ldrb	r3, [r4, #1]
 800c5ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5f0:	d132      	bne.n	800c658 <_vfiprintf_r+0x1ac>
 800c5f2:	9b03      	ldr	r3, [sp, #12]
 800c5f4:	3402      	adds	r4, #2
 800c5f6:	1d1a      	adds	r2, r3, #4
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	9203      	str	r2, [sp, #12]
 800c5fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c600:	9305      	str	r3, [sp, #20]
 800c602:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c6cc <_vfiprintf_r+0x220>
 800c606:	2203      	movs	r2, #3
 800c608:	4650      	mov	r0, sl
 800c60a:	7821      	ldrb	r1, [r4, #0]
 800c60c:	f7fc fe79 	bl	8009302 <memchr>
 800c610:	b138      	cbz	r0, 800c622 <_vfiprintf_r+0x176>
 800c612:	2240      	movs	r2, #64	@ 0x40
 800c614:	9b04      	ldr	r3, [sp, #16]
 800c616:	eba0 000a 	sub.w	r0, r0, sl
 800c61a:	4082      	lsls	r2, r0
 800c61c:	4313      	orrs	r3, r2
 800c61e:	3401      	adds	r4, #1
 800c620:	9304      	str	r3, [sp, #16]
 800c622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c626:	2206      	movs	r2, #6
 800c628:	4829      	ldr	r0, [pc, #164]	@ (800c6d0 <_vfiprintf_r+0x224>)
 800c62a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c62e:	f7fc fe68 	bl	8009302 <memchr>
 800c632:	2800      	cmp	r0, #0
 800c634:	d03f      	beq.n	800c6b6 <_vfiprintf_r+0x20a>
 800c636:	4b27      	ldr	r3, [pc, #156]	@ (800c6d4 <_vfiprintf_r+0x228>)
 800c638:	bb1b      	cbnz	r3, 800c682 <_vfiprintf_r+0x1d6>
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	3307      	adds	r3, #7
 800c63e:	f023 0307 	bic.w	r3, r3, #7
 800c642:	3308      	adds	r3, #8
 800c644:	9303      	str	r3, [sp, #12]
 800c646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c648:	443b      	add	r3, r7
 800c64a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c64c:	e76a      	b.n	800c524 <_vfiprintf_r+0x78>
 800c64e:	460c      	mov	r4, r1
 800c650:	2001      	movs	r0, #1
 800c652:	fb0c 3202 	mla	r2, ip, r2, r3
 800c656:	e7a8      	b.n	800c5aa <_vfiprintf_r+0xfe>
 800c658:	2300      	movs	r3, #0
 800c65a:	f04f 0c0a 	mov.w	ip, #10
 800c65e:	4619      	mov	r1, r3
 800c660:	3401      	adds	r4, #1
 800c662:	9305      	str	r3, [sp, #20]
 800c664:	4620      	mov	r0, r4
 800c666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c66a:	3a30      	subs	r2, #48	@ 0x30
 800c66c:	2a09      	cmp	r2, #9
 800c66e:	d903      	bls.n	800c678 <_vfiprintf_r+0x1cc>
 800c670:	2b00      	cmp	r3, #0
 800c672:	d0c6      	beq.n	800c602 <_vfiprintf_r+0x156>
 800c674:	9105      	str	r1, [sp, #20]
 800c676:	e7c4      	b.n	800c602 <_vfiprintf_r+0x156>
 800c678:	4604      	mov	r4, r0
 800c67a:	2301      	movs	r3, #1
 800c67c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c680:	e7f0      	b.n	800c664 <_vfiprintf_r+0x1b8>
 800c682:	ab03      	add	r3, sp, #12
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	462a      	mov	r2, r5
 800c688:	4630      	mov	r0, r6
 800c68a:	4b13      	ldr	r3, [pc, #76]	@ (800c6d8 <_vfiprintf_r+0x22c>)
 800c68c:	a904      	add	r1, sp, #16
 800c68e:	f7fb fec5 	bl	800841c <_printf_float>
 800c692:	4607      	mov	r7, r0
 800c694:	1c78      	adds	r0, r7, #1
 800c696:	d1d6      	bne.n	800c646 <_vfiprintf_r+0x19a>
 800c698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c69a:	07d9      	lsls	r1, r3, #31
 800c69c:	d405      	bmi.n	800c6aa <_vfiprintf_r+0x1fe>
 800c69e:	89ab      	ldrh	r3, [r5, #12]
 800c6a0:	059a      	lsls	r2, r3, #22
 800c6a2:	d402      	bmi.n	800c6aa <_vfiprintf_r+0x1fe>
 800c6a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6a6:	f7fc fe2b 	bl	8009300 <__retarget_lock_release_recursive>
 800c6aa:	89ab      	ldrh	r3, [r5, #12]
 800c6ac:	065b      	lsls	r3, r3, #25
 800c6ae:	f53f af1f 	bmi.w	800c4f0 <_vfiprintf_r+0x44>
 800c6b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6b4:	e71e      	b.n	800c4f4 <_vfiprintf_r+0x48>
 800c6b6:	ab03      	add	r3, sp, #12
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	462a      	mov	r2, r5
 800c6bc:	4630      	mov	r0, r6
 800c6be:	4b06      	ldr	r3, [pc, #24]	@ (800c6d8 <_vfiprintf_r+0x22c>)
 800c6c0:	a904      	add	r1, sp, #16
 800c6c2:	f7fc f949 	bl	8008958 <_printf_i>
 800c6c6:	e7e4      	b.n	800c692 <_vfiprintf_r+0x1e6>
 800c6c8:	0800d7f1 	.word	0x0800d7f1
 800c6cc:	0800d7f7 	.word	0x0800d7f7
 800c6d0:	0800d7fb 	.word	0x0800d7fb
 800c6d4:	0800841d 	.word	0x0800841d
 800c6d8:	0800c489 	.word	0x0800c489

0800c6dc <__swbuf_r>:
 800c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6de:	460e      	mov	r6, r1
 800c6e0:	4614      	mov	r4, r2
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	b118      	cbz	r0, 800c6ee <__swbuf_r+0x12>
 800c6e6:	6a03      	ldr	r3, [r0, #32]
 800c6e8:	b90b      	cbnz	r3, 800c6ee <__swbuf_r+0x12>
 800c6ea:	f7fc fcf1 	bl	80090d0 <__sinit>
 800c6ee:	69a3      	ldr	r3, [r4, #24]
 800c6f0:	60a3      	str	r3, [r4, #8]
 800c6f2:	89a3      	ldrh	r3, [r4, #12]
 800c6f4:	071a      	lsls	r2, r3, #28
 800c6f6:	d501      	bpl.n	800c6fc <__swbuf_r+0x20>
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	b943      	cbnz	r3, 800c70e <__swbuf_r+0x32>
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	4628      	mov	r0, r5
 800c700:	f000 f82a 	bl	800c758 <__swsetup_r>
 800c704:	b118      	cbz	r0, 800c70e <__swbuf_r+0x32>
 800c706:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c70a:	4638      	mov	r0, r7
 800c70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	6922      	ldr	r2, [r4, #16]
 800c712:	b2f6      	uxtb	r6, r6
 800c714:	1a98      	subs	r0, r3, r2
 800c716:	6963      	ldr	r3, [r4, #20]
 800c718:	4637      	mov	r7, r6
 800c71a:	4283      	cmp	r3, r0
 800c71c:	dc05      	bgt.n	800c72a <__swbuf_r+0x4e>
 800c71e:	4621      	mov	r1, r4
 800c720:	4628      	mov	r0, r5
 800c722:	f7ff fa4b 	bl	800bbbc <_fflush_r>
 800c726:	2800      	cmp	r0, #0
 800c728:	d1ed      	bne.n	800c706 <__swbuf_r+0x2a>
 800c72a:	68a3      	ldr	r3, [r4, #8]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	60a3      	str	r3, [r4, #8]
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	6022      	str	r2, [r4, #0]
 800c736:	701e      	strb	r6, [r3, #0]
 800c738:	6962      	ldr	r2, [r4, #20]
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d004      	beq.n	800c74a <__swbuf_r+0x6e>
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	07db      	lsls	r3, r3, #31
 800c744:	d5e1      	bpl.n	800c70a <__swbuf_r+0x2e>
 800c746:	2e0a      	cmp	r6, #10
 800c748:	d1df      	bne.n	800c70a <__swbuf_r+0x2e>
 800c74a:	4621      	mov	r1, r4
 800c74c:	4628      	mov	r0, r5
 800c74e:	f7ff fa35 	bl	800bbbc <_fflush_r>
 800c752:	2800      	cmp	r0, #0
 800c754:	d0d9      	beq.n	800c70a <__swbuf_r+0x2e>
 800c756:	e7d6      	b.n	800c706 <__swbuf_r+0x2a>

0800c758 <__swsetup_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4b29      	ldr	r3, [pc, #164]	@ (800c800 <__swsetup_r+0xa8>)
 800c75c:	4605      	mov	r5, r0
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	460c      	mov	r4, r1
 800c762:	b118      	cbz	r0, 800c76c <__swsetup_r+0x14>
 800c764:	6a03      	ldr	r3, [r0, #32]
 800c766:	b90b      	cbnz	r3, 800c76c <__swsetup_r+0x14>
 800c768:	f7fc fcb2 	bl	80090d0 <__sinit>
 800c76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c770:	0719      	lsls	r1, r3, #28
 800c772:	d422      	bmi.n	800c7ba <__swsetup_r+0x62>
 800c774:	06da      	lsls	r2, r3, #27
 800c776:	d407      	bmi.n	800c788 <__swsetup_r+0x30>
 800c778:	2209      	movs	r2, #9
 800c77a:	602a      	str	r2, [r5, #0]
 800c77c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	e033      	b.n	800c7f0 <__swsetup_r+0x98>
 800c788:	0758      	lsls	r0, r3, #29
 800c78a:	d512      	bpl.n	800c7b2 <__swsetup_r+0x5a>
 800c78c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c78e:	b141      	cbz	r1, 800c7a2 <__swsetup_r+0x4a>
 800c790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c794:	4299      	cmp	r1, r3
 800c796:	d002      	beq.n	800c79e <__swsetup_r+0x46>
 800c798:	4628      	mov	r0, r5
 800c79a:	f7fd fc15 	bl	8009fc8 <_free_r>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	6063      	str	r3, [r4, #4]
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	f043 0308 	orr.w	r3, r3, #8
 800c7b8:	81a3      	strh	r3, [r4, #12]
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	b94b      	cbnz	r3, 800c7d2 <__swsetup_r+0x7a>
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c7c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7c8:	d003      	beq.n	800c7d2 <__swsetup_r+0x7a>
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	f000 f882 	bl	800c8d6 <__smakebuf_r>
 800c7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d6:	f013 0201 	ands.w	r2, r3, #1
 800c7da:	d00a      	beq.n	800c7f2 <__swsetup_r+0x9a>
 800c7dc:	2200      	movs	r2, #0
 800c7de:	60a2      	str	r2, [r4, #8]
 800c7e0:	6962      	ldr	r2, [r4, #20]
 800c7e2:	4252      	negs	r2, r2
 800c7e4:	61a2      	str	r2, [r4, #24]
 800c7e6:	6922      	ldr	r2, [r4, #16]
 800c7e8:	b942      	cbnz	r2, 800c7fc <__swsetup_r+0xa4>
 800c7ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c7ee:	d1c5      	bne.n	800c77c <__swsetup_r+0x24>
 800c7f0:	bd38      	pop	{r3, r4, r5, pc}
 800c7f2:	0799      	lsls	r1, r3, #30
 800c7f4:	bf58      	it	pl
 800c7f6:	6962      	ldrpl	r2, [r4, #20]
 800c7f8:	60a2      	str	r2, [r4, #8]
 800c7fa:	e7f4      	b.n	800c7e6 <__swsetup_r+0x8e>
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	e7f7      	b.n	800c7f0 <__swsetup_r+0x98>
 800c800:	20000064 	.word	0x20000064

0800c804 <_raise_r>:
 800c804:	291f      	cmp	r1, #31
 800c806:	b538      	push	{r3, r4, r5, lr}
 800c808:	4605      	mov	r5, r0
 800c80a:	460c      	mov	r4, r1
 800c80c:	d904      	bls.n	800c818 <_raise_r+0x14>
 800c80e:	2316      	movs	r3, #22
 800c810:	6003      	str	r3, [r0, #0]
 800c812:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c81a:	b112      	cbz	r2, 800c822 <_raise_r+0x1e>
 800c81c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c820:	b94b      	cbnz	r3, 800c836 <_raise_r+0x32>
 800c822:	4628      	mov	r0, r5
 800c824:	f000 f830 	bl	800c888 <_getpid_r>
 800c828:	4622      	mov	r2, r4
 800c82a:	4601      	mov	r1, r0
 800c82c:	4628      	mov	r0, r5
 800c82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c832:	f000 b817 	b.w	800c864 <_kill_r>
 800c836:	2b01      	cmp	r3, #1
 800c838:	d00a      	beq.n	800c850 <_raise_r+0x4c>
 800c83a:	1c59      	adds	r1, r3, #1
 800c83c:	d103      	bne.n	800c846 <_raise_r+0x42>
 800c83e:	2316      	movs	r3, #22
 800c840:	6003      	str	r3, [r0, #0]
 800c842:	2001      	movs	r0, #1
 800c844:	e7e7      	b.n	800c816 <_raise_r+0x12>
 800c846:	2100      	movs	r1, #0
 800c848:	4620      	mov	r0, r4
 800c84a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c84e:	4798      	blx	r3
 800c850:	2000      	movs	r0, #0
 800c852:	e7e0      	b.n	800c816 <_raise_r+0x12>

0800c854 <raise>:
 800c854:	4b02      	ldr	r3, [pc, #8]	@ (800c860 <raise+0xc>)
 800c856:	4601      	mov	r1, r0
 800c858:	6818      	ldr	r0, [r3, #0]
 800c85a:	f7ff bfd3 	b.w	800c804 <_raise_r>
 800c85e:	bf00      	nop
 800c860:	20000064 	.word	0x20000064

0800c864 <_kill_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	2300      	movs	r3, #0
 800c868:	4d06      	ldr	r5, [pc, #24]	@ (800c884 <_kill_r+0x20>)
 800c86a:	4604      	mov	r4, r0
 800c86c:	4608      	mov	r0, r1
 800c86e:	4611      	mov	r1, r2
 800c870:	602b      	str	r3, [r5, #0]
 800c872:	f7f5 fd1a 	bl	80022aa <_kill>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	d102      	bne.n	800c880 <_kill_r+0x1c>
 800c87a:	682b      	ldr	r3, [r5, #0]
 800c87c:	b103      	cbz	r3, 800c880 <_kill_r+0x1c>
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	bd38      	pop	{r3, r4, r5, pc}
 800c882:	bf00      	nop
 800c884:	20002744 	.word	0x20002744

0800c888 <_getpid_r>:
 800c888:	f7f5 bd08 	b.w	800229c <_getpid>

0800c88c <__swhatbuf_r>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	460c      	mov	r4, r1
 800c890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c894:	4615      	mov	r5, r2
 800c896:	2900      	cmp	r1, #0
 800c898:	461e      	mov	r6, r3
 800c89a:	b096      	sub	sp, #88	@ 0x58
 800c89c:	da0c      	bge.n	800c8b8 <__swhatbuf_r+0x2c>
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c8a6:	bf14      	ite	ne
 800c8a8:	2340      	movne	r3, #64	@ 0x40
 800c8aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	6031      	str	r1, [r6, #0]
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	b016      	add	sp, #88	@ 0x58
 800c8b6:	bd70      	pop	{r4, r5, r6, pc}
 800c8b8:	466a      	mov	r2, sp
 800c8ba:	f000 f849 	bl	800c950 <_fstat_r>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	dbed      	blt.n	800c89e <__swhatbuf_r+0x12>
 800c8c2:	9901      	ldr	r1, [sp, #4]
 800c8c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c8c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c8cc:	4259      	negs	r1, r3
 800c8ce:	4159      	adcs	r1, r3
 800c8d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8d4:	e7eb      	b.n	800c8ae <__swhatbuf_r+0x22>

0800c8d6 <__smakebuf_r>:
 800c8d6:	898b      	ldrh	r3, [r1, #12]
 800c8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8da:	079d      	lsls	r5, r3, #30
 800c8dc:	4606      	mov	r6, r0
 800c8de:	460c      	mov	r4, r1
 800c8e0:	d507      	bpl.n	800c8f2 <__smakebuf_r+0x1c>
 800c8e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	6163      	str	r3, [r4, #20]
 800c8ee:	b003      	add	sp, #12
 800c8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f2:	466a      	mov	r2, sp
 800c8f4:	ab01      	add	r3, sp, #4
 800c8f6:	f7ff ffc9 	bl	800c88c <__swhatbuf_r>
 800c8fa:	9f00      	ldr	r7, [sp, #0]
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	4639      	mov	r1, r7
 800c900:	4630      	mov	r0, r6
 800c902:	f7fd fbd3 	bl	800a0ac <_malloc_r>
 800c906:	b948      	cbnz	r0, 800c91c <__smakebuf_r+0x46>
 800c908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c90c:	059a      	lsls	r2, r3, #22
 800c90e:	d4ee      	bmi.n	800c8ee <__smakebuf_r+0x18>
 800c910:	f023 0303 	bic.w	r3, r3, #3
 800c914:	f043 0302 	orr.w	r3, r3, #2
 800c918:	81a3      	strh	r3, [r4, #12]
 800c91a:	e7e2      	b.n	800c8e2 <__smakebuf_r+0xc>
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	9b01      	ldr	r3, [sp, #4]
 800c92a:	6020      	str	r0, [r4, #0]
 800c92c:	b15b      	cbz	r3, 800c946 <__smakebuf_r+0x70>
 800c92e:	4630      	mov	r0, r6
 800c930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c934:	f000 f81e 	bl	800c974 <_isatty_r>
 800c938:	b128      	cbz	r0, 800c946 <__smakebuf_r+0x70>
 800c93a:	89a3      	ldrh	r3, [r4, #12]
 800c93c:	f023 0303 	bic.w	r3, r3, #3
 800c940:	f043 0301 	orr.w	r3, r3, #1
 800c944:	81a3      	strh	r3, [r4, #12]
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	431d      	orrs	r5, r3
 800c94a:	81a5      	strh	r5, [r4, #12]
 800c94c:	e7cf      	b.n	800c8ee <__smakebuf_r+0x18>
	...

0800c950 <_fstat_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	2300      	movs	r3, #0
 800c954:	4d06      	ldr	r5, [pc, #24]	@ (800c970 <_fstat_r+0x20>)
 800c956:	4604      	mov	r4, r0
 800c958:	4608      	mov	r0, r1
 800c95a:	4611      	mov	r1, r2
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	f7f5 fd03 	bl	8002368 <_fstat>
 800c962:	1c43      	adds	r3, r0, #1
 800c964:	d102      	bne.n	800c96c <_fstat_r+0x1c>
 800c966:	682b      	ldr	r3, [r5, #0]
 800c968:	b103      	cbz	r3, 800c96c <_fstat_r+0x1c>
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	bd38      	pop	{r3, r4, r5, pc}
 800c96e:	bf00      	nop
 800c970:	20002744 	.word	0x20002744

0800c974 <_isatty_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	2300      	movs	r3, #0
 800c978:	4d05      	ldr	r5, [pc, #20]	@ (800c990 <_isatty_r+0x1c>)
 800c97a:	4604      	mov	r4, r0
 800c97c:	4608      	mov	r0, r1
 800c97e:	602b      	str	r3, [r5, #0]
 800c980:	f7f5 fd01 	bl	8002386 <_isatty>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	d102      	bne.n	800c98e <_isatty_r+0x1a>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	b103      	cbz	r3, 800c98e <_isatty_r+0x1a>
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	bd38      	pop	{r3, r4, r5, pc}
 800c990:	20002744 	.word	0x20002744

0800c994 <_init>:
 800c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c996:	bf00      	nop
 800c998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99a:	bc08      	pop	{r3}
 800c99c:	469e      	mov	lr, r3
 800c99e:	4770      	bx	lr

0800c9a0 <_fini>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	bf00      	nop
 800c9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a6:	bc08      	pop	{r3}
 800c9a8:	469e      	mov	lr, r3
 800c9aa:	4770      	bx	lr
